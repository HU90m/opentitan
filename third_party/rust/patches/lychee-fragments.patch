diff --git a/.github/dependabot.yml b/.github/dependabot.yml
index 5cde165..c556507 100644
--- a/.github/dependabot.yml
+++ b/.github/dependabot.yml
@@ -5,3 +5,9 @@ updates:
   schedule:
     interval: daily
   open-pull-requests-limit: 10
+
+- package-ecosystem: github-actions
+  directory: /
+  schedule:
+    interval: daily
+  open-pull-requests-limit: 10
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 5860558..8a8ad5d 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -84,6 +84,7 @@ jobs:
     needs:
       - test
       - lint
+      - check-feature-flags
       - publish-check
     runs-on: ubuntu-latest
     steps:
@@ -109,3 +110,27 @@ jobs:
         with:
           command: publish
           args: --manifest-path lychee-bin/Cargo.toml
+
+  check-feature-flags:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v3
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: Swatinem/rust-cache@v2
+      - name: Check that rustls-tls feature doesn't depend on OpenSSL
+        run: test -z "$( cargo tree --package lychee --no-default-features --features rustls-tls --prefix none | sed -n '/^openssl-sys /p' )"
+      - name: Run cargo check with default features
+        uses: actions-rs/cargo@v1
+        with:
+          command: check
+          args: --workspace --all-targets
+      - name: Run cargo check with all features
+        uses: actions-rs/cargo@v1
+        with:
+          command: check
+          args: --workspace --all-targets --all-features
+      - name: Run cargo check with rustls-tls feature
+        uses: actions-rs/cargo@v1
+        with:
+          command: check
+          args: --workspace --all-targets --no-default-features --features rustls-tls
diff --git a/.github/workflows/docker.yml b/.github/workflows/docker.yml
index 2ed2518..32936a1 100644
--- a/.github/workflows/docker.yml
+++ b/.github/workflows/docker.yml
@@ -19,20 +19,21 @@ env:
   IMAGE_NAME: lycheeverse/lychee
   DOCKER_PLATFORMS: linux/amd64,linux/arm64/v8
   DOCKERFILE: Dockerfile-CI.Dockerfile
+  DOCKERFILE_ALPINE: Dockerfile-CI.alpine.Dockerfile
 
 jobs:
   build:
     runs-on: ubuntu-latest
     if: github.repository_owner == 'lycheeverse' &&
-        github.actor != 'dependabot[bot]' && 
+        github.actor != 'dependabot[bot]' &&
         ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login )
     steps:
       - name: Checkout
         uses: actions/checkout@v3
 
-      - name: Docker meta
+      - name: Docker meta (debian)
         id: meta
-        uses: docker/metadata-action@v3
+        uses: docker/metadata-action@v4
         with:
           # list of Docker images to use as base name for tags
           images: |
@@ -49,6 +50,28 @@ jobs:
             # set latest tag for default branch
             type=raw,value=latest,enable={{is_default_branch}}
 
+      - name: Docker meta (alpine)
+        id: meta-alpine
+        uses: docker/metadata-action@v4
+        with:
+          # A global suffix for each generated tag
+          flavor: |
+            suffix=-alpine
+          # list of Docker images to use as base name for tags
+          images: |
+            ${{ env.IMAGE_NAME }}
+          # generate Docker tags based on the following events/attributes
+          tags: |
+            type=schedule
+            type=ref,event=branch
+            type=ref,event=pr
+            type=semver,pattern={{version}}
+            type=semver,pattern={{major}}.{{minor}}
+            type=semver,pattern={{major}}
+            type=sha
+            # set latest tag for default branch
+            type=raw,value=latest,enable={{is_default_branch}}
+
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v2
 
@@ -61,8 +84,8 @@ jobs:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}
 
-      - name: Push Image
-        uses: docker/build-push-action@v3
+      - name: Push Image (debian)
+        uses: docker/build-push-action@v4
         with:
           context: .
           file: ${{ env.DOCKERFILE }}
@@ -71,6 +94,16 @@ jobs:
           tags: ${{ steps.meta.outputs.tags }}
           labels: ${{ steps.meta.outputs.labels }}
 
+      - name: Push Image (alpine)
+        uses: docker/build-push-action@v4
+        with:
+          context: .
+          file: ${{ env.DOCKERFILE_ALPINE }}
+          platforms: ${{ env.DOCKER_PLATFORMS }}
+          push: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
+          tags: ${{ steps.meta-alpine.outputs.tags }}
+          labels: ${{ steps.meta-alpine.outputs.labels }}
+
       - name: Update DockerHub description
         uses: peter-evans/dockerhub-description@v3
         with:
diff --git a/.github/workflows/links.yml b/.github/workflows/links.yml
index 1a493bc..ec6d633 100644
--- a/.github/workflows/links.yml
+++ b/.github/workflows/links.yml
@@ -18,7 +18,7 @@ jobs:
           args: --verbose --no-progress --exclude example.com -- README.md
 
       - name: Create Issue From File
-        if: github.repository_owner == 'lycheeverse'
+        if: github.repository_owner == 'lycheeverse' && env.lychee_exit_code != 0
         uses: peter-evans/create-issue-from-file@v4
         with:
           title: Link Checker Report
diff --git a/.github/workflows/nightly.yml b/.github/workflows/nightly.yml
new file mode 100644
index 0000000..de7eecd
--- /dev/null
+++ b/.github/workflows/nightly.yml
@@ -0,0 +1,37 @@
+name: Nightly
+on:
+  schedule:
+    - cron: '45 8 * * *'
+  workflow_dispatch:
+    inputs:
+      tag_name:
+        description: 'Tag name to trigger the release'
+        required: false
+        default: 'nightly'
+
+jobs:
+  trigger:
+    runs-on: ubuntu-latest
+    env:
+      GITHUB_TOKEN: ${{ secrets.NIGHTLY_BUILD_TOKEN }}
+    permissions:
+      contents: write
+    steps:
+      - uses: actions/checkout@v3
+        with:
+          fetch-depth: 0
+      - if: ${{ github.event_name == 'workflow_dispatch' }}
+        run: |
+          gh release delete ${{ github.event.inputs.tag_name }} --yes --cleanup-tag || true
+          git tag -d ${{ github.event.inputs.tag_name }} || true
+          gh release create ${{ github.event.inputs.tag_name }} --title ${{ github.event.inputs.tag_name }} --generate-notes --prerelease
+
+      - if: ${{ github.event_name == 'schedule' }}
+        run: |
+          if [[ -z $(git tag -l nightly) ]]; then
+            gh release create nightly --title nightly --generate-notes --prerelease
+          elif [[ $(git diff nightly --name-only -B -M -C) ]]; then
+            gh release delete nightly --yes --cleanup-tag || true
+            git tag -d nightly || true
+            gh release create nightly --title nightly --generate-notes --prerelease
+          fi
diff --git a/.github/workflows/toc-generator.yml b/.github/workflows/toc-generator.yml
new file mode 100644
index 0000000..9e61e45
--- /dev/null
+++ b/.github/workflows/toc-generator.yml
@@ -0,0 +1,22 @@
+name: Update Table of Contents
+
+on:
+  push:
+    branches:
+      - master
+
+jobs:
+  update-toc:
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v3
+
+      - name: Generate Table of Contents
+        uses: technote-space/toc-generator@v4
+        with:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+          TARGET_PATHS: README.md
+          TOC_TITLE: "## Table of Contents"
+          MAX_HEADER_LEVEL: 2
diff --git a/.gitignore b/.gitignore
index d112db0..d222b54 100644
--- a/.gitignore
+++ b/.gitignore
@@ -21,3 +21,6 @@ Cargo.lock
 
 # Config smoketest report file
 .config.dummy.report.md
+
+# Other
+cookies.json
diff --git a/Cargo.lock b/Cargo.lock
index 18c75fa..0daf7f2 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -4,9 +4,9 @@ version = 3
 
 [[package]]
 name = "addr2line"
-version = "0.19.0"
+version = "0.20.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97"
+checksum = "f4fa78e18c64fce05e902adecd7a5eed15a5e0a3439f7b0e169f0252214865e3"
 dependencies = [
  "gimli",
 ]
@@ -19,13 +19,19 @@ checksum = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"
 
 [[package]]
 name = "aho-corasick"
-version = "1.0.1"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "67fc08ce920c31afb70f013dcce1bfc3a3195de6a228474e45e1f145b36f8d04"
+checksum = "6748e8def348ed4d14996fa801f4122cd763fff530258cdc03f64b25f89d3a5a"
 dependencies = [
  "memchr",
 ]
 
+[[package]]
+name = "android-tzdata"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"
+
 [[package]]
 name = "android_system_properties"
 version = "0.1.5"
@@ -41,23 +47,66 @@ version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4b46cbb362ab8752921c97e041f5e366ee6297bd428a31275b9fcf1e380f7299"
 
+[[package]]
+name = "anstream"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163"
+dependencies = [
+ "anstyle",
+ "anstyle-parse",
+ "anstyle-query",
+ "anstyle-wincon",
+ "colorchoice",
+ "is-terminal",
+ "utf8parse",
+]
+
 [[package]]
 name = "anstyle"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd"
+
+[[package]]
+name = "anstyle-parse"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333"
+dependencies = [
+ "utf8parse",
+]
+
+[[package]]
+name = "anstyle-query"
 version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "41ed9a86bf92ae6580e0a31281f65a1b1d867c0cc68d5346e2ae128dddfa6a7d"
+checksum = "5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b"
+dependencies = [
+ "windows-sys 0.48.0",
+]
+
+[[package]]
+name = "anstyle-wincon"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c677ab05e09154296dd37acecd46420c17b9713e8366facafa8fc0885167cf4c"
+dependencies = [
+ "anstyle",
+ "windows-sys 0.48.0",
+]
 
 [[package]]
 name = "anyhow"
-version = "1.0.71"
+version = "1.0.75"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8"
+checksum = "a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6"
 
 [[package]]
 name = "arc-swap"
-version = "1.5.1"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "983cd8b9d4b02a6dc6ffa557262eb5858a27a0038ffffe21a0f133eaa819a164"
+checksum = "bddcadddf5e9015d310179a59bb28c4d4b9920ad0f11e8e14dbadf654890c9a6"
 
 [[package]]
 name = "ascii_utils"
@@ -77,9 +126,9 @@ dependencies = [
 
 [[package]]
 name = "assert_cmd"
-version = "2.0.11"
+version = "2.0.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "86d6b683edf8d1119fe420a94f8a7e389239666aa72e65495d91c00462510151"
+checksum = "88903cb14723e4d4003335bb7f8a14f27691649105346a0f0957466c096adfe6"
 dependencies = [
  "anstyle",
  "bstr",
@@ -92,9 +141,9 @@ dependencies = [
 
 [[package]]
 name = "async-channel"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cf46fee83e5ccffc220104713af3292ff9bc7c64c7de289f66dae8e38d826833"
+checksum = "81953c529336010edd6d8e358f886d9581267795c61b19475b71314bffa46d35"
 dependencies = [
  "concurrent-queue",
  "event-listener",
@@ -103,9 +152,9 @@ dependencies = [
 
 [[package]]
 name = "async-compression"
-version = "0.3.15"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "942c7cd7ae39e91bde4820d74132e9862e62c2f386c3aa90ccf55949f5bad63a"
+checksum = "62b74f44609f0f91493e3082d3734d98497e094777144380ea4db9f9905dd5b6"
 dependencies = [
  "flate2",
  "futures-core",
@@ -116,14 +165,14 @@ dependencies = [
 
 [[package]]
 name = "async-executor"
-version = "1.5.0"
+version = "1.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "17adb73da160dfb475c183343c8cccd80721ea5a605d3eb57125f0a7b7a92d0b"
+checksum = "6fa3dc5f2a8564f07759c008b9109dc0d39de92a88d5588b8a5036d286383afb"
 dependencies = [
  "async-lock",
  "async-task",
  "concurrent-queue",
- "fastrand",
+ "fastrand 1.9.0",
  "futures-lite",
  "slab",
 ]
@@ -145,32 +194,31 @@ dependencies = [
 
 [[package]]
 name = "async-io"
-version = "1.12.0"
+version = "1.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c374dda1ed3e7d8f0d9ba58715f924862c63eae6849c92d3a18e7fbde9e2794"
+checksum = "0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af"
 dependencies = [
  "async-lock",
  "autocfg",
+ "cfg-if",
  "concurrent-queue",
  "futures-lite",
- "libc",
  "log",
  "parking",
  "polling",
+ "rustix 0.37.23",
  "slab",
- "socket2",
+ "socket2 0.4.9",
  "waker-fn",
- "windows-sys 0.42.0",
 ]
 
 [[package]]
 name = "async-lock"
-version = "2.6.0"
+version = "2.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c8101efe8695a6c17e02911402145357e718ac92d3ff88ae8419e84b1707b685"
+checksum = "287272293e9d8c41773cec55e365490fe034813a2f172f502d6ddcf75b2f582b"
 dependencies = [
  "event-listener",
- "futures-lite",
 ]
 
 [[package]]
@@ -187,9 +235,9 @@ dependencies = [
 
 [[package]]
 name = "async-process"
-version = "1.6.0"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6381ead98388605d0d9ff86371043b5aa922a3905824244de40dc263a14fcba4"
+checksum = "7a9d28b1d97e08915212e2e45310d47854eafa69600756fc735fb788f75199c9"
 dependencies = [
  "async-io",
  "async-lock",
@@ -198,20 +246,20 @@ dependencies = [
  "cfg-if",
  "event-listener",
  "futures-lite",
- "libc",
+ "rustix 0.37.23",
  "signal-hook",
- "windows-sys 0.42.0",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "async-recursion"
-version = "1.0.0"
+version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2cda8f4bcc10624c4e85bc66b3f452cca98cfa5ca002dc83a16aad2367641bea"
+checksum = "0e97ce7de6cf12de5d7226c73f5ba9811622f4db3a5b91b55c53e987e5f91cba"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
@@ -276,7 +324,7 @@ dependencies = [
  "futures-io",
  "futures-util",
  "pin-utils",
- "socket2",
+ "socket2 0.4.9",
  "trust-dns-resolver 0.21.2",
 ]
 
@@ -299,48 +347,31 @@ checksum = "16e62a023e7c117e27523144c5d2459f4397fcc3cab0085af8e2224f643a0193"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.3",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "async-task"
-version = "4.3.0"
+version = "4.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a40729d2133846d9ed0ea60a8b9541bccddab49cd30f0715a1da672fe9a2524"
+checksum = "ecc7ab41815b3c653ccd2978ec3255c81349336702dfdf62ee6f7069b12a3aae"
 
 [[package]]
 name = "async-trait"
-version = "0.1.60"
+version = "0.1.73"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "677d1d8ab452a3936018a687b20e6f7cf5363d713b732b8884001317b0e48aa3"
+checksum = "bc00ceb34980c03614e35a3a4e218276a0a824e911d07651cd0d858a51e8c0f0"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
-[[package]]
-name = "async_once"
-version = "0.2.6"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2ce4f10ea3abcd6617873bae9f91d1c5332b4a778bd9ce34d0cd517474c1de82"
-
 [[package]]
 name = "atomic-waker"
-version = "1.0.0"
+version = "1.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "065374052e7df7ee4047b1160cca5e1467a12351a40b3da123c870ba0b8eda2a"
-
-[[package]]
-name = "atty"
-version = "0.2.14"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"
-dependencies = [
- "hermit-abi 0.1.19",
- "libc",
- "winapi",
-]
+checksum = "1181e1e0d1fce796a03db1ae795d67167da795f9cf4a39c37589e85ef57f26d3"
 
 [[package]]
 name = "autocfg"
@@ -350,9 +381,9 @@ checksum = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"
 
 [[package]]
 name = "backtrace"
-version = "0.3.67"
+version = "0.3.68"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "233d376d6d185f2a3093e58f283f60f880315b6c60075b01f36b3b85154564ca"
+checksum = "4319208da049c43661739c5fade2ba182f09d1dc2299b32298d3a31692b17e12"
 dependencies = [
  "addr2line",
  "cc",
@@ -371,9 +402,9 @@ checksum = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"
 
 [[package]]
 name = "base64"
-version = "0.21.0"
+version = "0.21.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a4a4ddaa51a5bc52a6948f74c06d20aaaddb71924eab79b8c97a8c556e942d6a"
+checksum = "604178f6c5c21f02dc555784810edfb88d34ac2c73b2eae109655649ee73ce3d"
 
 [[package]]
 name = "benches"
@@ -391,42 +422,42 @@ checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
 [[package]]
 name = "bitflags"
-version = "2.0.2"
+version = "2.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "487f1e0fcbe47deb8b0574e646def1c903389d95241dd1bbcc6ce4a715dfc0c1"
+checksum = "b4682ae6287fcf752ecaabbfcc7b6f9b72aa33933dc23a554d853aea8eea8635"
 
 [[package]]
 name = "block-buffer"
-version = "0.10.3"
+version = "0.10.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "69cce20737498f97b993470a6e536b8523f0af7892a4f928cceb1ac5e52ebe7e"
+checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
 dependencies = [
  "generic-array",
 ]
 
 [[package]]
 name = "blocking"
-version = "1.3.0"
+version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c67b173a56acffd6d2326fb7ab938ba0b00a71480e14902b2591c87bc5741e8"
+checksum = "77231a1c8f801696fc0123ec6150ce92cffb8e164a02afb9c8ddee0e9b65ad65"
 dependencies = [
  "async-channel",
  "async-lock",
  "async-task",
  "atomic-waker",
- "fastrand",
+ "fastrand 1.9.0",
  "futures-lite",
+ "log",
 ]
 
 [[package]]
 name = "bstr"
-version = "1.1.0"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b45ea9b00a7b3f2988e9a65ad3917e62123c38dba709b666506207be96d1790b"
+checksum = "6798148dccfbff0fae41c7574d2fa8f1ef3492fba0face179de5d8d447d67b05"
 dependencies = [
  "memchr",
- "once_cell",
- "regex-automata",
+ "regex-automata 0.3.6",
  "serde",
 ]
 
@@ -449,9 +480,9 @@ dependencies = [
 
 [[package]]
 name = "bumpalo"
-version = "3.11.1"
+version = "3.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba"
+checksum = "a3e2c3daef883ecc1b5d58c15adae93470a91d425f3532ba1695849656af3fc1"
 
 [[package]]
 name = "by_address"
@@ -467,24 +498,22 @@ checksum = "2c676a478f63e9fa2dd5368a42f28bba0d6c560b775f38583c8bbaa7fcd67c9c"
 
 [[package]]
 name = "bytes"
-version = "1.1.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8"
+checksum = "89b2fd2a0dcf38d7971e2194b6b6eebab45ae01067456a7fd93d5547a61b70be"
 
 [[package]]
 name = "cached"
-version = "0.43.0"
+version = "0.44.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bc2fafddf188d13788e7099295a59b99e99b2148ab2195cae454e754cc099925"
+checksum = "b195e4fbc4b6862bbd065b991a34750399c119797efff72492f28a5864de8700"
 dependencies = [
  "async-trait",
- "async_once",
  "cached_proc_macro",
  "cached_proc_macro_types",
  "futures",
- "hashbrown 0.13.1",
+ "hashbrown 0.13.2",
  "instant",
- "lazy_static",
  "once_cell",
  "thiserror",
  "tokio",
@@ -492,15 +521,15 @@ dependencies = [
 
 [[package]]
 name = "cached_proc_macro"
-version = "0.16.0"
+version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e10ca87c81aaa3a949dbbe2b5e6c2c45dbc94ba4897e45ea31ff9ec5087be3dc"
+checksum = "b48814962d2fd604c50d2b9433c2a41a0ab567779ee2c02f7fba6eca1221f082"
 dependencies = [
  "cached_proc_macro_types",
- "darling",
+ "darling 0.14.4",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -517,9 +546,12 @@ checksum = "37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5"
 
 [[package]]
 name = "cc"
-version = "1.0.78"
+version = "1.0.82"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d"
+checksum = "305fe645edc1442a0fa8b6726ba61d422798d37a52e12eaecf4b022ebbb88f01"
+dependencies = [
+ "libc",
+]
 
 [[package]]
 name = "cfg-if"
@@ -551,12 +583,12 @@ dependencies = [
 
 [[package]]
 name = "chrono"
-version = "0.4.23"
+version = "0.4.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16b0a3d9ed01224b22057780a37bb8c5dbfe1be8ba48678e7bf57ec4b385411f"
+checksum = "ec837a71355b28f6556dbd569b37b3f363091c0bd4b2e735674521b4c5fd9bc5"
 dependencies = [
+ "android-tzdata",
  "iana-time-zone",
- "num-integer",
  "num-traits",
  "serde",
  "winapi",
@@ -564,9 +596,9 @@ dependencies = [
 
 [[package]]
 name = "ciborium"
-version = "0.2.0"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b0c137568cc60b904a7724001b35ce2630fd00d5d84805fbb608ab89509d788f"
+checksum = "effd91f6c78e5a4ace8a5d3c0b6bfaec9e2baaef55f3efc00e45fb2e477ee926"
 dependencies = [
  "ciborium-io",
  "ciborium-ll",
@@ -575,15 +607,15 @@ dependencies = [
 
 [[package]]
 name = "ciborium-io"
-version = "0.2.0"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "346de753af073cc87b52b2083a506b38ac176a44cfb05497b622e27be899b369"
+checksum = "cdf919175532b369853f5d5e20b26b43112613fd6fe7aee757e35f7a44642656"
 
 [[package]]
 name = "ciborium-ll"
-version = "0.2.0"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "213030a2b5a4e0c0892b6652260cf6ccac84827b83a85a534e178e3906c4cf1b"
+checksum = "defaa24ecc093c77630e6c15e17c51f5e187bf35ee514f4e2d67baaa96dae22b"
 dependencies = [
  "ciborium-io",
  "half",
@@ -591,61 +623,44 @@ dependencies = [
 
 [[package]]
 name = "clap"
-version = "3.2.23"
+version = "4.3.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "71655c45cb9845d3270c9d6df84ebe72b4dad3c2ba3f7023ad47c144e4e473a5"
+checksum = "03aef18ddf7d879c15ce20f04826ef8418101c7e528014c3eeea13321047dca3"
 dependencies = [
- "bitflags 1.3.2",
- "clap_lex 0.2.4",
- "indexmap",
- "textwrap",
+ "clap_builder",
+ "clap_derive",
+ "once_cell",
 ]
 
 [[package]]
-name = "clap"
-version = "4.1.11"
+name = "clap_builder"
+version = "4.3.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "42dfd32784433290c51d92c438bb72ea5063797fc3cc9a21a8c4346bebbb2098"
+checksum = "f8ce6fffb678c9b80a70b6b6de0aad31df727623a70fd9a842c30cd573e2fa98"
 dependencies = [
- "bitflags 2.0.2",
- "clap_derive",
- "clap_lex 0.3.0",
- "is-terminal",
- "once_cell",
+ "anstream",
+ "anstyle",
+ "clap_lex",
  "strsim",
- "termcolor",
 ]
 
 [[package]]
 name = "clap_derive"
-version = "4.1.9"
+version = "4.3.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fddf67631444a3a3e3e5ac51c36a5e01335302de677bd78759eaa90ab1f46644"
+checksum = "54a9bb5758fc5dfe728d1019941681eccaf0cf8a4189b692a0ee2f2ecf90a050"
 dependencies = [
  "heck",
- "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "clap_lex"
-version = "0.2.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2850f2f5a82cbf437dd5af4d49848fbdfc27c157c3d010345776f952765261c5"
-dependencies = [
- "os_str_bytes",
-]
-
-[[package]]
-name = "clap_lex"
-version = "0.3.0"
+version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0d4198f73e42b4936b35b5bb248d81d2b595ecb170da0bac7655c54eedfa8da8"
-dependencies = [
- "os_str_bytes",
-]
+checksum = "2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b"
 
 [[package]]
 name = "client_pool"
@@ -657,16 +672,6 @@ dependencies = [
  "tokio-stream",
 ]
 
-[[package]]
-name = "codespan-reporting"
-version = "0.11.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"
-dependencies = [
- "termcolor",
- "unicode-width",
-]
-
 [[package]]
 name = "collect_links"
 version = "0.1.0"
@@ -679,48 +684,110 @@ dependencies = [
  "tokio-stream",
 ]
 
+[[package]]
+name = "colorchoice"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7"
+
 [[package]]
 name = "concurrent-queue"
-version = "2.0.0"
+version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bd7bef69dc86e3c610e4e7aed41035e2a7ed12e72dd7530f61327a6579a4390b"
+checksum = "62ec6771ecfa0762d24683ee5a32ad78487a3d3afdc0fb8cae19d2c5deb50b7c"
 dependencies = [
  "crossbeam-utils",
 ]
 
 [[package]]
 name = "console"
-version = "0.15.5"
+version = "0.15.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3d79fbe8970a77e3e34151cc13d3b3e248aa0faaecb9f6091fa07ebefe5ad60"
+checksum = "c926e00cc70edefdc64d3a5ff31cc65bb97a3460097762bd23afb4d8145fccf8"
 dependencies = [
  "encode_unicode",
  "lazy_static",
  "libc",
  "unicode-width",
- "windows-sys 0.42.0",
+ "windows-sys 0.45.0",
 ]
 
 [[package]]
 name = "const_format"
-version = "0.2.30"
+version = "0.2.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7309d9b4d3d2c0641e018d449232f2e28f1b22933c137f157d3dbc14228b8c0e"
+checksum = "c990efc7a285731f9a4378d81aff2f0e85a2c8781a05ef0f8baa8dac54d0ff48"
 dependencies = [
  "const_format_proc_macros",
 ]
 
 [[package]]
 name = "const_format_proc_macros"
-version = "0.2.29"
+version = "0.2.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d897f47bf7270cf70d370f8f98c1abb6d2d4cf60a6845d30e05bfb90c6568650"
+checksum = "e026b6ce194a874cb9cf32cd5772d1ef9767cc8fcb5765948d74f37a9d8b2bf6"
 dependencies = [
  "proc-macro2",
  "quote",
  "unicode-xid",
 ]
 
+[[package]]
+name = "cookie"
+version = "0.16.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e859cd57d0710d9e06c381b550c06e76992472a8c6d527aecd2fc673dcc231fb"
+dependencies = [
+ "percent-encoding",
+ "time",
+ "version_check",
+]
+
+[[package]]
+name = "cookie"
+version = "0.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7efb37c3e1ccb1ff97164ad95ac1606e8ccd35b3fa0a7d99a304c7f4a428cc24"
+dependencies = [
+ "percent-encoding",
+ "time",
+ "version_check",
+]
+
+[[package]]
+name = "cookie_store"
+version = "0.16.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d606d0fba62e13cf04db20536c05cb7f13673c161cb47a47a82b9b9e7d3f1daa"
+dependencies = [
+ "cookie 0.16.2",
+ "idna 0.2.3",
+ "log",
+ "publicsuffix",
+ "serde",
+ "serde_derive",
+ "serde_json",
+ "time",
+ "url",
+]
+
+[[package]]
+name = "cookie_store"
+version = "0.20.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "387461abbc748185c3a6e1673d826918b450b87ff22639429c694619a83b6cf6"
+dependencies = [
+ "cookie 0.17.0",
+ "idna 0.3.0",
+ "log",
+ "publicsuffix",
+ "serde",
+ "serde_derive",
+ "serde_json",
+ "time",
+ "url",
+]
+
 [[package]]
 name = "core-foundation"
 version = "0.9.3"
@@ -733,15 +800,15 @@ dependencies = [
 
 [[package]]
 name = "core-foundation-sys"
-version = "0.8.3"
+version = "0.8.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc"
+checksum = "e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa"
 
 [[package]]
 name = "cpufeatures"
-version = "0.2.5"
+version = "0.2.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28d997bd5e24a5928dd43e46dc529867e207907fe0b239c3477d924f7f2ca320"
+checksum = "a17b76ff3a4162b0b27f354a0c87015ddad39d35f9c0c36607a3bdd175dde1f1"
 dependencies = [
  "libc",
 ]
@@ -757,15 +824,15 @@ dependencies = [
 
 [[package]]
 name = "criterion"
-version = "0.4.0"
-source = "git+https://github.com/bheisler/criterion.rs#2f5360737807cbe90d149db6199783236f0ef634"
+version = "0.5.1"
+source = "git+https://github.com/bheisler/criterion.rs#c0461a6a7f42f86e8d6533ab082babe84e5c13b0"
 dependencies = [
  "anes",
- "atty",
  "cast",
  "ciborium",
- "clap 3.2.23",
+ "clap",
  "criterion-plot",
+ "is-terminal",
  "itertools",
  "num-traits",
  "once_cell",
@@ -783,7 +850,7 @@ dependencies = [
 [[package]]
 name = "criterion-plot"
 version = "0.5.0"
-source = "git+https://github.com/bheisler/criterion.rs#2f5360737807cbe90d149db6199783236f0ef634"
+source = "git+https://github.com/bheisler/criterion.rs#c0461a6a7f42f86e8d6533ab082babe84e5c13b0"
 dependencies = [
  "cast",
  "itertools",
@@ -805,9 +872,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-channel"
-version = "0.5.6"
+version = "0.5.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521"
+checksum = "a33c2bf77f2df06183c3aa30d1e96c0695a313d4f9c453cc3762a6db39f99200"
 dependencies = [
  "cfg-if",
  "crossbeam-utils",
@@ -815,9 +882,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-deque"
-version = "0.8.2"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "715e8152b692bba2d374b53d4875445368fdf21a94751410af607a5ac677d1fc"
+checksum = "ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef"
 dependencies = [
  "cfg-if",
  "crossbeam-epoch",
@@ -826,9 +893,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-epoch"
-version = "0.9.13"
+version = "0.9.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "01a9af1f4c2ef74bb8aa1f7e19706bc72d03598c8a570bb5de72243c7a9d9d5a"
+checksum = "ae211234986c545741a7dc064309f67ee1e5ad243d0e48335adc0484d960bcc7"
 dependencies = [
  "autocfg",
  "cfg-if",
@@ -849,9 +916,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.8.14"
+version = "0.8.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4fb766fa798726286dbbb842f174001dab8abc7b627a1dd86e0b7222a95d929f"
+checksum = "5a22b2d63d4d1dc0b7f1b6b2747dd0088008a9be28b6ddf0b1e7d335e3037294"
 dependencies = [
  "cfg-if",
 ]
@@ -868,9 +935,9 @@ dependencies = [
 
 [[package]]
 name = "csv"
-version = "1.2.1"
+version = "1.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0b015497079b9a9d69c02ad25de6c0a6edef051ea6360a327d0bd05802ef64ad"
+checksum = "626ae34994d3d8d668f4269922248239db4ae42d538b14c398b74a52208e8086"
 dependencies = [
  "csv-core",
  "itoa",
@@ -888,102 +955,83 @@ dependencies = [
 ]
 
 [[package]]
-name = "ctor"
-version = "0.1.26"
+name = "darling"
+version = "0.14.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6d2301688392eb071b0bf1a37be05c469d3cc4dbbd95df672fe28ab021e6a096"
+checksum = "7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850"
 dependencies = [
- "quote",
- "syn 1.0.107",
+ "darling_core 0.14.4",
+ "darling_macro 0.14.4",
 ]
 
 [[package]]
-name = "cxx"
-version = "1.0.85"
+name = "darling"
+version = "0.20.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5add3fc1717409d029b20c5b6903fc0c0b02fa6741d820054f4a2efa5e5816fd"
+checksum = "0209d94da627ab5605dcccf08bb18afa5009cfbef48d8a8b7d7bdbc79be25c5e"
 dependencies = [
- "cc",
- "cxxbridge-flags",
- "cxxbridge-macro",
- "link-cplusplus",
+ "darling_core 0.20.3",
+ "darling_macro 0.20.3",
 ]
 
 [[package]]
-name = "cxx-build"
-version = "1.0.85"
+name = "darling_core"
+version = "0.14.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b4c87959ba14bc6fbc61df77c3fcfe180fc32b93538c4f1031dd802ccb5f2ff0"
+checksum = "109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0"
 dependencies = [
- "cc",
- "codespan-reporting",
- "once_cell",
+ "fnv",
+ "ident_case",
  "proc-macro2",
  "quote",
- "scratch",
- "syn 1.0.107",
+ "strsim",
+ "syn 1.0.109",
 ]
 
 [[package]]
-name = "cxxbridge-flags"
-version = "1.0.85"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "69a3e162fde4e594ed2b07d0f83c6c67b745e7f28ce58c6df5e6b6bef99dfb59"
-
-[[package]]
-name = "cxxbridge-macro"
-version = "1.0.85"
+name = "darling_core"
+version = "0.20.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3e7e2adeb6a0d4a282e581096b06e1791532b7d576dcde5ccd9382acf55db8e6"
+checksum = "177e3443818124b357d8e76f53be906d60937f0d3a90773a664fa63fa253e621"
 dependencies = [
+ "fnv",
+ "ident_case",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
-]
-
-[[package]]
-name = "darling"
-version = "0.14.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b0dd3cd20dc6b5a876612a6e5accfe7f3dd883db6d07acfbf14c128f61550dfa"
-dependencies = [
- "darling_core",
- "darling_macro",
+ "strsim",
+ "syn 2.0.28",
 ]
 
 [[package]]
-name = "darling_core"
-version = "0.14.2"
+name = "darling_macro"
+version = "0.14.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a784d2ccaf7c98501746bf0be29b2022ba41fd62a2e622af997a03e9f972859f"
+checksum = "a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e"
 dependencies = [
- "fnv",
- "ident_case",
- "proc-macro2",
+ "darling_core 0.14.4",
  "quote",
- "strsim",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
 name = "darling_macro"
-version = "0.14.2"
+version = "0.20.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7618812407e9402654622dd402b0a89dff9ba93badd6540781526117b92aab7e"
+checksum = "836a9bbc7ad63342d6d6e7b815ccab164bc77a2d95d84bc3117a8c0d5c98e2d5"
 dependencies = [
- "darling_core",
+ "darling_core 0.20.3",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "dashmap"
-version = "5.4.0"
+version = "5.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "907076dfda823b0b36d2a1bb5f90c96660a5bbcd7729e10727f07858f22c4edc"
+checksum = "6943ae99c34386c84a470c499d3414f66502a41340aa895406e0d2e4a207b91d"
 dependencies = [
  "cfg-if",
- "hashbrown 0.12.3",
+ "hashbrown 0.14.0",
  "lock_api",
  "once_cell",
  "parking_lot_core",
@@ -992,9 +1040,9 @@ dependencies = [
 
 [[package]]
 name = "data-encoding"
-version = "2.3.3"
+version = "2.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "23d8666cb01533c39dde32bcbab8e227b4ed6679b2c925eba05feabea39508fb"
+checksum = "c2e66c9d817f1720209181c316d28635c050fa304f9c79e47a520882661b7308"
 
 [[package]]
 name = "deadpool"
@@ -1015,6 +1063,15 @@ version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "eaa37046cc0f6c3cc6090fbdbf73ef0b8ef4cfcc37f6befc0020f63e8cf121e1"
 
+[[package]]
+name = "deranged"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7684a49fb1af197853ef7b2ee694bc1f5b4179556f1e5710e1760c5db6f5e929"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "derivative"
 version = "2.2.0"
@@ -1023,7 +1080,7 @@ checksum = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -1040,9 +1097,9 @@ checksum = "6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8"
 
 [[package]]
 name = "digest"
-version = "0.10.6"
+version = "0.10.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8168378f4e5023e7218c89c891c0fd8ecdb5e5e4f18cb78f38cf245dd021e76f"
+checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"
 dependencies = [
  "block-buffer",
  "crypto-common",
@@ -1050,22 +1107,23 @@ dependencies = [
 
 [[package]]
 name = "dirs"
-version = "4.0.0"
+version = "5.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ca3aa72a6f96ea37bbc5aa912f6788242832f75369bdfdadcb0e38423f100059"
+checksum = "44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225"
 dependencies = [
  "dirs-sys",
 ]
 
 [[package]]
 name = "dirs-sys"
-version = "0.3.7"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"
+checksum = "520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c"
 dependencies = [
  "libc",
+ "option-ext",
  "redox_users",
- "winapi",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -1076,9 +1134,9 @@ checksum = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"
 
 [[package]]
 name = "either"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90e5c1c8368803113bf0c9584fc495a58b86dc8a29edbf8fe877d21d9507e797"
+checksum = "a26ae43d7bcc3b814de94796a5e736d4029efb0ee900c12e2d54c993ad1a1e07"
 
 [[package]]
 name = "email_address"
@@ -1097,9 +1155,9 @@ checksum = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"
 
 [[package]]
 name = "encoding_rs"
-version = "0.8.31"
+version = "0.8.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9852635589dc9f9ea1b6fe9f05b50ef208c85c834a562f0c6abb1c475736ec2b"
+checksum = "071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394"
 dependencies = [
  "cfg-if",
 ]
@@ -1113,7 +1171,7 @@ dependencies = [
  "heck",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -1125,7 +1183,7 @@ dependencies = [
  "heck",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -1142,25 +1200,20 @@ dependencies = [
 ]
 
 [[package]]
-name = "errno"
-version = "0.2.8"
+name = "equivalent"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1"
-dependencies = [
- "errno-dragonfly",
- "libc",
- "winapi",
-]
+checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"
 
 [[package]]
 name = "errno"
-version = "0.3.0"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "50d6a0976c999d473fe89ad888d5a284e55366d9dc9038b1ba2aa15128c4afa0"
+checksum = "6b30f669a7961ef1631673d2766cc92f52d64f7ef354d4fe0ddfd30ed52f0f4f"
 dependencies = [
  "errno-dragonfly",
  "libc",
- "windows-sys 0.45.0",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -1189,9 +1242,9 @@ dependencies = [
 
 [[package]]
 name = "fast-socks5"
-version = "0.8.1"
+version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d2687b5a6108f18ba8621e0e618a3be1dcc2768632dad24b7cea1f87975375a9"
+checksum = "961ce1761191c157145a8c9f0c3ceabecd3a729d65c9a8d443674eaee3420f7e"
 dependencies = [
  "anyhow",
  "log",
@@ -1211,18 +1264,24 @@ dependencies = [
 
 [[package]]
 name = "fastrand"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499"
+checksum = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be"
 dependencies = [
  "instant",
 ]
 
+[[package]]
+name = "fastrand"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6999dc1837253364c2ebb0704ba97994bd874e8f195d665c50b7548f6ea92764"
+
 [[package]]
 name = "flate2"
-version = "1.0.25"
+version = "1.0.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a8a2db397cb1c8772f31494cb8917e48cd1e64f0fa7efac59fbd741a0a8ce841"
+checksum = "c6c98ee8095e9d1dcbf2fcc6d95acccb90d1c81db1e44725c6a984b1dbdfb010"
 dependencies = [
  "crc32fast",
  "miniz_oxide",
@@ -1247,7 +1306,7 @@ dependencies = [
  "futures-sink",
  "nanorand",
  "pin-project",
- "spin 0.9.4",
+ "spin 0.9.8",
 ]
 
 [[package]]
@@ -1273,9 +1332,9 @@ checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
 
 [[package]]
 name = "form_urlencoded"
-version = "1.1.0"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a9c384f161156f5260c24a097c56119f9be8c798586aecc13afbcbe7b7e26bf8"
+checksum = "a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652"
 dependencies = [
  "percent-encoding",
 ]
@@ -1292,9 +1351,9 @@ dependencies = [
 
 [[package]]
 name = "futures"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "531ac96c6ff5fd7c62263c5e3c67a603af4fcaee2e1a0ae5565ba3a11e69e549"
+checksum = "23342abe12aba583913b2e62f22225ff9c950774065e4bfb61a19cd9770fec40"
 dependencies = [
  "futures-channel",
  "futures-core",
@@ -1307,9 +1366,9 @@ dependencies = [
 
 [[package]]
 name = "futures-channel"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "164713a5a0dcc3e7b4b1ed7d3b433cabc18025386f9339346e8daf15963cf7ac"
+checksum = "955518d47e09b25bbebc7a18df10b81f0c766eaf4c4f1cccef2fca5f2a4fb5f2"
 dependencies = [
  "futures-core",
  "futures-sink",
@@ -1317,15 +1376,15 @@ dependencies = [
 
 [[package]]
 name = "futures-core"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "86d7a0c1aa76363dac491de0ee99faf6941128376f1cf96f07db7603b7de69dd"
+checksum = "4bca583b7e26f571124fe5b7561d49cb2868d79116cfa0eefce955557c6fee8c"
 
 [[package]]
 name = "futures-executor"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1997dd9df74cdac935c76252744c1ed5794fac083242ea4fe77ef3ed60ba0f83"
+checksum = "ccecee823288125bd88b4d7f565c9e58e41858e47ab72e8ea2d64e93624386e0"
 dependencies = [
  "futures-core",
  "futures-task",
@@ -1334,17 +1393,17 @@ dependencies = [
 
 [[package]]
 name = "futures-io"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "89d422fa3cbe3b40dca574ab087abb5bc98258ea57eea3fd6f1fa7162c778b91"
+checksum = "4fff74096e71ed47f8e023204cfd0aa1289cd54ae5430a9523be060cdb849964"
 
 [[package]]
 name = "futures-lite"
-version = "1.12.0"
+version = "1.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7694489acd39452c77daa48516b894c153f192c3578d5a839b62c58099fcbf48"
+checksum = "49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce"
 dependencies = [
- "fastrand",
+ "fastrand 1.9.0",
  "futures-core",
  "futures-io",
  "memchr",
@@ -1355,26 +1414,26 @@ dependencies = [
 
 [[package]]
 name = "futures-macro"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3eb14ed937631bd8b8b8977f2c198443447a8355b6e3ca599f38c975e5a963b6"
+checksum = "89ca545a94061b6365f2c7355b4b32bd20df3ff95f02da9329b34ccc3bd6ee72"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "futures-sink"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ec93083a4aecafb2a80a885c9de1f0ccae9dbd32c2bb54b0c3a65690e0b8d2f2"
+checksum = "f43be4fe21a13b9781a69afa4985b0f6ee0e1afab2c6f454a8cf30e2b2237b6e"
 
 [[package]]
 name = "futures-task"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fd65540d33b37b16542a0438c12e6aeead10d4ac5d05bd3f805b8f35ab592879"
+checksum = "76d3d132be6c0e6aa1534069c705a74a5997a356c0dc2f86a47765e5617c5b65"
 
 [[package]]
 name = "futures-timer"
@@ -1384,9 +1443,9 @@ checksum = "e64b03909df88034c26dc1547e8970b91f98bdb65165d6a4e9110d94263dbb2c"
 
 [[package]]
 name = "futures-util"
-version = "0.3.27"
+version = "0.3.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3ef6b17e481503ec85211fed8f39d1970f128935ca1f814cd32ac4a6842e84ab"
+checksum = "26b01e40b772d54cf6c6d721c1d1abd0647a0106a12ecaa1c186273392a69533"
 dependencies = [
  "futures-channel",
  "futures-core",
@@ -1402,9 +1461,9 @@ dependencies = [
 
 [[package]]
 name = "generic-array"
-version = "0.14.6"
+version = "0.14.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9"
+checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"
 dependencies = [
  "typenum",
  "version_check",
@@ -1432,9 +1491,9 @@ dependencies = [
 
 [[package]]
 name = "getrandom"
-version = "0.2.8"
+version = "0.2.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31"
+checksum = "be4136b2a15dd319360be1c07d9933517ccf0be8f16bf62a3bee4f0d618df427"
 dependencies = [
  "cfg-if",
  "js-sys",
@@ -1445,9 +1504,9 @@ dependencies = [
 
 [[package]]
 name = "gimli"
-version = "0.27.0"
+version = "0.27.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dec7af912d60cdbd3677c1af9352ebae6fb8394d165568a2234df0fa00f87793"
+checksum = "b6c80984affa11d98d1b88b66ac8853f143217b399d3c74116778ff8fdb4ed2e"
 
 [[package]]
 name = "glob"
@@ -1457,9 +1516,9 @@ checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"
 
 [[package]]
 name = "gloo-timers"
-version = "0.2.5"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "98c4a8d6391675c6b2ee1a6c8d06e8e2d03605c44cec1270675985a4c2a5500b"
+checksum = "9b995a66bb87bebce9a0f4a95aed01daca4872c050bfcb21653361c03bc35e5c"
 dependencies = [
  "futures-channel",
  "futures-core",
@@ -1469,9 +1528,9 @@ dependencies = [
 
 [[package]]
 name = "h2"
-version = "0.3.17"
+version = "0.3.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66b91535aa35fea1523ad1b86cb6b53c28e0ae566ba4a460f4457e936cad7c6f"
+checksum = "97ec8491ebaf99c8eaa73058b045fe58073cd6be7f596ac993ced0b0a0c01049"
 dependencies = [
  "bytes",
  "fnv",
@@ -1479,7 +1538,7 @@ dependencies = [
  "futures-sink",
  "futures-util",
  "http",
- "indexmap",
+ "indexmap 1.9.3",
  "slab",
  "tokio",
  "tokio-util",
@@ -1500,9 +1559,15 @@ checksum = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"
 
 [[package]]
 name = "hashbrown"
-version = "0.13.1"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e"
+
+[[package]]
+name = "hashbrown"
+version = "0.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "33ff8ae62cd3a9102e5637afc8452c55acf3844001bd5374e0b0bd7b6616c038"
+checksum = "2c6201b9ff9fd90a5a3bac2e56a830d0caa509576f0e503818ee82c181b3437a"
 
 [[package]]
 name = "headers"
@@ -1531,27 +1596,21 @@ dependencies = [
 
 [[package]]
 name = "heck"
-version = "0.4.0"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9"
+checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
 
 [[package]]
 name = "hermit-abi"
-version = "0.1.19"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"
-dependencies = [
- "libc",
-]
+checksum = "443144c8cdadd93ebf52ddb4056d257f5b52c04d3c804e657d19eb73fc33668b"
 
 [[package]]
-name = "hermit-abi"
-version = "0.2.6"
+name = "hex"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7"
-dependencies = [
- "libc",
-]
+checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"
 
 [[package]]
 name = "hostname"
@@ -1575,14 +1634,14 @@ dependencies = [
  "markup5ever",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
 name = "html5gum"
-version = "0.5.2"
+version = "0.5.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3404cc217cc3e11d09c8ac9ccf8b1e540f64477c253d6dc70b5a5074782d934d"
+checksum = "4c4e556171a058ba117bbe88b059fb37b6289023e007d2903ea6dca3a3cbff14"
 dependencies = [
  "jetscii",
 ]
@@ -1611,9 +1670,9 @@ dependencies = [
 
 [[package]]
 name = "http-range-header"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0bfe8eed0a9285ef776bb792479ea3834e8b94e13d615c2f66d03dd50a435a29"
+checksum = "add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f"
 
 [[package]]
 name = "http-types"
@@ -1644,9 +1703,9 @@ checksum = "d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904"
 
 [[package]]
 name = "httpdate"
-version = "1.0.2"
+version = "1.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421"
+checksum = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9"
 
 [[package]]
 name = "humantime"
@@ -1666,9 +1725,9 @@ dependencies = [
 
 [[package]]
 name = "hyper"
-version = "0.14.26"
+version = "0.14.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ab302d72a6f11a3b910431ff93aae7e773078c769f0a3ef15fb9ec692ed147d4"
+checksum = "ffb1cfd654a8219eaef89881fdb3bb3b1cdc5fa75ded05d6933b2b382e395468"
 dependencies = [
  "bytes",
  "futures-channel",
@@ -1681,7 +1740,7 @@ dependencies = [
  "httpdate",
  "itoa",
  "pin-project-lite",
- "socket2",
+ "socket2 0.4.9",
  "tokio",
  "tower-service",
  "tracing",
@@ -1690,10 +1749,11 @@ dependencies = [
 
 [[package]]
 name = "hyper-rustls"
-version = "0.24.0"
+version = "0.24.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0646026eb1b3eea4cd9ba47912ea5ce9cc07713d105b1a14698f4e6433d348b7"
+checksum = "8d78e1e73ec14cf7375674f74d7dde185c8206fd9dea6fb6295e8a98098aaa97"
 dependencies = [
+ "futures-util",
  "http",
  "hyper",
  "log",
@@ -1730,26 +1790,25 @@ dependencies = [
 
 [[package]]
 name = "iana-time-zone"
-version = "0.1.53"
+version = "0.1.57"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64c122667b287044802d6ce17ee2ddf13207ed924c712de9a66a5814d5b64765"
+checksum = "2fad5b825842d2b38bd206f3e81d6957625fd7f0a361e345c30e01a0ae2dd613"
 dependencies = [
  "android_system_properties",
  "core-foundation-sys",
  "iana-time-zone-haiku",
  "js-sys",
  "wasm-bindgen",
- "winapi",
+ "windows",
 ]
 
 [[package]]
 name = "iana-time-zone-haiku"
-version = "0.1.1"
+version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0703ae284fc167426161c2e3f1da3ea71d94b21bedbcc9494e92b28e334e3dca"
+checksum = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"
 dependencies = [
- "cxx",
- "cxx-build",
+ "cc",
 ]
 
 [[package]]
@@ -1779,23 +1838,46 @@ dependencies = [
  "unicode-normalization",
 ]
 
+[[package]]
+name = "idna"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c"
+dependencies = [
+ "unicode-bidi",
+ "unicode-normalization",
+]
+
 [[package]]
 name = "indexmap"
-version = "1.9.2"
+version = "1.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399"
+checksum = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"
 dependencies = [
  "autocfg",
  "hashbrown 0.12.3",
+ "serde",
+]
+
+[[package]]
+name = "indexmap"
+version = "2.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d5477fe2230a79769d8dc68e0eabf5437907c0457a5614a9e8dddb67f65eb65d"
+dependencies = [
+ "equivalent",
+ "hashbrown 0.14.0",
+ "serde",
 ]
 
 [[package]]
 name = "indicatif"
-version = "0.17.3"
+version = "0.17.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cef509aa9bc73864d6756f0d34d35504af3cf0844373afe9b8669a5b8005a729"
+checksum = "0b297dc40733f23a0e52728a58fa9489a5b7638a324932de16b41adc3ef80730"
 dependencies = [
  "console",
+ "instant",
  "number_prefix",
  "portable-atomic",
  "unicode-width",
@@ -1818,12 +1900,13 @@ dependencies = [
 
 [[package]]
 name = "io-lifetimes"
-version = "1.0.3"
+version = "1.0.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "46112a93252b123d31a119a8d1a1ac19deac4fac6e0e8b0df58f0d4e5870e63c"
+checksum = "eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2"
 dependencies = [
+ "hermit-abi",
  "libc",
- "windows-sys 0.42.0",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -1834,32 +1917,31 @@ checksum = "aa2f047c0a98b2f299aa5d6d7088443570faae494e9ae1305e48be000c9e0eb1"
 
 [[package]]
 name = "ipconfig"
-version = "0.3.1"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bd302af1b90f2463a98fa5ad469fc212c8e3175a41c3068601bfa2727591c5be"
+checksum = "b58db92f96b720de98181bbbe63c831e87005ab460c1bf306eb2622b4707997f"
 dependencies = [
- "socket2",
+ "socket2 0.5.3",
  "widestring",
- "winapi",
- "winreg",
+ "windows-sys 0.48.0",
+ "winreg 0.50.0",
 ]
 
 [[package]]
 name = "ipnet"
-version = "2.7.0"
+version = "2.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "11b0d96e660696543b251e58030cf9787df56da39dab19ad60eae7353040917e"
+checksum = "28b29a3cd74f0f4598934efe3aeba42bae0eb4680554128851ebbecb02af14e6"
 
 [[package]]
 name = "is-terminal"
-version = "0.4.1"
+version = "0.4.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "927609f78c2913a6f6ac3c27a4fe87f43e2a35367c0c4b0f8265e8f49a104330"
+checksum = "cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b"
 dependencies = [
- "hermit-abi 0.2.6",
- "io-lifetimes",
- "rustix 0.36.5",
- "windows-sys 0.42.0",
+ "hermit-abi",
+ "rustix 0.38.8",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -1879,9 +1961,9 @@ dependencies = [
 
 [[package]]
 name = "itoa"
-version = "1.0.5"
+version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440"
+checksum = "af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38"
 
 [[package]]
 name = "jetscii"
@@ -1891,20 +1973,20 @@ checksum = "47f142fe24a9c9944451e8349de0a56af5f3e7226dc46f3ed4d4ecc0b85af75e"
 
 [[package]]
 name = "js-sys"
-version = "0.3.60"
+version = "0.3.64"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "49409df3e3bf0856b916e2ceaca09ee28e6871cf7d9ce97a692cacfdb2a25a47"
+checksum = "c5f195fe497f702db0f318b07fdd68edb16955aed830df8363d837542f8f935a"
 dependencies = [
  "wasm-bindgen",
 ]
 
 [[package]]
 name = "jsonwebtoken"
-version = "8.2.0"
+version = "8.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "09f4f04699947111ec1733e71778d763555737579e44b85844cae8e1940a1828"
+checksum = "6971da4d9c3aa03c3d8f3ff0f4155b534aad021292003895a469716b2a230378"
 dependencies = [
- "base64 0.13.1",
+ "base64 0.21.2",
  "pem",
  "ring",
  "serde",
@@ -1939,18 +2021,9 @@ checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
 
 [[package]]
 name = "libc"
-version = "0.2.140"
+version = "0.2.147"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "99227334921fae1a979cf0bfdfcc6b3e5ce376ef57e16fb6fb3ea2ed6095f80c"
-
-[[package]]
-name = "link-cplusplus"
-version = "1.0.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ecd207c9c713c34f95a097a5b029ac2ce6010530c7b49d7fea24d977dede04f5"
-dependencies = [
- "cc",
-]
+checksum = "b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3"
 
 [[package]]
 name = "linked-hash-map"
@@ -1960,30 +2033,30 @@ checksum = "0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f"
 
 [[package]]
 name = "linkify"
-version = "0.9.0"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "96dd5884008358112bc66093362197c7248ece00d46624e2cf71e50029f8cff5"
+checksum = "f1dfa36d52c581e9ec783a7ce2a5e0143da6237be5811a0b3153fedfdbe9f780"
 dependencies = [
  "memchr",
 ]
 
 [[package]]
 name = "linux-raw-sys"
-version = "0.1.4"
+version = "0.3.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4"
+checksum = "ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519"
 
 [[package]]
 name = "linux-raw-sys"
-version = "0.3.0"
+version = "0.4.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cd550e73688e6d578f0ac2119e32b797a327631a42f9433e59d02e139c8df60d"
+checksum = "57bcfdad1b858c2db7c38303a6d2ad4dfaf5eb53dfeb0910128b2c26d6158503"
 
 [[package]]
 name = "lock_api"
-version = "0.4.9"
+version = "0.4.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df"
+checksum = "c1cc9717a20b1bb222f333e6a92fd32f7d8a18ddc5a3191a11af45dcbf4dcd16"
 dependencies = [
  "autocfg",
  "scopeguard",
@@ -1991,11 +2064,10 @@ dependencies = [
 
 [[package]]
 name = "log"
-version = "0.4.17"
+version = "0.4.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e"
+checksum = "b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f"
 dependencies = [
- "cfg-if",
  "value-bag",
 ]
 
@@ -2015,7 +2087,7 @@ dependencies = [
  "anyhow",
  "assert-json-diff",
  "assert_cmd",
- "clap 4.1.11",
+ "clap",
  "console",
  "const_format",
  "csv",
@@ -2036,6 +2108,7 @@ dependencies = [
  "pretty_assertions",
  "regex",
  "reqwest",
+ "reqwest_cookie_store",
  "ring",
  "secrecy",
  "serde",
@@ -2063,13 +2136,13 @@ dependencies = [
  "email_address",
  "futures",
  "glob",
+ "headers",
  "html5ever",
  "html5gum",
  "http",
  "hyper",
  "ip_network",
  "jwalk",
- "lazy_static",
  "linkify",
  "log",
  "octocrab",
@@ -2081,10 +2154,12 @@ dependencies = [
  "pulldown-cmark",
  "regex",
  "reqwest",
+ "reqwest_cookie_store",
  "ring",
  "secrecy",
  "serde",
  "serde_json",
+ "serde_with",
  "shellexpand",
  "tempfile",
  "thiserror",
@@ -2102,9 +2177,9 @@ checksum = "c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4"
 
 [[package]]
 name = "mailchecker"
-version = "5.0.5"
+version = "5.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1fe9dedd4a5942066706bb532daa05c0d1d1bd1f88af77ce672e12955a4aec41"
+checksum = "4c64fa7af9860896bdfe496f323ac278f256006fd248dd7730e37c5faa648b05"
 dependencies = [
  "fast_chemail",
  "once_cell",
@@ -2136,14 +2211,14 @@ version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558"
 dependencies = [
- "regex-automata",
+ "regex-automata 0.1.10",
 ]
 
 [[package]]
 name = "matches"
-version = "0.1.9"
+version = "0.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f"
+checksum = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5"
 
 [[package]]
 name = "memchr"
@@ -2153,18 +2228,18 @@ checksum = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"
 
 [[package]]
 name = "memoffset"
-version = "0.7.1"
+version = "0.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5de893c32cde5f383baa4c04c5d6dbdd735cfd4a794b0debdb2bb1b421da5ff4"
+checksum = "5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c"
 dependencies = [
  "autocfg",
 ]
 
 [[package]]
 name = "mime"
-version = "0.3.16"
+version = "0.3.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d"
+checksum = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a"
 
 [[package]]
 name = "minimal-lexical"
@@ -2174,23 +2249,22 @@ checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
 
 [[package]]
 name = "miniz_oxide"
-version = "0.6.2"
+version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa"
+checksum = "e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7"
 dependencies = [
  "adler",
 ]
 
 [[package]]
 name = "mio"
-version = "0.8.5"
+version = "0.8.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5d732bc30207a6423068df043e3d02e0735b155ad7ce1a6f76fe2baa5b158de"
+checksum = "927a765cd3fc26206e66b296465fa9d3e5ab003e651c1b3c060e7956d96b19d2"
 dependencies = [
  "libc",
- "log",
  "wasi 0.11.0+wasi-snapshot-preview1",
- "windows-sys 0.42.0",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -2199,7 +2273,7 @@ version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6a51313c5820b0b02bd422f4b44776fbf47961755c74ce64afc73bfad10226c3"
 dependencies = [
- "getrandom 0.2.8",
+ "getrandom 0.2.10",
 ]
 
 [[package]]
@@ -2228,9 +2302,9 @@ checksum = "e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54"
 
 [[package]]
 name = "nom"
-version = "7.1.1"
+version = "7.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a8903e5a29a317527874d0402f867152a3d21c908bb0b933e416c65e301d4c36"
+checksum = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"
 dependencies = [
  "memchr",
  "minimal-lexical",
@@ -2265,20 +2339,20 @@ dependencies = [
 
 [[package]]
 name = "num-traits"
-version = "0.2.15"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd"
+checksum = "f30b0abd723be7e2ffca1272140fac1a2f084c77ec3e123c192b66af1ee9e6c2"
 dependencies = [
  "autocfg",
 ]
 
 [[package]]
 name = "num_cpus"
-version = "1.14.0"
+version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f6058e64324c71e02bc2b150e4f3bc8286db6c83092132ffa3f6b1eab0f9def5"
+checksum = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"
 dependencies = [
- "hermit-abi 0.1.19",
+ "hermit-abi",
  "libc",
 ]
 
@@ -2290,22 +2364,22 @@ checksum = "830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3"
 
 [[package]]
 name = "object"
-version = "0.30.0"
+version = "0.31.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "239da7f290cfa979f43f85a8efeee9a8a76d0827c356d37f9d3d7254d6b537fb"
+checksum = "8bda667d9f2b5051b8833f59f3bf748b28ef54f850f4fcb389a252aa383866d1"
 dependencies = [
  "memchr",
 ]
 
 [[package]]
 name = "octocrab"
-version = "0.21.0"
+version = "0.29.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5db170d97e0e88e41faf8ef5277c850d8370c1ef759403c7004a43f2161ce357"
+checksum = "170c527fe1bf1d045e1f69a10dfd9b192327d53728b2c3481cf95b9dc2b42998"
 dependencies = [
  "arc-swap",
  "async-trait",
- "base64 0.21.0",
+ "base64 0.21.2",
  "bytes",
  "cfg-if",
  "chrono",
@@ -2336,9 +2410,9 @@ dependencies = [
 
 [[package]]
 name = "once_cell"
-version = "1.17.1"
+version = "1.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3"
+checksum = "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d"
 
 [[package]]
 name = "oorandom"
@@ -2348,9 +2422,9 @@ checksum = "0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575"
 
 [[package]]
 name = "openssl"
-version = "0.10.44"
+version = "0.10.56"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "29d971fd5722fec23977260f6e81aa67d2f22cadbdc2aa049f1022d9a3be1566"
+checksum = "729b745ad4a5575dd06a3e1af1414bd330ee561c01b3899eb584baeaa8def17e"
 dependencies = [
  "bitflags 1.3.2",
  "cfg-if",
@@ -2363,13 +2437,13 @@ dependencies = [
 
 [[package]]
 name = "openssl-macros"
-version = "0.1.0"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b501e44f11665960c7e7fcf062c7d96a14ade4aa98116c004b2e37b5be7d736c"
+checksum = "a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
@@ -2380,18 +2454,18 @@ checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"
 
 [[package]]
 name = "openssl-src"
-version = "111.24.0+1.1.1s"
+version = "111.27.0+1.1.1v"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3498f259dab01178c6228c6b00dcef0ed2a2d5e20d648c017861227773ea4abd"
+checksum = "06e8f197c82d7511c5b014030c9b1efeda40d7d5f99d23b4ceed3524a5e63f02"
 dependencies = [
  "cc",
 ]
 
 [[package]]
 name = "openssl-sys"
-version = "0.9.87"
+version = "0.9.91"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e17f59264b2809d77ae94f0e1ebabc434773f370d6ca667bd223ea10e06cc7e"
+checksum = "866b5f16f90776b9bb8dc1e1802ac6f0513de3a7a7465867bfbc563dc737faac"
 dependencies = [
  "cc",
  "libc",
@@ -2401,19 +2475,10 @@ dependencies = [
 ]
 
 [[package]]
-name = "os_str_bytes"
-version = "6.4.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9b7820b9daea5457c9f21c69448905d723fbd21136ccf521748f23fd49e723ee"
-
-[[package]]
-name = "output_vt100"
-version = "0.1.3"
+name = "option-ext"
+version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66"
-dependencies = [
- "winapi",
-]
+checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
 
 [[package]]
 name = "pad"
@@ -2426,9 +2491,9 @@ dependencies = [
 
 [[package]]
 name = "papergrid"
-version = "0.9.0"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1fdfe703c51ddc52887ad78fc69cd2ea78d895ffcd6e955c9d03566db8ab5bb1"
+checksum = "a2ccbe15f2b6db62f9a9871642746427e297b0ceb85f9a7f1ee5ff47d184d0c8"
 dependencies = [
  "bytecount",
  "fnv",
@@ -2456,9 +2521,9 @@ dependencies = [
 
 [[package]]
 name = "parking"
-version = "2.0.0"
+version = "2.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "427c3892f9e783d91cc128285287e70a59e206ca452770ece88a76f7a3eddd72"
+checksum = "14f2252c834a40ed9bb5422029649578e63aa341ac401f74e719dd1afda8394e"
 
 [[package]]
 name = "parking_lot"
@@ -2472,15 +2537,15 @@ dependencies = [
 
 [[package]]
 name = "parking_lot_core"
-version = "0.9.5"
+version = "0.9.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7ff9f3fef3968a3ec5945535ed654cb38ff72d7495a25619e2247fb15a2ed9ba"
+checksum = "93f00c865fe7cabf650081affecd3871070f26767e7b2070a3ffae14c654b447"
 dependencies = [
  "cfg-if",
  "libc",
- "redox_syscall 0.2.16",
+ "redox_syscall 0.3.5",
  "smallvec",
- "windows-sys 0.42.0",
+ "windows-targets 0.48.2",
 ]
 
 [[package]]
@@ -2491,18 +2556,18 @@ checksum = "17359afc20d7ab31fdb42bb844c8b3bb1dabd7dcf7e68428492da7f16966fcef"
 
 [[package]]
 name = "pem"
-version = "1.1.0"
+version = "1.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "03c64931a1a212348ec4f3b4362585eca7159d0d09cbdf4a7f74f02173596fd4"
+checksum = "a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8"
 dependencies = [
  "base64 0.13.1",
 ]
 
 [[package]]
 name = "percent-encoding"
-version = "2.2.0"
+version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e"
+checksum = "9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94"
 
 [[package]]
 name = "phf"
@@ -2544,29 +2609,29 @@ dependencies = [
 
 [[package]]
 name = "pin-project"
-version = "1.0.12"
+version = "1.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc"
+checksum = "fda4ed1c6c173e3fc7a83629421152e01d7b1f9b7f65fb301e490e8cfc656422"
 dependencies = [
  "pin-project-internal",
 ]
 
 [[package]]
 name = "pin-project-internal"
-version = "1.0.12"
+version = "1.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55"
+checksum = "4359fd9c9171ec6e8c62926d6faaf553a8dc3f64e1507e76da7911b4f6a04405"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "pin-project-lite"
-version = "0.2.9"
+version = "0.2.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116"
+checksum = "12cc1b0bf1727a77a54b6654e7b5f1af8604923edc8b81885f8ec92f9e3f0a05"
 
 [[package]]
 name = "pin-utils"
@@ -2576,15 +2641,15 @@ checksum = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"
 
 [[package]]
 name = "pkg-config"
-version = "0.3.26"
+version = "0.3.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160"
+checksum = "26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964"
 
 [[package]]
 name = "plotters"
-version = "0.3.4"
+version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2538b639e642295546c50fcd545198c9d64ee2a38620a628724a3b266d5fbf97"
+checksum = "d2c224ba00d7cadd4d5c660deaf2098e5e80e07846537c51f9cfa4be50c1fd45"
 dependencies = [
  "num-traits",
  "plotters-backend",
@@ -2595,38 +2660,40 @@ dependencies = [
 
 [[package]]
 name = "plotters-backend"
-version = "0.3.4"
+version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "193228616381fecdc1224c62e96946dfbc73ff4384fba576e052ff8c1bea8142"
+checksum = "9e76628b4d3a7581389a35d5b6e2139607ad7c75b17aed325f210aa91f4a9609"
 
 [[package]]
 name = "plotters-svg"
-version = "0.3.3"
+version = "0.3.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f9a81d2759aae1dae668f783c308bc5c8ebd191ff4184aaa1b37f65a6ae5a56f"
+checksum = "38f6d39893cca0701371e3c27294f09797214b86f1fb951b89ade8ec04e2abab"
 dependencies = [
  "plotters-backend",
 ]
 
 [[package]]
 name = "polling"
-version = "2.5.2"
+version = "2.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "22122d5ec4f9fe1b3916419b76be1e80bcb93f618d071d2edf841b137b2a2bd6"
+checksum = "4b2d323e8ca7996b3e23126511a523f7e62924d93ecd5ae73b333815b0eb3dce"
 dependencies = [
  "autocfg",
+ "bitflags 1.3.2",
  "cfg-if",
+ "concurrent-queue",
  "libc",
  "log",
- "wepoll-ffi",
- "windows-sys 0.42.0",
+ "pin-project-lite",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "portable-atomic"
-version = "0.3.18"
+version = "1.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "81bdd679d533107e090c2704a35982fc06302e30898e63ffa26a81155c012e92"
+checksum = "f32154ba0af3a075eefa1eda8bb414ee928f62303a54ea85b8d6638ff1a6ee9e"
 
 [[package]]
 name = "ppv-lite86"
@@ -2663,9 +2730,9 @@ checksum = "b794032607612e7abeb4db69adb4e33590fa6cf1149e95fd7cb00e634b92f174"
 
 [[package]]
 name = "predicates-tree"
-version = "1.0.7"
+version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "54ff541861505aabf6ea722d2131ee980b8276e10a1297b94e896dd8b621850d"
+checksum = "368ba315fb8c5052ab692e68a0eefec6ec57b23a36959c14496f0b0df2c0cecf"
 dependencies = [
  "predicates-core",
  "termtree",
@@ -2673,13 +2740,11 @@ dependencies = [
 
 [[package]]
 name = "pretty_assertions"
-version = "1.3.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a25e9bcb20aa780fd0bb16b72403a9064d6b3f22f026946029acb941a50af755"
+checksum = "af7cee1a6c8a5b9208b3cb1061f10c0cb689087b3d8ce85fb9d2dd7a29b6ba66"
 dependencies = [
- "ctor",
  "diff",
- "output_vt100",
  "yansi",
 ]
 
@@ -2692,7 +2757,7 @@ dependencies = [
  "proc-macro-error-attr",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
  "version_check",
 ]
 
@@ -2709,18 +2774,34 @@ dependencies = [
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.52"
+version = "1.0.66"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1d0e1ae9e836cc3beddd63db0df682593d7e2d3d891ae8c9083d2113e1744224"
+checksum = "18fb31db3f9bddb2ea821cde30a9f70117e3f119938b5ee630b7403aa6e2ead9"
 dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "psl-types"
+version = "2.0.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "33cb294fe86a74cbcf50d4445b37da762029549ebeea341421c7c70370f86cac"
+
+[[package]]
+name = "publicsuffix"
+version = "2.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "96a8c1bda5ae1af7f99a2962e49df150414a43d62404644d98dd5c3a93d07457"
+dependencies = [
+ "idna 0.3.0",
+ "psl-types",
+]
+
 [[package]]
 name = "pulldown-cmark"
-version = "0.9.2"
+version = "0.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2d9cc634bc78768157b5cbfe988ffcd1dcba95cd2b2f03a88316c08c6d00ed63"
+checksum = "77a1a2f1f0a7ecff9c31abbe177637be0e97a0aef46cf8738ece09327985d998"
 dependencies = [
  "bitflags 1.3.2",
  "getopts",
@@ -2736,9 +2817,9 @@ checksum = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"
 
 [[package]]
 name = "quote"
-version = "1.0.26"
+version = "1.0.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4424af4bf778aae2051a77b60283332f386554255d722233d09fbfc7e30da2fc"
+checksum = "50f3b39ccfb720540debaa0164757101c08ecb8d326b15358ce76a62c7e85965"
 dependencies = [
  "proc-macro2",
 ]
@@ -2802,7 +2883,7 @@ version = "0.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
 dependencies = [
- "getrandom 0.2.8",
+ "getrandom 0.2.10",
 ]
 
 [[package]]
@@ -2816,9 +2897,9 @@ dependencies = [
 
 [[package]]
 name = "rayon"
-version = "1.6.1"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6db3a213adf02b3bcfd2d3846bb41cb22857d131789e01df434fb7e7bc0759b7"
+checksum = "1d2df5196e37bcc87abebc0053e20787d73847bb33134a69841207dd0a47f03b"
 dependencies = [
  "either",
  "rayon-core",
@@ -2826,9 +2907,9 @@ dependencies = [
 
 [[package]]
 name = "rayon-core"
-version = "1.10.1"
+version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cac410af5d00ab6884528b4ab69d1e8e146e8d471201800fa1b4524126de6ad3"
+checksum = "4b8f95bd6966f5c87776639160a66bd8ab9895d9d4ab01ddba9fc60661aebe8d"
 dependencies = [
  "crossbeam-channel",
  "crossbeam-deque",
@@ -2873,20 +2954,21 @@ version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b"
 dependencies = [
- "getrandom 0.2.8",
+ "getrandom 0.2.10",
  "redox_syscall 0.2.16",
  "thiserror",
 ]
 
 [[package]]
 name = "regex"
-version = "1.8.1"
+version = "1.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "af83e617f331cc6ae2da5443c602dfa5af81e517212d9d611a5b3ba1777b5370"
+checksum = "81bc1d4caf89fac26a70747fe603c130093b53c773888797a6329091246d651a"
 dependencies = [
  "aho-corasick",
  "memchr",
- "regex-syntax 0.7.1",
+ "regex-automata 0.3.6",
+ "regex-syntax 0.7.4",
 ]
 
 [[package]]
@@ -2898,6 +2980,17 @@ dependencies = [
  "regex-syntax 0.6.29",
 ]
 
+[[package]]
+name = "regex-automata"
+version = "0.3.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fed1ceff11a1dddaee50c9dc8e4938bd106e9d89ae372f192311e7da498e3b69"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax 0.7.4",
+]
+
 [[package]]
 name = "regex-syntax"
 version = "0.6.29"
@@ -2906,19 +2999,21 @@ checksum = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1"
 
 [[package]]
 name = "regex-syntax"
-version = "0.7.1"
+version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5996294f19bd3aae0453a862ad728f60e6600695733dd5df01da90c54363a3c"
+checksum = "e5ea92a5b6195c6ef2a0295ea818b312502c6fc94dde986c5553242e18fd4ce2"
 
 [[package]]
 name = "reqwest"
-version = "0.11.17"
+version = "0.11.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "13293b639a097af28fc8a90f22add145a9c954e49d77da06263d58cf44d5fb91"
+checksum = "cde824a14b7c14f85caff81225f411faacc04a2013f41670f41443742b1c1c55"
 dependencies = [
  "async-compression",
- "base64 0.21.0",
+ "base64 0.21.2",
  "bytes",
+ "cookie 0.16.2",
+ "cookie_store 0.16.2",
  "encoding_rs",
  "futures-core",
  "futures-util",
@@ -2926,6 +3021,7 @@ dependencies = [
  "http",
  "http-body",
  "hyper",
+ "hyper-rustls",
  "hyper-tls",
  "ipnet",
  "js-sys",
@@ -2935,11 +3031,15 @@ dependencies = [
  "once_cell",
  "percent-encoding",
  "pin-project-lite",
+ "rustls",
+ "rustls-native-certs",
+ "rustls-pemfile",
  "serde",
  "serde_json",
  "serde_urlencoded",
  "tokio",
  "tokio-native-tls",
+ "tokio-rustls",
  "tokio-socks",
  "tokio-util",
  "tower-service",
@@ -2948,7 +3048,19 @@ dependencies = [
  "wasm-bindgen",
  "wasm-bindgen-futures",
  "web-sys",
- "winreg",
+ "winreg 0.10.1",
+]
+
+[[package]]
+name = "reqwest_cookie_store"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ba529055ea150e42e4eb9c11dcd380a41025ad4d594b0cb4904ef28b037e1061"
+dependencies = [
+ "bytes",
+ "cookie_store 0.20.0",
+ "reqwest",
+ "url",
 ]
 
 [[package]]
@@ -2984,43 +3096,42 @@ dependencies = [
 
 [[package]]
 name = "rustc-demangle"
-version = "0.1.21"
+version = "0.1.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342"
+checksum = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76"
 
 [[package]]
 name = "rustix"
-version = "0.36.5"
+version = "0.37.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a3807b5d10909833d3e9acd1eb5fb988f79376ff10fce42937de71a449c4c588"
+checksum = "4d69718bf81c6127a49dc64e44a742e8bb9213c0ff8869a22c308f84c1d4ab06"
 dependencies = [
  "bitflags 1.3.2",
- "errno 0.2.8",
+ "errno",
  "io-lifetimes",
  "libc",
- "linux-raw-sys 0.1.4",
- "windows-sys 0.42.0",
+ "linux-raw-sys 0.3.8",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "rustix"
-version = "0.37.4"
+version = "0.38.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c348b5dc624ecee40108aa2922fed8bad89d7fcc2b9f8cb18f632898ac4a37f9"
+checksum = "19ed4fa021d81c8392ce04db050a3da9a60299050b7ae1cf482d862b54a7218f"
 dependencies = [
- "bitflags 1.3.2",
- "errno 0.3.0",
- "io-lifetimes",
+ "bitflags 2.4.0",
+ "errno",
  "libc",
- "linux-raw-sys 0.3.0",
- "windows-sys 0.45.0",
+ "linux-raw-sys 0.4.5",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "rustls"
-version = "0.21.0"
+version = "0.21.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "07180898a28ed6a7f7ba2311594308f595e3dd2e3c3812fa0a80a47b45f17e5d"
+checksum = "1d1feddffcfcc0b33f5c6ce9a29e341e4cd59c3f78e7ee45f4a40c038b1d6cbb"
 dependencies = [
  "log",
  "ring",
@@ -3030,9 +3141,9 @@ dependencies = [
 
 [[package]]
 name = "rustls-native-certs"
-version = "0.6.2"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0167bac7a9f490495f3c33013e7722b53cb087ecbe082fb0c6387c96f634ea50"
+checksum = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"
 dependencies = [
  "openssl-probe",
  "rustls-pemfile",
@@ -3042,18 +3153,18 @@ dependencies = [
 
 [[package]]
 name = "rustls-pemfile"
-version = "1.0.2"
+version = "1.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d194b56d58803a43635bdc398cd17e383d6f71f9182b9a192c127ca42494a59b"
+checksum = "2d3987094b1d07b653b7dfdc3f70ce9a1da9c51ac18c1b06b662e4f9a0e9f4b2"
 dependencies = [
- "base64 0.21.0",
+ "base64 0.21.2",
 ]
 
 [[package]]
 name = "rustls-webpki"
-version = "0.100.1"
+version = "0.101.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d6207cd5ed3d8dca7816f8f3725513a34609c0c765bf652b8c3cb4cfd87db46b"
+checksum = "261e9e0888cba427c3316e6322805653c9425240b6fd96cee7cb671ab70ab8d0"
 dependencies = [
  "ring",
  "untrusted",
@@ -3061,15 +3172,15 @@ dependencies = [
 
 [[package]]
 name = "rustversion"
-version = "1.0.12"
+version = "1.0.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4f3208ce4d8448b3f3e7d168a73f5e0c43a61e32930de3bceeccedb388b6bf06"
+checksum = "7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4"
 
 [[package]]
 name = "ryu"
-version = "1.0.12"
+version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde"
+checksum = "1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741"
 
 [[package]]
 name = "same-file"
@@ -3082,25 +3193,18 @@ dependencies = [
 
 [[package]]
 name = "schannel"
-version = "0.1.20"
+version = "0.1.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "88d6731146462ea25d9244b2ed5fd1d716d25c52e4d54aa4fb0f3c4e9854dbe2"
+checksum = "0c3733bf4cf7ea0880754e19cb5a462007c4a8c1914bff372ccc95b464f1df88"
 dependencies = [
- "lazy_static",
- "windows-sys 0.36.1",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "scopeguard"
-version = "1.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
-
-[[package]]
-name = "scratch"
-version = "1.0.3"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ddccb15bcce173023b3fedd9436f882a0739b8dfb45e4f6b6002bee5929f61b2"
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
 [[package]]
 name = "sct"
@@ -3124,9 +3228,9 @@ dependencies = [
 
 [[package]]
 name = "security-framework"
-version = "2.7.0"
+version = "2.9.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2bc1bb97804af6631813c55739f771071e0f2ed33ee20b68c86ec505d906356c"
+checksum = "05b64fb303737d99b81884b2c63433e9ae28abebe5eb5045dcdd175dc2ecf4de"
 dependencies = [
  "bitflags 1.3.2",
  "core-foundation",
@@ -3137,9 +3241,9 @@ dependencies = [
 
 [[package]]
 name = "security-framework-sys"
-version = "2.6.1"
+version = "2.9.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0160a13a177a45bfb43ce71c01580998474f556ad854dcbca936dd2841a5c556"
+checksum = "e932934257d3b408ed8f30db49d85ea163bfe74961f017f405b025af298f0c7a"
 dependencies = [
  "core-foundation-sys",
  "libc",
@@ -3147,29 +3251,29 @@ dependencies = [
 
 [[package]]
 name = "serde"
-version = "1.0.163"
+version = "1.0.185"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2"
+checksum = "be9b6f69f1dfd54c3b568ffa45c310d6973a5e5148fd40cf515acaf38cf5bc31"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.163"
+version = "1.0.185"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e"
+checksum = "dc59dfdcbad1437773485e0367fea4b090a2e0a16d9ffc46af47764536a298ec"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.3",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "serde_json"
-version = "1.0.96"
+version = "1.0.105"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1"
+checksum = "693151e1ac27563d6dbcec9dee9fbd5da8539b20fa14ad3752b2e6d363ace360"
 dependencies = [
  "itoa",
  "ryu",
@@ -3178,10 +3282,11 @@ dependencies = [
 
 [[package]]
 name = "serde_path_to_error"
-version = "0.1.9"
+version = "0.1.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "26b04f22b563c91331a10074bda3dd5492e3cc39d56bd557e91c0af42b6c7341"
+checksum = "4beec8bce849d58d06238cb50db2e1c417cfeafa4c63f692b15c82b7c80f8335"
 dependencies = [
+ "itoa",
  "serde",
 ]
 
@@ -3198,9 +3303,9 @@ dependencies = [
 
 [[package]]
 name = "serde_spanned"
-version = "0.6.1"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0efd8caf556a6cebd3b285caf480045fcc1ac04f6bd786b09a6f11af30c4fcf4"
+checksum = "96426c9936fd7a0124915f9185ea1d20aa9445cc9821142f0a73bc9207a2e186"
 dependencies = [
  "serde",
 ]
@@ -3217,6 +3322,35 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "serde_with"
+version = "3.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1ca3b16a3d82c4088f343b7480a93550b3eabe1a358569c2dfe38bbcead07237"
+dependencies = [
+ "base64 0.21.2",
+ "chrono",
+ "hex",
+ "indexmap 1.9.3",
+ "indexmap 2.0.0",
+ "serde",
+ "serde_json",
+ "serde_with_macros",
+ "time",
+]
+
+[[package]]
+name = "serde_with_macros"
+version = "3.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e6be15c453eb305019bfa438b1593c731f36a289a7853f7707ee29e870b3b3c"
+dependencies = [
+ "darling 0.20.3",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.28",
+]
+
 [[package]]
 name = "sha1"
 version = "0.10.5"
@@ -3248,9 +3382,9 @@ dependencies = [
 
 [[package]]
 name = "signal-hook"
-version = "0.3.14"
+version = "0.3.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a253b5e89e2698464fc26b545c9edceb338e18a89effeeecfea192c3025be29d"
+checksum = "8621587d4798caf8eb44879d42e56b9a93ea5dcd315a6487c357130095b62801"
 dependencies = [
  "libc",
  "signal-hook-registry",
@@ -3258,9 +3392,9 @@ dependencies = [
 
 [[package]]
 name = "signal-hook-registry"
-version = "1.4.0"
+version = "1.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0"
+checksum = "d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1"
 dependencies = [
  "libc",
 ]
@@ -3293,24 +3427,24 @@ checksum = "7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de"
 
 [[package]]
 name = "slab"
-version = "0.4.7"
+version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4614a76b2a8be0058caa9dbbaf66d988527d86d003c11a94fbd335d7661edcef"
+checksum = "6528351c9bc8ab22353f9d776db39a20288e8d6c37ef8cfe3317cf875eecfc2d"
 dependencies = [
  "autocfg",
 ]
 
 [[package]]
 name = "smallvec"
-version = "1.10.0"
+version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0"
+checksum = "62bb4feee49fdd9f707ef802e22365a35de4b7b299de4763d44bfea899442ff9"
 
 [[package]]
 name = "snafu"
-version = "0.7.3"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a152ba99b054b22972ee794cf04e5ef572da1229e33b65f3c57abbff0525a454"
+checksum = "e4de37ad025c587a29e8f3f5605c00f70b98715ef90b9061a815b9e59e9042d6"
 dependencies = [
  "backtrace",
  "doc-comment",
@@ -3319,14 +3453,14 @@ dependencies = [
 
 [[package]]
 name = "snafu-derive"
-version = "0.7.3"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d5e79cdebbabaebb06a9bdbaedc7f159b410461f63611d4d0e3fb0fab8fed850"
+checksum = "990079665f075b699031e9c08fd3ab99be5029b96f3b78dc0709e8f77e4efebf"
 dependencies = [
  "heck",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -3339,6 +3473,16 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "socket2"
+version = "0.5.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2538b18701741680e0322a2302176d3253a35388e2e62f172f64f4f16605f877"
+dependencies = [
+ "libc",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "spin"
 version = "0.5.2"
@@ -3347,18 +3491,18 @@ checksum = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"
 
 [[package]]
 name = "spin"
-version = "0.9.4"
+version = "0.9.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7f6002a767bff9e83f8eeecf883ecb8011875a21ae8da43bffb817a57e78cc09"
+checksum = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"
 dependencies = [
  "lock_api",
 ]
 
 [[package]]
 name = "string_cache"
-version = "0.8.4"
+version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "213494b7a2b503146286049378ce02b482200519accc31872ee8be91fa820a08"
+checksum = "f91138e76242f575eb1d3b38b4f1362f10d3a43f47d182a5b359af488a02293b"
 dependencies = [
  "new_debug_unreachable",
  "once_cell",
@@ -3388,24 +3532,24 @@ checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
 
 [[package]]
 name = "strum"
-version = "0.24.1"
+version = "0.25.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f"
+checksum = "290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125"
 dependencies = [
  "strum_macros",
 ]
 
 [[package]]
 name = "strum_macros"
-version = "0.24.3"
+version = "0.25.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59"
+checksum = "ad8d03b598d3d0fff69bf533ee3ef19b8eeb342729596df84bcc7e1f96ec4059"
 dependencies = [
  "heck",
  "proc-macro2",
  "quote",
  "rustversion",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
@@ -3420,9 +3564,9 @@ dependencies = [
 
 [[package]]
 name = "syn"
-version = "1.0.107"
+version = "1.0.109"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5"
+checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -3431,9 +3575,9 @@ dependencies = [
 
 [[package]]
 name = "syn"
-version = "2.0.3"
+version = "2.0.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e8234ae35e70582bfa0f1fedffa6daa248e41dd045310b19800c4a36382c8f60"
+checksum = "04361975b3f5e348b2189d8dc55bc942f278b2d482a6a0365de5bdd62d351567"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -3442,9 +3586,9 @@ dependencies = [
 
 [[package]]
 name = "tabled"
-version = "0.12.0"
+version = "0.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "da1a2e56bbf7bfdd08aaa7592157a742205459eff774b73bc01809ae2d99dc2a"
+checksum = "dfe9c3632da101aba5131ed63f9eed38665f8b3c68703a6bb18124835c1a5d22"
 dependencies = [
  "papergrid",
  "tabled_derive",
@@ -3461,20 +3605,20 @@ dependencies = [
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 1.0.109",
 ]
 
 [[package]]
 name = "tempfile"
-version = "3.5.0"
+version = "3.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b9fbec84f381d5795b08656e4912bec604d162bff9291d6189a78f4c8ab87998"
+checksum = "cb94d2f3cc536af71caac6b6fcebf65860b347e7ce0cc9ebe8f70d3e521054ef"
 dependencies = [
  "cfg-if",
- "fastrand",
+ "fastrand 2.0.0",
  "redox_syscall 0.3.5",
- "rustix 0.37.4",
- "windows-sys 0.45.0",
+ "rustix 0.38.8",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -3490,60 +3634,56 @@ dependencies = [
 
 [[package]]
 name = "termcolor"
-version = "1.1.3"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755"
+checksum = "be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6"
 dependencies = [
  "winapi-util",
 ]
 
 [[package]]
 name = "termtree"
-version = "0.4.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "95059e91184749cb66be6dc994f67f182b6d897cb3df74a5bf66b5e709295fd8"
-
-[[package]]
-name = "textwrap"
-version = "0.16.0"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "222a222a5bfe1bba4a77b45ec488a741b3cb8872e5e499451fd7d0129c9c7c3d"
+checksum = "3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76"
 
 [[package]]
 name = "thiserror"
-version = "1.0.40"
+version = "1.0.47"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac"
+checksum = "97a802ec30afc17eee47b2855fc72e0c4cd62be9b4efe6591edde0ec5bd68d8f"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.40"
+version = "1.0.47"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f"
+checksum = "6bb623b56e39ab7dcd4b1b98bb6c8f8d907ed255b18de254088016b27a8ee19b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.3",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "thread_local"
-version = "1.1.4"
+version = "1.1.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180"
+checksum = "3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152"
 dependencies = [
+ "cfg-if",
  "once_cell",
 ]
 
 [[package]]
 name = "time"
-version = "0.3.17"
+version = "0.3.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a561bf4617eebd33bca6434b988f39ed798e527f51a1e797d0ee4f61c0a38376"
+checksum = "b0fdd63d58b18d663fbdf70e049f00a22c8e42be082203be7f26589213cd75ea"
 dependencies = [
+ "deranged",
  "itoa",
  "serde",
  "time-core",
@@ -3552,15 +3692,15 @@ dependencies = [
 
 [[package]]
 name = "time-core"
-version = "0.1.0"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2e153e1f1acaef8acc537e68b44906d2db6436e2b35ac2c6b42640fff91f00fd"
+checksum = "7300fbefb4dadc1af235a9cef3737cea692a9d97e1b9cbcd4ebdae6f8868e6fb"
 
 [[package]]
 name = "time-macros"
-version = "0.2.6"
+version = "0.2.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d967f99f534ca7e495c575c62638eebc2898a8c84c119b89e250477bc4ba16b2"
+checksum = "eb71511c991639bb078fd5bf97757e03914361c48100d52878b8e52b46fb92cd"
 dependencies = [
  "time-core",
 ]
@@ -3586,17 +3726,17 @@ dependencies = [
 
 [[package]]
 name = "tinyvec_macros"
-version = "0.1.0"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"
+checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
 
 [[package]]
 name = "tokio"
-version = "1.28.1"
+version = "1.32.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0aa32867d44e6f2ce3385e89dceb990188b8bb0fb25b0cf576647a6f98ac5105"
+checksum = "17ed6077ed6cd6c74735e21f37eb16dc3935f96878b1fe961074089cc80893f9"
 dependencies = [
- "autocfg",
+ "backtrace",
  "bytes",
  "libc",
  "mio",
@@ -3604,7 +3744,7 @@ dependencies = [
  "parking_lot",
  "pin-project-lite",
  "signal-hook-registry",
- "socket2",
+ "socket2 0.5.3",
  "tokio-macros",
  "windows-sys 0.48.0",
 ]
@@ -3627,14 +3767,14 @@ checksum = "630bdcf245f78637c13ec01ffae6187cca34625e8c63150d424b59e55af2675e"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.3",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "tokio-native-tls"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f7d995660bd2b7f8c1568414c1126076c13fbb725c40112dc0120b78eb9b717b"
+checksum = "bbae76ab933c85776efabc971569dd6119c580d8f5d448769dec1764bf796ef2"
 dependencies = [
  "native-tls",
  "tokio",
@@ -3642,9 +3782,9 @@ dependencies = [
 
 [[package]]
 name = "tokio-rustls"
-version = "0.24.0"
+version = "0.24.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e0d409377ff5b1e3ca6437aa86c1eb7d40c134bfec254e44c830defa92669db5"
+checksum = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"
 dependencies = [
  "rustls",
  "tokio",
@@ -3675,9 +3815,9 @@ dependencies = [
 
 [[package]]
 name = "tokio-util"
-version = "0.7.4"
+version = "0.7.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0bb2e075f03b3d66d8d8785356224ba688d2906a371015e225beeb65ca92c740"
+checksum = "806fe8c2c87eccc8b3267cbae29ed3ab2d0bd37fca70ab622e46aaa9375ddb7d"
 dependencies = [
  "bytes",
  "futures-core",
@@ -3689,9 +3829,9 @@ dependencies = [
 
 [[package]]
 name = "toml"
-version = "0.7.3"
+version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b403acf6f2bb0859c93c7f0d967cb4a75a7ac552100f9322faf64dc047669b21"
+checksum = "c17e963a819c331dcacd7ab957d80bc2b9a9c1e71c804826d2f283dd65306542"
 dependencies = [
  "serde",
  "serde_spanned",
@@ -3701,20 +3841,20 @@ dependencies = [
 
 [[package]]
 name = "toml_datetime"
-version = "0.6.1"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3ab8ed2edee10b50132aed5f331333428b011c99402b5a534154ed15746f9622"
+checksum = "7cda73e2f1397b1262d6dfdcef8aafae14d1de7748d66822d3bfeeb6d03e5e4b"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "toml_edit"
-version = "0.19.6"
+version = "0.19.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08de71aa0d6e348f070457f85af8bd566e2bc452156a423ddf22861b3a953fae"
+checksum = "f8123f27e969974a3dfba720fdb560be359f57b44302d280ba72e76a74480e8a"
 dependencies = [
- "indexmap",
+ "indexmap 2.0.0",
  "serde",
  "serde_spanned",
  "toml_datetime",
@@ -3740,11 +3880,11 @@ dependencies = [
 
 [[package]]
 name = "tower-http"
-version = "0.4.0"
+version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5d1d42a9b3f3ec46ba828e8d376aec14592ea199f70a06a548587ecd1c4ab658"
+checksum = "55ae70283aba8d2a8b411c695c437fe25b8b5e44e23e780662002fc72fb47a82"
 dependencies = [
- "bitflags 1.3.2",
+ "bitflags 2.4.0",
  "bytes",
  "futures-core",
  "futures-util",
@@ -3784,20 +3924,20 @@ dependencies = [
 
 [[package]]
 name = "tracing-attributes"
-version = "0.1.23"
+version = "0.1.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a"
+checksum = "5f4f31f56159e98206da9efd823404b79b6ef3143b4a7ab76e67b1751b25a4ab"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
 name = "tracing-core"
-version = "0.1.30"
+version = "0.1.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a"
+checksum = "0955b8137a1df6f1a2e9a37d8a6656291ff0297c1a97c24e0d8425fe2312f79a"
 dependencies = [
  "once_cell",
 ]
@@ -3908,19 +4048,28 @@ dependencies = [
 
 [[package]]
 name = "try-lock"
-version = "0.2.3"
+version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642"
+checksum = "3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed"
 
 [[package]]
 name = "typed-builder"
-version = "0.14.0"
+version = "0.15.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7fe83c85a85875e8c4cb9ce4a890f05b23d38cd0d47647db7895d3d2a79566d2"
+dependencies = [
+ "typed-builder-macro",
+]
+
+[[package]]
+name = "typed-builder-macro"
+version = "0.15.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64cba322cb9b7bc6ca048de49e83918223f35e7a86311267013afff257004870"
+checksum = "29a3151c41d0b13e3d011f98adc24434560ef06673a155a6c7f66b9879eecce2"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
 ]
 
 [[package]]
@@ -3940,15 +4089,15 @@ dependencies = [
 
 [[package]]
 name = "unicode-bidi"
-version = "0.3.8"
+version = "0.3.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "099b7128301d285f79ddd55b9a83d5e6b9e97c92e0ea0daebee7263e932de992"
+checksum = "92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460"
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.6"
+version = "1.0.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc"
+checksum = "301abaae475aa91687eb82514b328ab47a211a533026cb25fc3e519b86adfc3c"
 
 [[package]]
 name = "unicode-normalization"
@@ -3979,12 +4128,12 @@ checksum = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"
 
 [[package]]
 name = "url"
-version = "2.3.1"
+version = "2.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0d68c799ae75762b8c3fe375feb6600ef5602c883c5d21eb51c09f22b83c4643"
+checksum = "50bff7831e19200a85b17131d085c25d7811bc4e186efdaf54bbd132994a88cb"
 dependencies = [
  "form_urlencoded",
- "idna 0.3.0",
+ "idna 0.4.0",
  "percent-encoding",
  "serde",
 ]
@@ -3995,24 +4144,26 @@ version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09cc8ee72d2a9becf2f2febe0205bbed8fc6615b7cb429ad062dc7b7ddd036a9"
 
+[[package]]
+name = "utf8parse"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"
+
 [[package]]
 name = "uuid"
-version = "1.3.2"
+version = "1.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4dad5567ad0cf5b760e5665964bec1b47dfd077ba8a2544b513f3556d3d239a2"
+checksum = "79daa5ed5740825c40b389c5e50312b9c86df53fccd33f281df655642b43869d"
 dependencies = [
- "getrandom 0.2.8",
+ "getrandom 0.2.10",
 ]
 
 [[package]]
 name = "value-bag"
-version = "1.0.0-alpha.9"
+version = "1.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2209b78d1249f7e6f3293657c9779fe31ced465df091bbd433a1cf88e916ec55"
-dependencies = [
- "ctor",
- "version_check",
-]
+checksum = "d92ccd67fb88503048c01b59152a04effd0782d035a83a6d256ce6085f08f4a3"
 
 [[package]]
 name = "vcpkg"
@@ -4043,22 +4194,20 @@ checksum = "9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca"
 
 [[package]]
 name = "walkdir"
-version = "2.3.2"
+version = "2.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56"
+checksum = "36df944cda56c7d8d8b7496af378e6b16de9284591917d307c9b4d313c44e698"
 dependencies = [
  "same-file",
- "winapi",
  "winapi-util",
 ]
 
 [[package]]
 name = "want"
-version = "0.3.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0"
+checksum = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"
 dependencies = [
- "log",
  "try-lock",
 ]
 
@@ -4076,9 +4225,9 @@ checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.83"
+version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "eaf9f5aceeec8be17c128b2e93e031fb8a4d469bb9c4ae2d7dc1888b26887268"
+checksum = "7706a72ab36d8cb1f80ffbf0e071533974a60d0a308d01a5d0375bf60499a342"
 dependencies = [
  "cfg-if",
  "wasm-bindgen-macro",
@@ -4086,24 +4235,24 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.83"
+version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4c8ffb332579b0557b52d268b91feab8df3615f265d5270fec2a8c95b17c1142"
+checksum = "5ef2b6d3c510e9625e5fe6f509ab07d66a760f0885d858736483c32ed7809abd"
 dependencies = [
  "bumpalo",
  "log",
  "once_cell",
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-futures"
-version = "0.4.33"
+version = "0.4.37"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "23639446165ca5a5de86ae1d8896b737ae80319560fbaa4c2887b7da6e7ebd7d"
+checksum = "c02dbc21516f9f1f04f187958890d7e6026df8d16540b7ad9492bc34a67cea03"
 dependencies = [
  "cfg-if",
  "js-sys",
@@ -4113,9 +4262,9 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.83"
+version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "052be0f94026e6cbc75cdefc9bae13fd6052cdcaf532fa6c45e7ae33a1e6c810"
+checksum = "dee495e55982a3bd48105a7b947fd2a9b4a8ae3010041b9e0faab3f9cd028f1d"
 dependencies = [
  "quote",
  "wasm-bindgen-macro-support",
@@ -4123,47 +4272,38 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.83"
+version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c"
+checksum = "54681b18a46765f095758388f2d0cf16eb8d4169b639ab575a8f5693af210c7b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 1.0.107",
+ "syn 2.0.28",
  "wasm-bindgen-backend",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.83"
+version = "0.2.87"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1c38c045535d93ec4f0b4defec448e4291638ee608530863b1e2ba115d4fff7f"
+checksum = "ca6ad05a4870b2bf5fe995117d3728437bd27d7cd5f06f13c17443ef369775a1"
 
 [[package]]
 name = "web-sys"
-version = "0.3.60"
+version = "0.3.64"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bcda906d8be16e728fd5adc5b729afad4e444e106ab28cd1c7256e54fa61510f"
+checksum = "9b85cbef8c220a6abc02aefd892dfc0fc23afb1c6a426316ec33253a3877249b"
 dependencies = [
  "js-sys",
  "wasm-bindgen",
 ]
 
-[[package]]
-name = "wepoll-ffi"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d743fdedc5c64377b5fc2bc036b01c7fd642205a0d96356034ae3404d49eb7fb"
-dependencies = [
- "cc",
-]
-
 [[package]]
 name = "widestring"
-version = "0.5.1"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "17882f045410753661207383517a6f62ec3dbeb6a4ed2acce01f0728238d1983"
+checksum = "653f141f39ec16bba3c5abe400a0c60da7468261cc2cbf36805022876bc721a8"
 
 [[package]]
 name = "winapi"
@@ -4197,31 +4337,12 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
 
 [[package]]
-name = "windows-sys"
-version = "0.36.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2"
-dependencies = [
- "windows_aarch64_msvc 0.36.1",
- "windows_i686_gnu 0.36.1",
- "windows_i686_msvc 0.36.1",
- "windows_x86_64_gnu 0.36.1",
- "windows_x86_64_msvc 0.36.1",
-]
-
-[[package]]
-name = "windows-sys"
-version = "0.42.0"
+name = "windows"
+version = "0.48.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7"
+checksum = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f"
 dependencies = [
- "windows_aarch64_gnullvm 0.42.1",
- "windows_aarch64_msvc 0.42.1",
- "windows_i686_gnu 0.42.1",
- "windows_i686_msvc 0.42.1",
- "windows_x86_64_gnu 0.42.1",
- "windows_x86_64_gnullvm 0.42.1",
- "windows_x86_64_msvc 0.42.1",
+ "windows-targets 0.48.2",
 ]
 
 [[package]]
@@ -4230,7 +4351,7 @@ version = "0.45.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"
 dependencies = [
- "windows-targets 0.42.1",
+ "windows-targets 0.42.2",
 ]
 
 [[package]]
@@ -4239,158 +4360,128 @@ version = "0.48.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
 dependencies = [
- "windows-targets 0.48.0",
+ "windows-targets 0.48.2",
 ]
 
 [[package]]
 name = "windows-targets"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7"
+checksum = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"
 dependencies = [
- "windows_aarch64_gnullvm 0.42.1",
- "windows_aarch64_msvc 0.42.1",
- "windows_i686_gnu 0.42.1",
- "windows_i686_msvc 0.42.1",
- "windows_x86_64_gnu 0.42.1",
- "windows_x86_64_gnullvm 0.42.1",
- "windows_x86_64_msvc 0.42.1",
+ "windows_aarch64_gnullvm 0.42.2",
+ "windows_aarch64_msvc 0.42.2",
+ "windows_i686_gnu 0.42.2",
+ "windows_i686_msvc 0.42.2",
+ "windows_x86_64_gnu 0.42.2",
+ "windows_x86_64_gnullvm 0.42.2",
+ "windows_x86_64_msvc 0.42.2",
 ]
 
 [[package]]
 name = "windows-targets"
-version = "0.48.0"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5"
+checksum = "d1eeca1c172a285ee6c2c84c341ccea837e7c01b12fbb2d0fe3c9e550ce49ec8"
 dependencies = [
- "windows_aarch64_gnullvm 0.48.0",
- "windows_aarch64_msvc 0.48.0",
- "windows_i686_gnu 0.48.0",
- "windows_i686_msvc 0.48.0",
- "windows_x86_64_gnu 0.48.0",
- "windows_x86_64_gnullvm 0.48.0",
- "windows_x86_64_msvc 0.48.0",
+ "windows_aarch64_gnullvm 0.48.2",
+ "windows_aarch64_msvc 0.48.2",
+ "windows_i686_gnu 0.48.2",
+ "windows_i686_msvc 0.48.2",
+ "windows_x86_64_gnu 0.48.2",
+ "windows_x86_64_gnullvm 0.48.2",
+ "windows_x86_64_msvc 0.48.2",
 ]
 
 [[package]]
 name = "windows_aarch64_gnullvm"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608"
+checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"
 
 [[package]]
 name = "windows_aarch64_gnullvm"
-version = "0.48.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc"
-
-[[package]]
-name = "windows_aarch64_msvc"
-version = "0.36.1"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47"
+checksum = "b10d0c968ba7f6166195e13d593af609ec2e3d24f916f081690695cf5eaffb2f"
 
 [[package]]
 name = "windows_aarch64_msvc"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7"
+checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"
 
 [[package]]
 name = "windows_aarch64_msvc"
-version = "0.48.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3"
-
-[[package]]
-name = "windows_i686_gnu"
-version = "0.36.1"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6"
+checksum = "571d8d4e62f26d4932099a9efe89660e8bd5087775a2ab5cdd8b747b811f1058"
 
 [[package]]
 name = "windows_i686_gnu"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640"
+checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"
 
 [[package]]
 name = "windows_i686_gnu"
-version = "0.48.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241"
-
-[[package]]
-name = "windows_i686_msvc"
-version = "0.36.1"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024"
+checksum = "2229ad223e178db5fbbc8bd8d3835e51e566b8474bfca58d2e6150c48bb723cd"
 
 [[package]]
 name = "windows_i686_msvc"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605"
+checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"
 
 [[package]]
 name = "windows_i686_msvc"
-version = "0.48.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00"
-
-[[package]]
-name = "windows_x86_64_gnu"
-version = "0.36.1"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1"
+checksum = "600956e2d840c194eedfc5d18f8242bc2e17c7775b6684488af3a9fff6fe3287"
 
 [[package]]
 name = "windows_x86_64_gnu"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45"
+checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"
 
 [[package]]
 name = "windows_x86_64_gnu"
-version = "0.48.0"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1"
+checksum = "ea99ff3f8b49fb7a8e0d305e5aec485bd068c2ba691b6e277d29eaeac945868a"
 
 [[package]]
 name = "windows_x86_64_gnullvm"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463"
+checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"
 
 [[package]]
 name = "windows_x86_64_gnullvm"
-version = "0.48.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953"
-
-[[package]]
-name = "windows_x86_64_msvc"
-version = "0.36.1"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680"
+checksum = "8f1a05a1ece9a7a0d5a7ccf30ba2c33e3a61a30e042ffd247567d1de1d94120d"
 
 [[package]]
 name = "windows_x86_64_msvc"
-version = "0.42.1"
+version = "0.42.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd"
+checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"
 
 [[package]]
 name = "windows_x86_64_msvc"
-version = "0.48.0"
+version = "0.48.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a"
+checksum = "d419259aba16b663966e29e6d7c6ecfa0bb8425818bb96f6f1f3c3eb71a6e7b9"
 
 [[package]]
 name = "winnow"
-version = "0.3.5"
+version = "0.5.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee7b2c67f962bf5042bfd8b6a916178df33a26eec343ae064cb8e069f638fa6f"
+checksum = "5504cc7644f4b593cbc05c4a55bf9bd4e94b867c3c0bd440934174d50482427d"
 dependencies = [
  "memchr",
 ]
@@ -4404,15 +4495,25 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "winreg"
+version = "0.50.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1"
+dependencies = [
+ "cfg-if",
+ "windows-sys 0.48.0",
+]
+
 [[package]]
 name = "wiremock"
-version = "0.5.18"
+version = "0.5.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bd7b0b5b253ebc0240d6aac6dd671c495c467420577bf634d3064ae7e6fa2b4c"
+checksum = "c6f71803d3a1c80377a06221e0530be02035d5b3e854af56c6ece7ac20ac441d"
 dependencies = [
  "assert-json-diff",
  "async-trait",
- "base64 0.21.0",
+ "base64 0.21.2",
  "deadpool",
  "futures",
  "futures-timer",
@@ -4434,6 +4535,6 @@ checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
 
 [[package]]
 name = "zeroize"
-version = "1.5.7"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c394b5bd0c6f669e7275d9c20aa90ae064cb22e75a1cad54e1b34088034b149f"
+checksum = "2a0956f1ba7c7909bfb66c2e9e4124ab6f6482560f6628b5aaeba39207c9aad9"
diff --git a/Dockerfile-CI.alpine.Dockerfile b/Dockerfile-CI.alpine.Dockerfile
new file mode 100644
index 0000000..95cf54f
--- /dev/null
+++ b/Dockerfile-CI.alpine.Dockerfile
@@ -0,0 +1,28 @@
+FROM alpine:latest as builder
+WORKDIR /builder
+
+RUN apk update \
+    && apk add --no-cache ca-certificates jq wget \
+    && case $(arch) in \
+      "x86_64") \
+        wget -4 -q -O - "$(wget -4 -q -O- https://api.github.com/repos/lycheeverse/lychee/releases/latest \
+        | jq -r '.assets[].browser_download_url' \
+        | grep x86_64-unknown-linux-musl)" | tar -xz lychee \
+      ;; \
+      "aarch64") \
+        wget -4 -q -O - "$(wget -4 -q -O- https://api.github.com/repos/lycheeverse/lychee/releases/latest \
+        | jq -r '.assets[].browser_download_url' \
+        | grep arm-unknown-linux-musleabihf)" | tar -xz lychee \
+      ;; \
+    esac \
+    && chmod +x lychee
+
+FROM alpine:latest
+RUN apk add --no-cache ca-certificates tzdata \
+    && addgroup -S lychee \
+    && adduser -D -G lychee -S lychee
+
+COPY --from=builder /builder/lychee /usr/local/bin/lychee
+# Run as non-root user
+USER lychee
+ENTRYPOINT [ "/usr/local/bin/lychee" ]
diff --git a/Makefile b/Makefile
index 8287378..bd3ad85 100644
--- a/Makefile
+++ b/Makefile
@@ -18,6 +18,10 @@ docker-run: ## Run Docker image
 docker-push: ## Push image to Docker Hub
 	docker push $(IMAGE_NAME)
 
+.PHONY: clean
+clean: ## Clean up build artifacts
+	cargo clean
+
 .PHONY: build
 build: ## Build Rust code locally
 	cargo build
@@ -36,6 +40,7 @@ docs: ## Generate and show documentation
 
 .PHONY: lint
 lint: ## Run linter
+	cargo fmt --all -- --check
 	cargo clippy --all-targets --all-features -- -D warnings
 
 .PHONY: test
diff --git a/README.md b/README.md
index f055a84..ce7e3a7 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,4 @@
+<a name="back-to-top"></a>
 ![lychee](assets/logo.svg)
 
 [![Homepage](https://img.shields.io/badge/Homepage-Online-EA3A97)](https://lycheeverse.github.io)
@@ -15,6 +16,24 @@ Available as a command-line utility, a library and a [GitHub Action](https://git
 
 ![Lychee demo](./assets/screencast.svg)
 
+<!-- START doctoc generated TOC please keep comment here to allow auto update -->
+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
+## Table of Contents
+
+- [Installation](#installation)
+- [Features](#features)
+- [Commandline usage](#commandline-usage)
+- [Library usage](#library-usage)
+- [GitHub Action Usage](#github-action-usage)
+- [Contributing to lychee](#contributing-to-lychee)
+- [Debugging and improving async code](#debugging-and-improving-async-code)
+- [Troubleshooting and Workarounds](#troubleshooting-and-workarounds)
+- [Users](#users)
+- [Credits](#credits)
+- [License](#license)
+
+<!-- END doctoc generated TOC please keep comment here to allow auto update -->
+
 ## Installation
 
 ### Arch Linux
@@ -83,13 +102,25 @@ apt install gcc pkg-config libc6-dev libssl-dev
 cargo install lychee
 ```
 
+#### Feature flags
+
+Lychee supports several feature flags:
+
+- `native-tls` enables the platform-native TLS crate [native-tls](https://crates.io/crates/native-tls).
+- `vendored-openssl` compiles and statically links a copy of OpenSSL. See the corresponding feature of the [openssl](https://crates.io/crates/openssl) crate.
+- `rustls-tls` enables the alternative TLS crate [rustls](https://crates.io/crates/rustls).
+- `email-check` enables checking email addresses using the [check-if-email-exists](https://crates.io/crates/check-if-email-exists) crate. This feature requires the `native-tls` feature.
+- `check_example_domains` allows checking example domains such as `example.com`. This feature is useful for testing.
+
+By default, `native-tls` and `email-check` are enabled.
+
 ## Features
 
 This comparison is made on a best-effort basis. Please create a PR to fix
 outdated information.
 
 |                      | lychee  | [awesome_bot] | [muffet] | [broken-link-checker] | [linkinator] | [linkchecker]        | [markdown-link-check] | [fink] |
-| -------------------- | ------- | ------------- | -------- | --------------------- | ------------ | -------------------- | --------------------- | ------ |
+|----------------------|---------|---------------|----------|-----------------------|--------------|----------------------|-----------------------|--------|
 | Language             | Rust    | Ruby          | Go       | JS                    | TypeScript   | Python               | JS                    | PHP    |
 | Async/Parallel       | ![yes]  | ![yes]        | ![yes]   | ![yes]                | ![yes]       | ![yes]               | ![yes]                | ![yes] |
 | JSON output          | ![yes]  | ![no]         | ![yes]   | ![yes]                | ![yes]       | ![maybe]<sup>1</sup> | ![yes]                | ![yes] |
@@ -123,6 +154,7 @@ outdated information.
 | [Use as library]     | ![yes]  | ![yes]        | ![no]    | ![yes]                | ![yes]       | ![no]                | ![yes]                | ![no]  |
 | Quiet mode           | ![yes]  | ![no]         | ![no]    | ![no]                 | ![yes]       | ![yes]               | ![yes]                | ![yes] |
 | [Config file]        | ![yes]  | ![no]         | ![no]    | ![no]                 | ![yes]       | ![yes]               | ![yes]                | ![no]  |
+| Cookies              | ![yes]  | ![no]         | ![yes]   | ![no]                 | ![no]        | ![yes]               | ![no]                 | ![yes] |
 | Recursion            | ![no]   | ![no]         | ![yes]   | ![yes]                | ![yes]       | ![yes]               | ![yes]                | ![no]  |
 | Amazing lychee logo  | ![yes]  | ![no]         | ![no]    | ![no]                 | ![no]        | ![no]                | ![no]                 | ![no]  |
 
@@ -188,28 +220,49 @@ but in case you need dedicated support for a new file format, please consider cr
 ### Docker Usage
 
 Here's how to mount a local directory into the container and check some input
-with lychee. The `--init` parameter is passed so that lychee can be stopped
-from the terminal. We also pass `-it` to start an interactive terminal, which
-is required to show the progress bar.
+with lychee.
+
+- The `--init` parameter is passed so that lychee can be stopped from the terminal.
+- We also pass `-it` to start an interactive terminal, which is required to show the progress bar.
+- The `--rm` removes not used anymore container from the host after the run (self-cleanup).
+- The `-w /input` points to `/input` as the default workspace
+- The `-v $(pwd):/input` does local volume mounting to the container for lychee access.
+
+> By default a Debian-based Docker image is used. If you want to run an Alpine-based image, use the `latest-alpine` tag.
+> For example, `lycheeverse/lychee:latest-alpine`
+
+#### Linux/macOS shell command
 
 ```sh
-docker run --init -it -v `pwd`:/input lycheeverse/lychee /input/README.md
+docker run --init -it --rm -w /input -v $(pwd):/input lycheeverse/lychee README.md
+```
+
+#### Windows PowerShell command
+
+```powershell
+docker run --init -it --rm -w /input -v ${PWD}:/input lycheeverse/lychee README.md
 ```
 
 ### GitHub Token
 
 To avoid getting rate-limited while checking GitHub links, you can optionally
-set an environment variable with your Github token like so `GITHUB_TOKEN=xxxx`,
+set an environment variable with your GitHub token like so `GITHUB_TOKEN=xxxx`,
 or use the `--github-token` CLI option. It can also be set in the config file.
 [Here is an example config file][config file].
 
-The token can be generated in your
-[GitHub account settings page](https://github.com/settings/tokens). A personal
-token with no extra permissions is enough to be able to check public repos links.
+The token can be generated on your [GitHub account settings page](https://github.com/settings/tokens).
+A personal access token with no extra permissions is enough to be able to check public repo links.
+
+For more scalable organization-wide scenarios you can consider a [GitHub App][github-app-overview].
+It has a higher rate limit than personal access tokens but requires additional configuration steps on your GitHub workflow.
+Please follow the [GitHub App Setup][github-app-setup] example.
+
+[github-app-overview]: https://docs.github.com/en/apps/overview
+[github-app-setup]: https://github.com/github/combine-prs/blob/main/docs/github-app-setup.md#github-app-setup
 
 ### Commandline Parameters
 
-There is an extensive list of commandline parameters to customize the behavior.
+There is an extensive list of command line parameters to customize the behavior.
 See below for a full list.
 
 ```text
@@ -250,6 +303,9 @@ Options:
       --dump
           Don't perform any link checking. Instead, dump all the links extracted from inputs that would be checked
 
+      --dump-inputs
+          Don't perform any link extraction and checking. Instead, dump all input sources from which links would be collected
+
       --archive <ARCHIVE>
           Specify the use of a specific web archive. Can be used in combination with `--suggest`
           
@@ -316,7 +372,10 @@ Options:
           Exclude loopback IP address range and localhost from checking
 
       --exclude-mail
-          Exclude all mail addresses from checking
+          Exclude all mail addresses from checking (deprecated; excluded by default)
+
+      --include-mail
+          Also check email addresses
 
       --remap <REMAP>
           Remap URI matching pattern to different URI
@@ -327,6 +386,9 @@ Options:
   -a, --accept <ACCEPT>
           Comma-separated list of accepted status codes for valid links
 
+      --include-fragments
+          Enable the checking of fragments in links
+
   -t, --timeout <TIMEOUT>
           Website timeout in seconds from connect to response finished
           
@@ -346,7 +408,7 @@ Options:
           Base URL or website root directory to check relative URLs e.g. https://example.com or `/path/to/public`
 
       --basic-auth <BASIC_AUTH>
-          Basic authentication support. E.g. `username:password`
+          Basic authentication support. E.g. `http://example.com username:password`
 
       --github-token <GITHUB_TOKEN>
           GitHub API token to use when checking github.com links, to avoid rate limiting
@@ -373,6 +435,9 @@ Options:
       --require-https
           When HTTPS is available, treat HTTP links as errors
 
+      --cookie-jar <COOKIE_JAR>
+          Tell lychee to read cookies from the given file. Cookies will be stored in the cookie jar and sent with requests. New cookies will be stored in the cookie jar and existing cookies will be updated
+
   -h, --help
           Print help (see a summary with '-h')
 
@@ -472,7 +537,7 @@ which includes usage instructions.
 ## Contributing to lychee
 
 We'd be thankful for any contribution. \
-We try to keep the issue-tracker up-to-date so you can quickly find a task to work on.
+We try to keep the issue tracker up-to-date so you can quickly find a task to work on.
 
 Try one of these links to get started:
 
@@ -510,7 +575,6 @@ If you find a way to make lychee faster, please do reach out.
 We collect a list of common workarounds for various websites in our [troubleshooting guide](./docs/TROUBLESHOOTING.md).
 
 ## Users
-
 - https://github.com/InnerSourceCommons/InnerSourcePatterns
 - https://github.com/opensearch-project/OpenSearch
 - https://github.com/ramitsurana/awesome-kubernetes
@@ -532,7 +596,7 @@ If you are using lychee for your project, **please add it here**.
 ## Credits
 
 The first prototype of lychee was built in [episode 10 of Hello
-Rust](https://hello-rust.show/10/). Thanks to all Github- and Patreon sponsors
+Rust](https://hello-rust.show/10/). Thanks to all GitHub and Patreon sponsors
 for supporting the development since the beginning. Also, thanks to all the
 great contributors who have since made this project more mature.
 
@@ -545,3 +609,7 @@ lychee is licensed under either of
 - MIT license (LICENSE-MIT or https://opensource.org/licenses/MIT)
 
 at your option.
+
+
+<br><hr>
+[🔼 Back to top](#back-to-top)
diff --git a/benches/Cargo.toml b/benches/Cargo.toml
index 5a20741..f2ec03b 100644
--- a/benches/Cargo.toml
+++ b/benches/Cargo.toml
@@ -8,12 +8,18 @@ edition = "2021"
 publish = false
 
 [dependencies]
-lychee-lib = { path = "../lychee-lib"}
+lychee-lib = { path = "../lychee-lib", default-features = false }
 # TODO: Move back to crates.io version once
 # https://github.com/bheisler/criterion.rs/pull/602
 # got released
 criterion = { git = "https://github.com/bheisler/criterion.rs"}
 
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls"]
+default = ["native-tls", "email-check"]
+
 [[bench]]
 name = "extract"
 path = "src/extract.rs"
diff --git a/examples/builder/Cargo.toml b/examples/builder/Cargo.toml
index cdc52ad..16f03ff 100644
--- a/examples/builder/Cargo.toml
+++ b/examples/builder/Cargo.toml
@@ -8,8 +8,14 @@ name = "builder"
 path = "builder.rs"
 
 [dependencies]
-lychee-lib = { path = "../../lychee-lib", version = "0.13.0" }
-tokio = { version = "1.28.1", features = ["full"] }
-regex = "1.8.1"
+lychee-lib = { path = "../../lychee-lib", version = "0.13.0", default-features = false }
+tokio = { version = "1.32.0", features = ["full"] }
+regex = "1.9.3"
 http = "0.2.9"
-reqwest = { version = "0.11.17", features = ["gzip"] }
+reqwest = { version = "0.11.18", default-features = false, features = ["gzip"] }
+
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls", "reqwest/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls", "reqwest/rustls-tls-native-roots"]
+default = ["native-tls", "email-check"]
diff --git a/examples/client_pool/Cargo.toml b/examples/client_pool/Cargo.toml
index a68e2fc..06f913a 100644
--- a/examples/client_pool/Cargo.toml
+++ b/examples/client_pool/Cargo.toml
@@ -8,7 +8,13 @@ name = "client_pool"
 path = "client_pool.rs"
 
 [dependencies]
-futures = "0.3.27"
+futures = "0.3.28"
 tokio-stream = "0.1.14"
-lychee-lib = { path = "../../lychee-lib", version = "0.13.0" }
-tokio = { version = "1.28.1", features = ["full"] }
+lychee-lib = { path = "../../lychee-lib", version = "0.13.0", default-features = false }
+tokio = { version = "1.32.0", features = ["full"] }
+
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls"]
+default = ["native-tls", "email-check"]
diff --git a/examples/collect_links/Cargo.toml b/examples/collect_links/Cargo.toml
index ea82227..6d82395 100644
--- a/examples/collect_links/Cargo.toml
+++ b/examples/collect_links/Cargo.toml
@@ -8,9 +8,15 @@ name = "collect_links"
 path = "collect_links.rs"
 
 [dependencies]
-lychee-lib = { path = "../../lychee-lib", version = "0.13.0" }
-tokio = { version = "1.28.1", features = ["full"] }
-regex = "1.8.1"
+lychee-lib = { path = "../../lychee-lib", version = "0.13.0", default-features = false }
+tokio = { version = "1.32.0", features = ["full"] }
+regex = "1.9.3"
 http = "0.2.9"
 tokio-stream = "0.1.14"
-reqwest = { version = "0.11.17", features = ["gzip"] }
+reqwest = { version = "0.11.18", default-features = false, features = ["gzip"] }
+
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls", "reqwest/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls", "reqwest/rustls-tls-native-roots"]
+default = ["native-tls", "email-check"]
diff --git a/examples/extract/Cargo.toml b/examples/extract/Cargo.toml
index 002d424..8760cdb 100644
--- a/examples/extract/Cargo.toml
+++ b/examples/extract/Cargo.toml
@@ -8,5 +8,11 @@ name = "extract"
 path = "extract.rs"
 
 [dependencies]
-lychee-lib = { path = "../../lychee-lib", version = "0.13.0" }
-tokio = { version = "1.28.1", features = ["full"] }
+lychee-lib = { path = "../../lychee-lib", version = "0.13.0", default-features = false }
+tokio = { version = "1.32.0", features = ["full"] }
+
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls"]
+default = ["native-tls", "email-check"]
diff --git a/examples/simple/Cargo.toml b/examples/simple/Cargo.toml
index 125c897..b10a73e 100644
--- a/examples/simple/Cargo.toml
+++ b/examples/simple/Cargo.toml
@@ -8,5 +8,11 @@ name = "simple"
 path = "simple.rs"
 
 [dependencies]
-lychee-lib = { path = "../../lychee-lib", version = "0.13.0" }
-tokio = { version = "1.28.1", features = ["full"] }
+lychee-lib = { path = "../../lychee-lib", version = "0.13.0", default-features = false }
+tokio = { version = "1.32.0", features = ["full"] }
+
+[features]
+email-check = ["lychee-lib/email-check"]
+native-tls = ["lychee-lib/native-tls"]
+rustls-tls = ["lychee-lib/rustls-tls"]
+default = ["native-tls", "email-check"]
diff --git a/fixtures/TEST.md b/fixtures/TEST.md
index e6e44bf..15efe7c 100644
--- a/fixtures/TEST.md
+++ b/fixtures/TEST.md
@@ -1,7 +1,7 @@
 Check file link
 ![Logo](../assets/banner.svg)
 
-![Anchors should be ignored](#awesome)
+![Fragment only link](#awesome)
 
 Normal link, which should work as expected.
 [Wikipedia](https://en.wikipedia.org/wiki/Static_program_analysis)
diff --git a/fixtures/TEST_EMAIL.md b/fixtures/TEST_EMAIL.md
index b0e3de4..98ea920 100644
--- a/fixtures/TEST_EMAIL.md
+++ b/fixtures/TEST_EMAIL.md
@@ -1,6 +1,5 @@
 https://endler.dev
 test@example.com
-foo@bar.dev
 https://example.com
 octocat+github@github.com
 mailto:test2@example.com
diff --git a/fixtures/TEST_EXCLUDE_1.txt b/fixtures/TEST_EXCLUDE_1.txt
deleted file mode 100644
index 3e11d35..0000000
--- a/fixtures/TEST_EXCLUDE_1.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-https://en.wikipedia.org/*
-https://ldra.com
-https://url-does-not-exist
\ No newline at end of file
diff --git a/fixtures/TEST_EXCLUDE_2.txt b/fixtures/TEST_EXCLUDE_2.txt
deleted file mode 100644
index af90ee7..0000000
--- a/fixtures/TEST_EXCLUDE_2.txt
+++ /dev/null
@@ -1 +0,0 @@
-https://i.creativecommons.org/p/zero/1.0/88x31.png
\ No newline at end of file
diff --git a/fixtures/configs/smoketest.toml b/fixtures/configs/smoketest.toml
index 117bdfd..fa91e9a 100644
--- a/fixtures/configs/smoketest.toml
+++ b/fixtures/configs/smoketest.toml
@@ -65,7 +65,12 @@ method = "get"
 headers = []
 
 # Remap URI matching pattern to different URI.
-remap = [ "https://example.com http://example.invalid" ]
+# This also supports (named) capturing groups.
+remap = [ 
+    "https://example.com http://example.invalid",
+    "https://example.com/(.*) http://example.org/$1",
+    "https://github.com/(?P<org>.*)/(?P<repo>.*) https://gitlab.com/$org/$repo",
+]
 
 # Base URL or website root directory to check relative URLs.
 base = "https://example.com"
@@ -73,7 +78,7 @@ base = "https://example.com"
 # HTTP basic auth support. This will be the username and password passed to the
 # authorization HTTP header. See
 # <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization>
-basic_auth = "user:pwd"
+basic_auth = ["http://example.com user:pwd"]
 
 #############################  Exclusions  ##########################
 
diff --git a/fixtures/dump_inputs/markdown.md b/fixtures/dump_inputs/markdown.md
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/dump_inputs/some_file.txt b/fixtures/dump_inputs/some_file.txt
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/dump_inputs/subfolder/example.bin b/fixtures/dump_inputs/subfolder/example.bin
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/dump_inputs/subfolder/file2.md b/fixtures/dump_inputs/subfolder/file2.md
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/dump_inputs/subfolder/test.html b/fixtures/dump_inputs/subfolder/test.html
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/fragments/empty_file b/fixtures/fragments/empty_file
new file mode 100644
index 0000000..e69de29
diff --git a/fixtures/fragments/file.html b/fixtures/fragments/file.html
new file mode 100644
index 0000000..db98b3a
--- /dev/null
+++ b/fixtures/fragments/file.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8">
+    <title>For Testing Fragments</title>
+  </head>
+  <body>
+    <section id="in-the-beginning">
+      <p>
+        To start
+        <a href="file1.md#fragment-1">
+          let's run away.
+        </a>
+      </p>
+    </section>
+    <section>
+      <p id="a-word">Word</p>
+      <a href="#in-the-beginning">back we go</a>
+      <a href="#in-the-end">doesn't exist</a>
+    </section>
+  </body>
+</html>
diff --git a/fixtures/fragments/file1.md b/fixtures/fragments/file1.md
new file mode 100644
index 0000000..fb3642a
--- /dev/null
+++ b/fixtures/fragments/file1.md
@@ -0,0 +1,42 @@
+# Fragment Test File 1
+
+This is a test file for the fragment loader.
+
+## Fragment 1
+
+[Link to fragment 2](#fragment-2)
+
+## Fragment 2
+
+[Link to fragment 1 in file2](file2.md#fragment-1)
+
+## Fragment 3
+
+[Link to missing fragment](#missing-fragment)
+
+[Link to missing fragment in file2](file2.md#missing-fragment)
+
+## HTML Fragments
+
+Explicit fragment links are currently not supported.
+Therefore we put the test into a code block for now to prevent false positives.
+
+<a id="explicit-fragment"></a>
+
+[Link to explicit fragment](#explicit-fragment)
+
+[To the html doc](file.html#a-word)
+
+## Custom Fragments
+
+[Custom fragment id in file2](file2.md#custom-id)
+
+# Kebab Case Fragment
+
+[Link to kebab-case fragment](#kebab-case-fragment)
+
+[Link to second kebab-case fragment](#kebab-case-fragment-1)
+
+# Kebab Case Fragment
+
+[Link to another file type](empty_file#fragment)
diff --git a/fixtures/fragments/file2.md b/fixtures/fragments/file2.md
new file mode 100644
index 0000000..76ac82e
--- /dev/null
+++ b/fixtures/fragments/file2.md
@@ -0,0 +1,7 @@
+# Fragment Test File 2
+
+This is a test file for the fragment loader.
+
+### Some other heading with custom id {#custom-id}
+
+#### Fragment 1
diff --git a/lychee-bin/Cargo.toml b/lychee-bin/Cargo.toml
index f94400e..998c950 100644
--- a/lychee-bin/Cargo.toml
+++ b/lychee-bin/Cargo.toml
@@ -18,52 +18,51 @@ version = "0.13.0"
 
 [dependencies]
 lychee-lib = { path = "../lychee-lib", version = "0.13.0", default-features = false }
-anyhow = "1.0.71"
-console = "0.15.5"
-const_format = "0.2.30"
+
+anyhow = "1.0.75"
+assert-json-diff = "2.0.2"
+clap = { version = "4.3.23", features = ["env", "derive"] }
+console = "0.15.7"
+const_format = "0.2.31"
+csv = "1.2.2"
+dashmap = { version = "5.5.0", features = ["serde"] }
+env_logger = "0.10.0"
+futures = "0.3.28"
 headers = "0.3.8"
 http = "0.2.9"
-indicatif = "0.17.3"
-openssl-sys = "0.9.87"
+humantime = "2.1.0"
+humantime-serde = "1.1.1"
+indicatif = "0.17.6"
+log = "0.4.20"
+once_cell = "1.18.0"
+openssl-sys = { version = "0.9.91", optional = true }
 pad = "0.1.6"
-regex = "1.8.1"
-reqwest = { version = "0.11.17", features = ["gzip"] }
+regex = "1.9.3"
+reqwest = { version = "0.11.18", default-features = false, features = ["gzip", "json"] }
+reqwest_cookie_store = "0.6.0"
 # Make build work on Apple Silicon.
 # See https://github.com/briansmith/ring/issues/1163
 # This is necessary for the homebrew build
 # https://github.com/Homebrew/homebrew-core/pull/70216
 ring = "0.16.20"
-serde = { version = "1.0.163", features = ["derive"] }
-serde_json = "1.0.96"
-tabled = "0.12.0"
-toml = "0.7.3"
-tokio = { version = "1.28.1", features = ["full"] }
-futures = "0.3.27"
-tokio-stream = "0.1.14"
-once_cell = "1.17.1"
-dashmap = { version = "5.4.0", features = ["serde"] }
-csv = "1.2.1"
-humantime = "2.1.0"
-humantime-serde = "1.1.1"
 secrecy = { version = "0.8.0", features = ["serde"] }
+serde = { version = "1.0.185", features = ["derive"] }
+serde_json = "1.0.105"
+strum = { version = "0.25.0", features = ["derive"] }
 supports-color = "2.0.0"
-log = "0.4.17"
-env_logger = "0.10.0"
-strum = {version = "0.24.1" , features = ["derive"] }
-assert-json-diff = "2.0.2"
-
-[dependencies.clap]
-version = "4.1.11"
-features = ["env", "derive"]
+tabled = "0.14.0"
+tokio = { version = "1.32.0", features = ["full"] }
+tokio-stream = "0.1.14"
+toml = "0.7.6"
 
 [dev-dependencies]
-assert_cmd = "2.0.11"
-pretty_assertions = "1.3.0"
+assert_cmd = "2.0.12"
 predicates = "3.0.3"
-tempfile = "3.5.0"
-uuid = { version = "1.3.2", features = ["v4"] }
-wiremock = "0.5.18"
+pretty_assertions = "1.4.0"
+tempfile = "3.8.0"
 tracing-subscriber = { version = "0.3.17", default-features = false, features = ["fmt", "registry", "env-filter"] }
+uuid = { version = "1.4.1", features = ["v4"] }
+wiremock = "0.5.19"
 
 # console-subscriber is not yet published to crates.io
 # Users have to uncomment this section and the feature below and build lychee
@@ -76,14 +75,34 @@ tracing-subscriber = { version = "0.3.17", default-features = false, features =
 
 [features]
 #tokio-console = ["console-subscriber", "tracing-subscriber/registry"]
+
+# Compile and statically link a copy of OpenSSL.
 vendored-openssl = ["openssl-sys/vendored"]
+
+# Allow checking example domains such as example.com.
 check_example_domains = ["lychee-lib/check_example_domains"]
 
-# Unfortunately, it's not possible to automatically enable features
-# for cargo test. See rust-lang/cargo#2911.
-# As a workaround we introduce a new feature to allow example domains
-# in integration tests.
+# Enable checking email addresses. Requires the native-tls feature.
+email-check = ["lychee-lib/email-check"]
+
+# Use platform-native TLS.
+native-tls = ["lychee-lib/native-tls", "openssl-sys", "reqwest/native-tls"]
+
+# Use Rustls TLS.
+rustls-tls = ["lychee-lib/rustls-tls", "reqwest/rustls-tls-native-roots"]
+
+default = ["native-tls", "email-check"]
+
+# Unfortunately, it's not possible to automatically enable features for cargo
+# test. See rust-lang/cargo#2911. As a workaround we introduce a new feature to
+# allow example domains in integration tests.
 [[test]]
 name = "cli"
 path = "tests/cli.rs"
 required-features = ["check_example_domains"]
+
+# metadata for cargo-binstall to get the right artifacts
+[package.metadata.binstall]
+pkg-url = "{ repo }/releases/download/v{ version }/{ name }-v{ version }-{ target }{ archive-suffix }"
+bin-dir = "{ bin }{ binary-ext }"
+pkg-fmt = "tgz"
diff --git a/lychee-bin/src/archive/wayback/mod.rs b/lychee-bin/src/archive/wayback/mod.rs
index aff0977..8f55b49 100644
--- a/lychee-bin/src/archive/wayback/mod.rs
+++ b/lychee-bin/src/archive/wayback/mod.rs
@@ -56,17 +56,61 @@ where
 #[cfg(test)]
 mod tests {
     use crate::archive::wayback::get_wayback_link;
-    use reqwest::Error;
+    use reqwest::{Error, Url};
+    use std::{error::Error as StdError, time::Duration};
+    use tokio::time::sleep;
 
     #[tokio::test]
-    async fn wayback_suggestion() -> Result<(), Error> {
-        let url = &"https://example.com".try_into().unwrap();
-        let response = get_wayback_link(url).await?;
-        let suggestion = response.unwrap();
+    async fn wayback_suggestion() -> Result<(), Box<dyn StdError>> {
+        let target_url = "https://example.com".parse::<Url>()?;
 
-        assert!(suggestion.as_str().contains("web.archive.org"));
+        // Extract domain from target_url without the scheme and trailing slash
+        let expected_ending = (target_url.host_str().ok_or("Invalid target URL")?).to_string();
 
-        Ok(())
+        // This test can be flaky, because the wayback machine does not always
+        // return a suggestion. Retry a few times if needed.
+        for _ in 0..3 {
+            match get_wayback_link(&target_url).await {
+                Ok(Some(suggested_url)) => {
+                    // Ensure the host is correct
+                    let host = suggested_url
+                        .host_str()
+                        .ok_or("Suggestion doesn't have a host")?;
+                    assert_eq!(host, "web.archive.org");
+
+                    // Extract the actual archived URL from the Wayback URL
+                    let archived_url = suggested_url
+                        .path()
+                        .trim_start_matches("/web/")
+                        .split_once('/')
+                        .map(|x| x.1)
+                        .ok_or("Failed to extract archived URL from Wayback suggestion")?;
+
+                    // Check the ending of the suggested URL without considering trailing slash
+                    if !archived_url
+                        .trim_end_matches('/')
+                        .ends_with(&expected_ending)
+                    {
+                        return Err(format!(
+                            "Expected suggestion '{archived_url}' to end with '{expected_ending}'"
+                        )
+                        .into());
+                    }
+
+                    return Ok(());
+                }
+                Ok(None) => {
+                    // No suggestion was returned, wait and retry
+                    sleep(Duration::from_secs(1)).await;
+                }
+                Err(e) => {
+                    // Propagate other errors
+                    return Err(format!("Error retrieving Wayback link: {e}").into());
+                }
+            }
+        }
+
+        Err("Did not get a valid Wayback Machine suggestion after multiple attempts.".into())
     }
 
     #[tokio::test]
diff --git a/lychee-bin/src/client.rs b/lychee-bin/src/client.rs
index 86aabbe..e2297c8 100644
--- a/lychee-bin/src/client.rs
+++ b/lychee-bin/src/client.rs
@@ -1,20 +1,16 @@
 use crate::options::Config;
-use crate::parse::{parse_basic_auth, parse_duration_secs, parse_headers, parse_remaps};
+use crate::parse::{parse_duration_secs, parse_headers, parse_remaps};
 use anyhow::{Context, Result};
-use headers::HeaderMapExt;
 use http::StatusCode;
 use lychee_lib::{Client, ClientBuilder};
 use regex::RegexSet;
+use reqwest_cookie_store::CookieStoreMutex;
+use std::sync::Arc;
 use std::{collections::HashSet, str::FromStr};
 
 /// Creates a client according to the command-line config
-pub(crate) fn create(cfg: &Config) -> Result<Client> {
-    let mut headers = parse_headers(&cfg.header)?;
-    if let Some(auth) = &cfg.basic_auth {
-        let auth_header = parse_basic_auth(auth)?;
-        headers.typed_insert(auth_header);
-    }
-
+pub(crate) fn create(cfg: &Config, cookie_jar: Option<&Arc<CookieStoreMutex>>) -> Result<Client> {
+    let headers = parse_headers(&cfg.header)?;
     let timeout = parse_duration_secs(cfg.timeout);
     let retry_wait_time = parse_duration_secs(cfg.retry_wait_time);
     let method: reqwest::Method = reqwest::Method::from_str(&cfg.method.to_uppercase())?;
@@ -41,6 +37,25 @@ pub(crate) fn create(cfg: &Config) -> Result<Client> {
         None => None,
     };
 
+    // `exclude_mail` will be removed in 1.0. Until then, we need to support it.
+    // Therefore, we need to check if both `include_mail` and `exclude_mail` are set to `true`
+    // and return an error if that's the case.
+    if cfg.include_mail && cfg.exclude_mail {
+        return Err(anyhow::anyhow!(
+            "Cannot set both `include-mail` and `exclude-mail` to true"
+        ));
+    }
+
+    // By default, clap sets `exclude_mail` to `false`.
+    // Therefore, we need to check if `exclude_mail` is explicitly set to
+    // `true`. If so, we need to set `include_mail` to `false`.
+    // Otherwise, we use the value of `include_mail`.
+    let include_mail = if cfg.exclude_mail {
+        false
+    } else {
+        cfg.include_mail
+    };
+
     ClientBuilder::builder()
         .remaps(remaps)
         .includes(includes)
@@ -49,7 +64,7 @@ pub(crate) fn create(cfg: &Config) -> Result<Client> {
         .exclude_private_ips(cfg.exclude_private)
         .exclude_link_local_ips(cfg.exclude_link_local)
         .exclude_loopback_ips(cfg.exclude_loopback)
-        .exclude_mail(cfg.exclude_mail)
+        .include_mail(include_mail)
         .max_redirects(cfg.max_redirects)
         .user_agent(cfg.user_agent.clone())
         .allow_insecure(cfg.insecure)
@@ -61,6 +76,8 @@ pub(crate) fn create(cfg: &Config) -> Result<Client> {
         .schemes(HashSet::from_iter(schemes))
         .accepted(accepted)
         .require_https(cfg.require_https)
+        .cookie_jar(cookie_jar.cloned())
+        .include_fragments(cfg.include_fragments)
         .build()
         .client()
         .context("Failed to create request client")
diff --git a/lychee-bin/src/color.rs b/lychee-bin/src/color.rs
index 2156579..75642b5 100644
--- a/lychee-bin/src/color.rs
+++ b/lychee-bin/src/color.rs
@@ -4,12 +4,12 @@ use once_cell::sync::Lazy;
 pub(crate) static NORMAL: Lazy<Style> = Lazy::new(Style::new);
 pub(crate) static DIM: Lazy<Style> = Lazy::new(|| Style::new().dim());
 
-pub(crate) static GREEN: Lazy<Style> = Lazy::new(|| Style::new().green().bright());
-pub(crate) static BOLD_GREEN: Lazy<Style> = Lazy::new(|| Style::new().green().bold().bright());
+pub(crate) static GREEN: Lazy<Style> = Lazy::new(|| Style::new().color256(82).bright());
+pub(crate) static BOLD_GREEN: Lazy<Style> = Lazy::new(|| Style::new().color256(82).bold().bright());
 pub(crate) static YELLOW: Lazy<Style> = Lazy::new(|| Style::new().yellow().bright());
 pub(crate) static BOLD_YELLOW: Lazy<Style> = Lazy::new(|| Style::new().yellow().bold().bright());
-pub(crate) static PINK: Lazy<Style> = Lazy::new(|| Style::new().color256(197).bright());
-pub(crate) static BOLD_PINK: Lazy<Style> = Lazy::new(|| Style::new().color256(197).bold().bright());
+pub(crate) static PINK: Lazy<Style> = Lazy::new(|| Style::new().color256(197));
+pub(crate) static BOLD_PINK: Lazy<Style> = Lazy::new(|| Style::new().color256(197).bold());
 
 // Write output using predefined colors
 macro_rules! color {
diff --git a/lychee-bin/src/commands/check.rs b/lychee-bin/src/commands/check.rs
index de202f6..7acd88e 100644
--- a/lychee-bin/src/commands/check.rs
+++ b/lychee-bin/src/commands/check.rs
@@ -46,7 +46,7 @@ where
     let cache = params.cache;
     let accept = params.cfg.accept;
 
-    let pb = if params.cfg.no_progress {
+    let pb = if params.cfg.no_progress || params.cfg.verbose.log_level() >= log::Level::Info {
         None
     } else {
         Some(init_progress_bar("Extracting links"))
@@ -190,10 +190,9 @@ async fn progress_bar_task(
 
 fn init_progress_bar(initial_message: &'static str) -> ProgressBar {
     let bar = ProgressBar::new_spinner().with_style(
-        ProgressStyle::with_template(
-            "{spinner:.197.bright} {pos}/{len:.dim} ETA {eta} {bar:.dim} {wide_msg}",
-        )
-        .expect("Valid progress bar"),
+        ProgressStyle::with_template("{spinner:.162} {pos}/{len:.238} {bar:.162/238} {wide_msg}")
+            .expect("Valid progress bar")
+            .progress_chars("━ ━"),
     );
     bar.set_length(0);
     bar.set_message(initial_message);
@@ -264,9 +263,11 @@ async fn handle(
     //   future run.
     // - Skip caching excluded links; they might not be excluded in the next run
     let status = response.status();
-    if !uri.is_file() && !status.is_excluded() && !status.is_unsupported() {
-        cache.insert(uri, status.into());
+    if uri.is_file() || status.is_excluded() || status.is_unsupported() || status.is_unknown() {
+        return response;
     }
+
+    cache.insert(uri, status.into());
     response
 }
 
diff --git a/lychee-bin/src/commands/dump.rs b/lychee-bin/src/commands/dump.rs
index 818a9cf..580cdb9 100644
--- a/lychee-bin/src/commands/dump.rs
+++ b/lychee-bin/src/commands/dump.rs
@@ -37,8 +37,8 @@ where
     let requests = params.requests;
     tokio::pin!(requests);
 
-    if let Some(outfile) = &params.cfg.output {
-        fs::File::create(outfile)?;
+    if let Some(out_file) = &params.cfg.output {
+        fs::File::create(out_file)?;
     }
 
     let mut writer = create_writer(params.cfg.output)?;
@@ -47,7 +47,7 @@ where
         let mut request = request?;
 
         // Apply URI remappings (if any)
-        params.client.remap(&mut request.uri);
+        params.client.remap(&mut request.uri)?;
 
         // Avoid panic on broken pipe.
         // See https://github.com/rust-lang/rust/issues/46016
@@ -70,6 +70,30 @@ where
     Ok(ExitCode::Success)
 }
 
+/// Dump all input sources to stdout without extracting any links and checking
+/// them.
+pub(crate) async fn dump_inputs<S>(sources: S, output: Option<&PathBuf>) -> Result<ExitCode>
+where
+    S: futures::Stream<Item = Result<String>>,
+{
+    let sources = sources;
+    tokio::pin!(sources);
+
+    if let Some(out_file) = output {
+        fs::File::create(out_file)?;
+    }
+
+    let mut writer = create_writer(output.cloned())?;
+
+    while let Some(source) = sources.next().await {
+        let source = source?;
+
+        writeln!(writer, "{source}")?;
+    }
+
+    Ok(ExitCode::Success)
+}
+
 /// Dump request to stdout
 fn write(
     writer: &mut Box<dyn Write>,
diff --git a/lychee-bin/src/commands/mod.rs b/lychee-bin/src/commands/mod.rs
index f5648bf..248a9a9 100644
--- a/lychee-bin/src/commands/mod.rs
+++ b/lychee-bin/src/commands/mod.rs
@@ -3,6 +3,7 @@ pub(crate) mod dump;
 
 pub(crate) use check::check;
 pub(crate) use dump::dump;
+pub(crate) use dump::dump_inputs;
 
 use std::sync::Arc;
 
diff --git a/lychee-bin/src/formatters/stats/compact.rs b/lychee-bin/src/formatters/stats/compact.rs
index 48cbbca..92f22f7 100644
--- a/lychee-bin/src/formatters/stats/compact.rs
+++ b/lychee-bin/src/formatters/stats/compact.rs
@@ -1,10 +1,10 @@
 use std::{
-    collections::HashMap,
     fmt::{self, Display},
+    time::Duration,
 };
 
 use crate::{
-    color::{color, BOLD_GREEN, BOLD_PINK, BOLD_YELLOW, NORMAL, PINK},
+    color::{color, BOLD_GREEN, BOLD_PINK, BOLD_YELLOW, DIM, NORMAL},
     formatters::color_response,
     stats::ResponseStats,
 };
@@ -15,27 +15,6 @@ use anyhow::Result;
 
 struct CompactResponseStats(ResponseStats);
 
-// Helper function, which prints the detailed list of errors
-pub(crate) fn print_errors(stats: &ResponseStats) -> String {
-    let mut errors = HashMap::new();
-    errors.insert(
-        "HTTP",
-        stats.errors - stats.redirects - stats.timeouts - stats.unknown,
-    );
-    errors.insert("Redirects", stats.redirects);
-    errors.insert("Timeouts", stats.timeouts);
-    errors.insert("Unknown", stats.unknown);
-
-    // Creates an output like `(HTTP:3|Timeouts:1|Unknown:1)`
-    let mut err: Vec<_> = errors
-        .into_iter()
-        .filter(|(_, v)| *v > 0)
-        .map(|(k, v)| format!("{k}:{v}"))
-        .collect();
-    err.sort();
-    err.join("|")
-}
-
 impl Display for CompactResponseStats {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         let stats = &self.0;
@@ -71,16 +50,17 @@ impl Display for CompactResponseStats {
         }
 
         color!(f, NORMAL, "\u{1F50D} {} Total", stats.total)?;
+
+        // show duration (in a human readable format), e.g. 2m 30s
+        let duration = Duration::from_secs(stats.duration_secs);
+        color!(f, DIM, " (in {})", humantime::format_duration(duration))?;
+
         color!(f, BOLD_GREEN, " \u{2705} {} OK", stats.successful)?;
 
         let total_errors = stats.errors;
 
         let err_str = if total_errors == 1 { "Error" } else { "Errors" };
         color!(f, BOLD_PINK, " \u{1f6ab} {} {}", total_errors, err_str)?;
-        if total_errors > 0 {
-            write!(f, " ")?;
-            color!(f, PINK, "({})", print_errors(stats))?;
-        }
         if stats.excludes > 0 {
             color!(f, BOLD_YELLOW, " \u{1F4A4} {} Excluded", stats.excludes)?;
         }
diff --git a/lychee-bin/src/main.rs b/lychee-bin/src/main.rs
index 45a050c..d056adb 100644
--- a/lychee-bin/src/main.rs
+++ b/lychee-bin/src/main.rs
@@ -69,12 +69,16 @@ use color::YELLOW;
 use commands::CommandParams;
 use formatters::response::ResponseFormatter;
 use log::{error, info, warn};
-use openssl_sys as _;
+
+#[cfg(feature = "native-tls")]
+use openssl_sys as _; // required for vendored-openssl feature
+
 use options::LYCHEE_CONFIG_FILE;
-// required for vendored-openssl feature
 use ring as _; // required for apple silicon
 
+use lychee_lib::BasicAuthExtractor;
 use lychee_lib::Collector;
+use lychee_lib::CookieJar;
 
 mod archive;
 mod cache;
@@ -172,9 +176,14 @@ fn load_config() -> Result<LycheeOptions> {
         opts.config.exclude.append(&mut read_lines(&lycheeignore)?);
     }
 
-    // TODO: Remove this warning and the parameter in a future release
+    // TODO: Remove this warning and the parameter with 1.0
     if !&opts.config.exclude_file.is_empty() {
-        warn!("WARNING: `--exclude-file` is deprecated and will soon be removed; use `{}` file to ignore URL patterns instead. To exclude paths of files and directories, use `--exclude-path`.", LYCHEE_IGNORE_FILE);
+        warn!("WARNING: `--exclude-file` is deprecated and will soon be removed; use the `{}` file to ignore URL patterns instead. To exclude paths of files and directories, use `--exclude-path`.", LYCHEE_IGNORE_FILE);
+    }
+
+    // TODO: Remove this warning and the parameter with 1.0
+    if opts.config.exclude_mail {
+        warn!("WARNING: `--exclude-mail` is deprecated and will soon be removed; E-Mail is no longer checked by default. Use `--include-mail` to enable E-Mail checking.");
     }
 
     // Load excludes from file
@@ -186,6 +195,14 @@ fn load_config() -> Result<LycheeOptions> {
     Ok(opts)
 }
 
+/// Load cookie jar from path (if exists)
+fn load_cookie_jar(cfg: &Config) -> Result<Option<CookieJar>> {
+    match &cfg.cookie_jar {
+        Some(path) => Ok(CookieJar::load(path.clone()).map(Some)?),
+        None => Ok(None),
+    }
+}
+
 #[must_use]
 /// Load cache (if exists and is still valid)
 /// This returns an `Option` as starting without a cache is a common scenario
@@ -273,20 +290,46 @@ fn underlying_io_error_kind(error: &Error) -> Option<io::ErrorKind> {
 /// Run lychee on the given inputs
 async fn run(opts: &LycheeOptions) -> Result<i32> {
     let inputs = opts.inputs()?;
-    let requests = Collector::new(opts.config.base.clone())
+
+    let mut collector = Collector::new(opts.config.base.clone())
         .skip_missing_inputs(opts.config.skip_missing)
         .include_verbatim(opts.config.include_verbatim)
         // File a bug if you rely on this envvar! It's going to go away eventually.
-        .use_html5ever(std::env::var("LYCHEE_USE_HTML5EVER").map_or(false, |x| x == "1"))
-        .collect_links(inputs)
-        .await;
-    let client = client::create(&opts.config)?;
+        .use_html5ever(std::env::var("LYCHEE_USE_HTML5EVER").map_or(false, |x| x == "1"));
+
+    if opts.config.dump_inputs {
+        let sources = collector.collect_sources(inputs).await;
+        let exit_code = commands::dump_inputs(sources, opts.config.output.as_ref()).await?;
+
+        return Ok(exit_code as i32);
+    }
+
+    collector = if let Some(ref basic_auth) = opts.config.basic_auth {
+        collector.basic_auth_extractor(BasicAuthExtractor::new(basic_auth)?)
+    } else {
+        collector
+    };
+
+    let requests = collector.collect_links(inputs).await;
+
     let cache = load_cache(&opts.config).unwrap_or_default();
     let cache = Arc::new(cache);
 
+    let cookie_jar = load_cookie_jar(&opts.config).with_context(|| {
+        format!(
+            "Cannot load cookie jar from path `{}`",
+            opts.config
+                .cookie_jar
+                .as_ref()
+                .map_or_else(|| "<none>".to_string(), |p| p.display().to_string())
+        )
+    })?;
+
     let response_formatter: Box<dyn ResponseFormatter> =
         formatters::get_formatter(&opts.config.format);
 
+    let client = client::create(&opts.config, cookie_jar.as_deref())?;
+
     let params = CommandParams {
         client,
         cache,
@@ -338,6 +381,12 @@ async fn run(opts: &LycheeOptions) -> Result<i32> {
         if opts.config.cache {
             cache.store(LYCHEE_CACHE_FILE)?;
         }
+
+        if let Some(cookie_jar) = cookie_jar.as_ref() {
+            info!("Saving cookie jar");
+            cookie_jar.save().context("Cannot save cookie jar")?;
+        }
+
         exit_code
     };
 
diff --git a/lychee-bin/src/options.rs b/lychee-bin/src/options.rs
index fb4377b..52c2b2e 100644
--- a/lychee-bin/src/options.rs
+++ b/lychee-bin/src/options.rs
@@ -5,8 +5,8 @@ use anyhow::{anyhow, Context, Error, Result};
 use clap::{arg, builder::TypedValueParser, Parser};
 use const_format::{concatcp, formatcp};
 use lychee_lib::{
-    Base, Input, DEFAULT_MAX_REDIRECTS, DEFAULT_MAX_RETRIES, DEFAULT_RETRY_WAIT_TIME_SECS,
-    DEFAULT_TIMEOUT_SECS, DEFAULT_USER_AGENT,
+    Base, BasicAuthSelector, Input, DEFAULT_MAX_REDIRECTS, DEFAULT_MAX_RETRIES,
+    DEFAULT_RETRY_WAIT_TIME_SECS, DEFAULT_TIMEOUT_SECS, DEFAULT_USER_AGENT,
 };
 use secrecy::{ExposeSecret, SecretString};
 use serde::Deserialize;
@@ -181,6 +181,12 @@ pub(crate) struct Config {
     #[serde(default)]
     pub(crate) dump: bool,
 
+    /// Don't perform any link extraction and checking.
+    /// Instead, dump all input sources from which links would be collected
+    #[arg(long)]
+    #[serde(default)]
+    pub(crate) dump_inputs: bool,
+
     /// Specify the use of a specific web archive.
     /// Can be used in combination with `--suggest`
     #[arg(long, value_parser = clap::builder::PossibleValuesParser::new(Archive::VARIANTS).map(|s| s.parse::<Archive>().unwrap()))]
@@ -276,10 +282,16 @@ pub(crate) struct Config {
     pub(crate) exclude_loopback: bool,
 
     /// Exclude all mail addresses from checking
+    /// (deprecated; excluded by default)
     #[arg(long)]
     #[serde(default)]
     pub(crate) exclude_mail: bool,
 
+    /// Also check email addresses
+    #[arg(long)]
+    #[serde(default)]
+    pub(crate) include_mail: bool,
+
     /// Remap URI matching pattern to different URI
     #[serde(default)]
     #[arg(long)]
@@ -295,6 +307,11 @@ pub(crate) struct Config {
     #[serde(default)]
     pub(crate) accept: Option<HashSet<u16>>,
 
+    /// Enable the checking of fragments in links.
+    #[arg(long)]
+    #[serde(default)]
+    pub(crate) include_fragments: bool,
+
     /// Website timeout in seconds from connect to response finished
     #[arg(short, long, default_value = &TIMEOUT_STR)]
     #[serde(default = "timeout")]
@@ -317,10 +334,10 @@ pub(crate) struct Config {
     #[serde(default)]
     pub(crate) base: Option<Base>,
 
-    /// Basic authentication support. E.g. `username:password`
+    /// Basic authentication support. E.g. `http://example.com username:password`
     #[arg(long)]
     #[serde(default)]
-    pub(crate) basic_auth: Option<String>,
+    pub(crate) basic_auth: Option<Vec<BasicAuthSelector>>,
 
     /// GitHub API token to use when checking github.com links, to avoid rate limiting
     #[arg(long, env = "GITHUB_TOKEN", hide_env_values = true)]
@@ -356,6 +373,13 @@ pub(crate) struct Config {
     #[arg(long)]
     #[serde(default)]
     pub(crate) require_https: bool,
+
+    /// Tell lychee to read cookies from the given file.
+    /// Cookies will be stored in the cookie jar and sent with requests.
+    /// New cookies will be stored in the cookie jar and existing cookies will be updated.
+    #[arg(long)]
+    #[serde(default)]
+    pub(crate) cookie_jar: Option<PathBuf>,
 }
 
 impl Config {
@@ -406,6 +430,8 @@ impl Config {
             glob_ignore_case: false;
             output: None;
             require_https: false;
+            cookie_jar: None;
+            include_fragments: false;
         }
 
         if self
diff --git a/lychee-bin/src/parse.rs b/lychee-bin/src/parse.rs
index a60769a..fddb7c4 100644
--- a/lychee-bin/src/parse.rs
+++ b/lychee-bin/src/parse.rs
@@ -1,5 +1,5 @@
 use anyhow::{anyhow, Context, Result};
-use headers::{authorization::Basic, Authorization, HeaderMap, HeaderName};
+use headers::{HeaderMap, HeaderName};
 use lychee_lib::{remap::Remaps, Base};
 use std::{collections::HashSet, time::Duration};
 
@@ -36,18 +36,6 @@ pub(crate) fn parse_remaps(remaps: &[String]) -> Result<Remaps> {
         .context("Remaps must be of the form '<pattern> <uri>' (separated by whitespace)")
 }
 
-/// Parse a HTTP basic auth header into username and password
-pub(crate) fn parse_basic_auth(auth: &str) -> Result<Authorization<Basic>> {
-    let params: Vec<_> = auth.split(':').collect();
-    if params.len() != 2 {
-        return Err(anyhow!(
-            "Basic auth value must be of the form username:password, got {}",
-            auth
-        ));
-    }
-    Ok(Authorization::basic(params[0], params[1]))
-}
-
 pub(crate) fn parse_base(src: &str) -> Result<Base, lychee_lib::ErrorKind> {
     Base::try_from(src)
 }
@@ -71,9 +59,9 @@ pub(crate) fn parse_statuscodes(accept: &str) -> Result<HashSet<u16>> {
 mod tests {
     use std::collections::HashSet;
 
-    use headers::{HeaderMap, HeaderMapExt};
+    use headers::HeaderMap;
     use regex::Regex;
-    use reqwest::{header, Url};
+    use reqwest::header;
 
     use super::*;
 
@@ -91,21 +79,6 @@ mod tests {
         assert_eq!(actual, expected);
     }
 
-    #[test]
-    fn test_parse_basic_auth() {
-        let mut expected = HeaderMap::new();
-        expected.insert(
-            header::AUTHORIZATION,
-            "Basic YWxhZGluOmFicmV0ZXNlc2Ftbw==".parse().unwrap(),
-        );
-
-        let mut actual = HeaderMap::new();
-        let auth_header = parse_basic_auth("aladin:abretesesamo").unwrap();
-        actual.typed_insert(auth_header);
-
-        assert_eq!(expected, actual);
-    }
-
     #[test]
     fn test_parse_remap() {
         let remaps =
@@ -116,6 +89,6 @@ mod tests {
             pattern.to_string(),
             Regex::new("https://example.com").unwrap().to_string()
         );
-        assert_eq!(url, Url::try_from("http://127.0.0.1:8080").unwrap());
+        assert_eq!(url, "http://127.0.0.1:8080");
     }
 }
diff --git a/lychee-bin/tests/cli.rs b/lychee-bin/tests/cli.rs
index f96da96..8147887 100644
--- a/lychee-bin/tests/cli.rs
+++ b/lychee-bin/tests/cli.rs
@@ -14,9 +14,12 @@ mod cli {
     use lychee_lib::{InputSource, ResponseBody};
     use predicates::str::{contains, is_empty};
     use pretty_assertions::assert_eq;
+    use regex::Regex;
     use serde::Serialize;
     use serde_json::Value;
+    use tempfile::NamedTempFile;
     use uuid::Uuid;
+    use wiremock::{matchers::basic_auth, Mock, ResponseTemplate};
 
     type Result<T> = std::result::Result<T, Box<dyn Error>>;
 
@@ -119,16 +122,29 @@ mod cli {
     }
 
     #[test]
-    fn test_exclude_email() -> Result<()> {
+    fn test_email() -> Result<()> {
         test_json_output!(
             "TEST_EMAIL.md",
             MockResponseStats {
-                total: 6,
-                excludes: 4,
-                successful: 2,
+                total: 5,
+                excludes: 0,
+                successful: 5,
                 ..MockResponseStats::default()
             },
-            "--exclude-mail"
+            "--include-mail"
+        )
+    }
+
+    #[test]
+    fn test_exclude_email_by_default() -> Result<()> {
+        test_json_output!(
+            "TEST_EMAIL.md",
+            MockResponseStats {
+                total: 5,
+                excludes: 3,
+                successful: 2,
+                ..MockResponseStats::default()
+            }
         )
     }
 
@@ -139,6 +155,7 @@ mod cli {
 
         cmd.arg("--dump")
             .arg(input)
+            .arg("--include-mail")
             .assert()
             .success()
             .stdout(contains("hello@example.org?subject=%5BHello%5D"));
@@ -153,6 +170,7 @@ mod cli {
 
         cmd.arg("--dump")
             .arg(input)
+            .arg("--include-mail")
             .assert()
             .success()
             .stdout(contains("hello@example.org?subject=%5BHello%5D"));
@@ -205,8 +223,8 @@ mod cli {
             .env_clear()
             .assert()
             .success()
-            .stdout(contains("3 Total"))
-            .stdout(contains("3 OK"));
+            .stdout(contains("4 Total"))
+            .stdout(contains("4 OK"));
     }
 
     #[test]
@@ -225,7 +243,7 @@ mod cli {
     }
 
     #[test]
-    fn test_cratesio_quirk() {
+    fn test_crates_io_quirk() {
         let url = "https://crates.io/crates/lychee";
 
         main_command()
@@ -240,8 +258,10 @@ mod cli {
     }
 
     #[test]
-    #[ignore = "Twitter quirk works locally but is flaky on Github (timeout)"]
-    fn test_twitter_quirk() {
+    // Exclude Twitter links because they require login to view tweets.
+    // https://techcrunch.com/2023/06/30/twitter-now-requires-an-account-to-view-tweets/
+    // https://github.com/zedeus/nitter/issues/919
+    fn test_ignored_hosts() {
         let url = "https://twitter.com/zarfeblong/status/1339742840142872577";
 
         main_command()
@@ -252,7 +272,7 @@ mod cli {
             .assert()
             .success()
             .stdout(contains("1 Total"))
-            .stdout(contains("1 OK"));
+            .stdout(contains("1 Excluded"));
     }
 
     #[tokio::test]
@@ -470,8 +490,9 @@ mod cli {
         test_json_output!(
             "TEST.md",
             MockResponseStats {
-                total: 11,
-                successful: 11,
+                total: 12,
+                successful: 10,
+                excludes: 2,
                 ..MockResponseStats::default()
             }
         )
@@ -487,6 +508,7 @@ mod cli {
         cmd.arg("--output")
             .arg(&outfile)
             .arg("--dump")
+            .arg("--include-mail")
             .arg(test_path)
             .assert()
             .success();
@@ -497,7 +519,7 @@ mod cli {
         // Running the command from the command line will print 9 links,
         // because the actual `--dump` command filters out the two
         // http(s)://example.com links
-        assert_eq!(output.lines().count(), 11);
+        assert_eq!(output.lines().count(), 12);
         fs::remove_file(outfile)?;
         Ok(())
     }
@@ -513,7 +535,7 @@ mod cli {
             .arg(".*")
             .assert()
             .success()
-            .stdout(contains("11 Excluded"));
+            .stdout(contains("12 Excluded"));
 
         Ok(())
     }
@@ -526,45 +548,11 @@ mod cli {
         cmd.arg(test_path)
             .arg("--exclude")
             .arg("https://en.wikipedia.org/*")
+            .arg("--exclude")
             .arg("https://ldra.com/")
             .assert()
             .success()
-            .stdout(contains("2 Excluded"));
-
-        Ok(())
-    }
-
-    #[test]
-    fn test_exclude_file() -> Result<()> {
-        let mut cmd = main_command();
-        let test_path = fixtures_path().join("TEST.md");
-        let excludes_path = fixtures_path().join("TEST_EXCLUDE_1.txt");
-
-        cmd.arg(test_path)
-            .arg("--exclude-file")
-            .arg(excludes_path)
-            .assert()
-            .success()
-            .stdout(contains("2 Excluded"));
-
-        Ok(())
-    }
-
-    #[test]
-    fn test_multiple_exclude_files() -> Result<()> {
-        let mut cmd = main_command();
-        let test_path = fixtures_path().join("TEST.md");
-        let excludes_path1 = fixtures_path().join("TEST_EXCLUDE_1.txt");
-        let excludes_path2 = fixtures_path().join("TEST_EXCLUDE_2.txt");
-
-        cmd.arg(test_path)
-            .arg("--exclude-file")
-            .arg(excludes_path1)
-            .arg("--exclude-file")
-            .arg(excludes_path2)
-            .assert()
-            .success()
-            .stdout(contains("3 Excluded"));
+            .stdout(contains("4 Excluded"));
 
         Ok(())
     }
@@ -878,6 +866,60 @@ mod cli {
         Ok(())
     }
 
+    /// Unknown status codes should be skipped and not cached by default
+    /// The reason is that we don't know if they are valid or not
+    /// and even if they are invalid, we don't know if they will be valid in the
+    /// future.
+    ///
+    /// Since we cannot test this with our mock server (because hyper panics on
+    /// invalid status codes) we use LinkedIn as a test target.
+    ///
+    /// Unfortunately, LinkedIn does not always return 999, so this is a flaky
+    /// test. We only check that the cache file doesn't contain any invalid
+    /// status codes.
+    #[tokio::test]
+    async fn test_skip_cache_unknown_status_code() -> Result<()> {
+        let base_path = fixtures_path().join("cache");
+        let cache_file = base_path.join(LYCHEE_CACHE_FILE);
+
+        // Unconditionally remove cache file if it exists
+        let _ = fs::remove_file(&cache_file);
+
+        // https://linkedin.com returns 999 for unknown status codes
+        // use this as a test target
+        let unknown_url = "https://www.linkedin.com/company/corrode";
+
+        // run first without cache to generate the cache file
+        main_command()
+            .current_dir(&base_path)
+            .write_stdin(unknown_url.to_string())
+            .arg("--cache")
+            .arg("--verbose")
+            .arg("--no-progress")
+            .arg("--")
+            .arg("-")
+            .assert()
+            // LinkedIn does not always return 999, so we cannot check for that
+            // .stderr(contains(format!("[999] {unknown_url} | Unknown status")))
+            ;
+
+        // If the status code was 999, the cache file should be empty
+        // because we do not want to cache unknown status codes
+        let buf = fs::read(&cache_file).unwrap();
+        if !buf.is_empty() {
+            let data = String::from_utf8(buf)?;
+            // The cache file should not contain any invalid status codes
+            // In that case, we expect a single entry with status code 200
+            assert!(!data.contains("999"));
+            assert!(data.contains("200"));
+        }
+
+        // clear the cache file
+        fs::remove_file(&cache_file)?;
+
+        Ok(())
+    }
+
     #[test]
     fn test_verbatim_skipped_by_default() -> Result<()> {
         let mut cmd = main_command();
@@ -1072,6 +1114,42 @@ mod cli {
         Ok(())
     }
 
+    #[test]
+    fn test_remap_capture() -> Result<()> {
+        let mut cmd = main_command();
+
+        cmd.arg("--dump")
+            .arg("--remap")
+            .arg("https://example.com/(.*) http://example.org/$1")
+            .arg("--")
+            .arg("-")
+            .write_stdin("https://example.com/foo\n")
+            .env_clear()
+            .assert()
+            .success()
+            .stdout(contains("http://example.org/foo"));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_remap_named_capture() -> Result<()> {
+        let mut cmd = main_command();
+
+        cmd.arg("--dump")
+            .arg("--remap")
+            .arg("https://github.com/(?P<org>.*)/(?P<repo>.*) https://gitlab.com/$org/$repo")
+            .arg("--")
+            .arg("-")
+            .write_stdin("https://github.com/lycheeverse/lychee\n")
+            .env_clear()
+            .assert()
+            .success()
+            .stdout(contains("https://gitlab.com/lycheeverse/lychee"));
+
+        Ok(())
+    }
+
     #[test]
     fn test_excluded_paths() -> Result<()> {
         let test_path = fixtures_path().join("exclude-path");
@@ -1152,17 +1230,220 @@ mod cli {
 
     #[test]
     fn test_suggests_url_alternatives() -> Result<()> {
+        for _ in 0..3 {
+            // This can be flaky. Try up to 3 times
+            let mut cmd = main_command();
+            let input = fixtures_path().join("INTERNET_ARCHIVE.md");
+
+            cmd.arg("--no-progress").arg("--suggest").arg(input);
+
+            // Run he command and check if the output contains the expected
+            // suggestions
+            let assert = cmd.assert();
+            let output = assert.get_output();
+
+            // We're looking for a suggestion that
+            // - starts with http://web.archive.org/web/
+            // - ends with google.com/jobs.html
+            let re = Regex::new(r"http://web\.archive\.org/web/.*google\.com/jobs\.html").unwrap();
+            if re.is_match(&String::from_utf8_lossy(&output.stdout)) {
+                // Test passed
+                return Ok(());
+            } else {
+                // Wait for a second before retrying
+                std::thread::sleep(std::time::Duration::from_secs(1));
+            }
+        }
+
+        // If we reached here, it means the test did not pass after multiple attempts
+        Err("Did not get the expected command output after multiple attempts.".into())
+    }
+
+    #[tokio::test]
+    async fn test_basic_auth() -> Result<()> {
+        let username = "username";
+        let password = "password123";
+
+        let mock_server = wiremock::MockServer::start().await;
+        Mock::given(basic_auth(username, password))
+            .respond_with(ResponseTemplate::new(200))
+            .mount(&mock_server)
+            .await;
+
+        // Configure the command to use the BasicAuthExtractor
+        main_command()
+            .arg("--verbose")
+            .arg("--basic-auth")
+            .arg(format!("{} {username}:{password}", mock_server.uri()))
+            .arg("-")
+            .write_stdin(mock_server.uri())
+            .assert()
+            .success()
+            .stdout(contains("1 Total"))
+            .stdout(contains("1 OK"));
+
+        Ok(())
+    }
+
+    #[tokio::test]
+    async fn test_multi_basic_auth() -> Result<()> {
+        let username1 = "username";
+        let password1 = "password123";
+        let mock_server1 = wiremock::MockServer::start().await;
+        Mock::given(basic_auth(username1, password1))
+            .respond_with(ResponseTemplate::new(200))
+            .mount(&mock_server1)
+            .await;
+
+        let username2 = "admin_user";
+        let password2 = "admin_pw";
+        let mock_server2 = wiremock::MockServer::start().await;
+
+        Mock::given(basic_auth(username2, password2))
+            .respond_with(ResponseTemplate::new(200))
+            .mount(&mock_server2)
+            .await;
+
+        // Configure the command to use the BasicAuthExtractor
+        main_command()
+            .arg("--verbose")
+            .arg("--basic-auth")
+            .arg(format!("{} {username1}:{password1}", mock_server1.uri()))
+            .arg("--basic-auth")
+            .arg(format!("{} {username2}:{password2}", mock_server2.uri()))
+            .arg("-")
+            .write_stdin(format!("{}\n{}", mock_server1.uri(), mock_server2.uri()))
+            .assert()
+            .success()
+            .stdout(contains("2 Total"))
+            .stdout(contains("2 OK"));
+
+        Ok(())
+    }
+
+    #[tokio::test]
+    async fn test_cookie_jar() -> Result<()> {
+        // Create a random cookie jar file
+        let cookie_jar = NamedTempFile::new()?;
+
         let mut cmd = main_command();
-        let input = fixtures_path().join("INTERNET_ARCHIVE.md");
+        cmd.arg("--cookie-jar")
+            .arg(cookie_jar.path().to_str().unwrap())
+            .arg("-")
+            // Using Google as a test target because I couldn't
+            // get the mock server to work with the cookie jar
+            .write_stdin("https://google.com")
+            .assert()
+            .success();
 
-        cmd.arg("--suggest")
-            .arg(input)
+        // check that the cookie jar file contains the expected cookies
+        let file = std::fs::File::open(cookie_jar.path()).map(std::io::BufReader::new)?;
+        let cookie_store = reqwest_cookie_store::CookieStore::load_json(file).unwrap();
+        let all_cookies = cookie_store.iter_any().collect::<Vec<_>>();
+
+        assert!(!all_cookies.is_empty());
+        assert!(all_cookies.iter().all(|c| c.domain() == Some("google.com")));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_dump_inputs_glob_md() -> Result<()> {
+        let pattern = fixtures_path().join("**/*.md");
+
+        let mut cmd = main_command();
+        cmd.arg("--dump-inputs")
+            .arg(pattern)
             .assert()
-            .failure()
-            .code(2)
-            .stdout(contains("Suggestions"))
-            .stdout(contains("http://web.archive.org/web/"));
+            .success()
+            .stdout(contains("fixtures/dump_inputs/subfolder/file2.md"))
+            .stdout(contains("fixtures/dump_inputs/markdown.md"));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_dump_inputs_glob_all() -> Result<()> {
+        let pattern = fixtures_path().join("**/*");
+
+        let mut cmd = main_command();
+        cmd.arg("--dump-inputs")
+            .arg(pattern)
+            .assert()
+            .success()
+            .stdout(contains("fixtures/dump_inputs/subfolder/test.html"))
+            .stdout(contains("fixtures/dump_inputs/subfolder/file2.md"))
+            .stdout(contains("fixtures/dump_inputs/subfolder"))
+            .stdout(contains("fixtures/dump_inputs/markdown.md"))
+            .stdout(contains("fixtures/dump_inputs/subfolder/example.bin"))
+            .stdout(contains("fixtures/dump_inputs/some_file.txt"));
 
         Ok(())
     }
+
+    #[test]
+    fn test_dump_inputs_url() -> Result<()> {
+        let mut cmd = main_command();
+        cmd.arg("--dump-inputs")
+            .arg("https://example.com")
+            .assert()
+            .success()
+            .stdout(contains("https://example.com"));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_dump_inputs_path() -> Result<()> {
+        let mut cmd = main_command();
+        cmd.arg("--dump-inputs")
+            .arg("fixtures")
+            .assert()
+            .success()
+            .stdout(contains("fixtures"));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_dump_inputs_stdin() -> Result<()> {
+        let mut cmd = main_command();
+        cmd.arg("--dump-inputs")
+            .arg("-")
+            .assert()
+            .success()
+            .stdout(contains("Stdin"));
+
+        Ok(())
+    }
+
+    #[test]
+    fn test_fragments() {
+        let mut cmd = main_command();
+        let input = fixtures_path().join("fragments");
+
+        cmd.arg("--verbose")
+            .arg("--include-fragments")
+            .arg(input)
+            .assert()
+            .failure()
+            .stderr(contains("fixtures/fragments/file1.md#fragment-1"))
+            .stderr(contains("fixtures/fragments/file1.md#fragment-2"))
+            .stderr(contains("fixtures/fragments/file2.md#custom-id"))
+            .stderr(contains("fixtures/fragments/file1.md#missing-fragment"))
+            .stderr(contains("fixtures/fragments/file2.md#fragment-1"))
+            .stderr(contains("fixtures/fragments/file1.md#kebab-case-fragment"))
+            .stderr(contains("fixtures/fragments/file2.md#missing-fragment"))
+            .stderr(contains("fixtures/fragments/empty_file#fragment"))
+            .stderr(contains("fixtures/fragments/file.html#a-word"))
+            .stderr(contains("fixtures/fragments/file.html#in-the-beginning"))
+            .stderr(contains("fixtures/fragments/file.html#in-the-end"))
+            .stderr(contains(
+                "fixtures/fragments/file1.md#kebab-case-fragment-1",
+            ))
+            .stdout(contains("13 Total"))
+            .stdout(contains("10 OK"))
+            // 3 failures because of missing fragments
+            .stdout(contains("3 Errors"));
+    }
 }
diff --git a/lychee-bin/tests/example_domains.rs b/lychee-bin/tests/example_domains.rs
index ade7c08..73ad747 100644
--- a/lychee-bin/tests/example_domains.rs
+++ b/lychee-bin/tests/example_domains.rs
@@ -32,6 +32,7 @@ mod cli {
 
         let cmd = cmd
             .arg(input)
+            .arg("--include-mail")
             .arg("--dump")
             .assert()
             .success()
diff --git a/lychee-lib/Cargo.toml b/lychee-lib/Cargo.toml
index 177e87e..09a816d 100644
--- a/lychee-lib/Cargo.toml
+++ b/lychee-lib/Cargo.toml
@@ -17,43 +17,45 @@ repository = "https://github.com/lycheeverse/lychee"
 version = "0.13.0"
 
 [dependencies]
-check-if-email-exists = "0.9.0"
+async-stream = "0.3.5"
+cached = "0.44.0"
+check-if-email-exists = { version = "0.9.0", optional = true }
 email_address = "0.2.4"
+futures = "0.3.28"
 glob = "0.3.1"
+headers = "0.3.8"
+html5ever = "0.26.0"
+html5gum = "0.5.7"
 http = "0.2.9"
-linkify = "0.9.0"
-openssl-sys = "0.9.87"
-pulldown-cmark = "0.9.2"
-regex = "1.8.1"
+hyper = "0.14.27"
+ip_network = "0.4.1"
+jwalk = "0.8.1"
+linkify = "0.10.0"
+log = "0.4.20"
+octocrab = "0.29.3"
+once_cell = "1.18.0"
+openssl-sys = { version = "0.9.91", optional = true }
+path-clean = "1.0.1"
+percent-encoding = "2.3.0"
+pulldown-cmark = "0.9.3"
+regex = "1.9.3"
 # Use trust-dns to avoid lookup failures on high concurrency
 # https://github.com/seanmonstar/reqwest/issues/296
-reqwest = { version = "0.11.17", features = ["gzip", "trust-dns"] }
+reqwest = { version = "0.11.18", default-features = false, features = ["gzip", "trust-dns", "cookies"] }
+reqwest_cookie_store = "0.6.0"
 # Make build work on Apple Silicon.
 # See https://github.com/briansmith/ring/issues/1163
 # This is necessary for the homebrew build
 # https://github.com/Homebrew/homebrew-core/pull/70216
 ring = "0.16.20"
-serde = { version = "1.0.163", features = ["derive"] }
-shellexpand = "3.1.0"
-typed-builder = "0.14.0"
-tokio = { version = "1.28.1", features = ["full"] }
-url = { version = "2.3.1", features = ["serde"] }
-log = "0.4.17"
-path-clean = "1.0.1"
-percent-encoding = "2.2.0"
-async-stream = "0.3.5"
-jwalk = "0.8.1"
-cached = "0.43.0"
-once_cell = "1.17.1"
-thiserror = "1.0.40"
-futures = "0.3.27"
-lazy_static = "1.4.0"
-html5ever = "0.26.0"
-html5gum = "0.5.2"
-octocrab = "0.21.0"
-ip_network = "0.4.1"
 secrecy = "0.8.0"
-hyper = "0.14.26"
+serde = { version = "1.0.185", features = ["derive"] }
+serde_with = "3.3.0"
+shellexpand = "3.1.0"
+thiserror = "1.0.47"
+tokio = { version = "1.32.0", features = ["full"] }
+typed-builder = "0.15.2"
+url = { version = "2.4.0", features = ["serde"] }
 
 [dependencies.par-stream]
 version = "0.10.2"
@@ -61,17 +63,29 @@ features = ["runtime-tokio"]
 
 [dev-dependencies]
 doc-comment = "0.3.3"
-tempfile = "3.5.0"
-wiremock = "0.5.18"
-serde_json = "1.0.96"
+tempfile = "3.8.0"
+wiremock = "0.5.19"
+serde_json = "1.0.105"
 
 [features]
-# Vendor OpenSSL instead of dynamically linking it at runtime.
+
+# Enable checking email addresses. Requires the native-tls feature.
+email-check = ["check-if-email-exists"]
+
+# Use platform-native TLS.
+native-tls = ["openssl-sys", "reqwest/native-tls"]
+
+# Use Rustls TLS.
+rustls-tls = ["reqwest/rustls-tls-native-roots"]
+
+# Compile and statically link a copy of OpenSSL.
 vendored-openssl = ["openssl-sys/vendored"]
-# Feature flag to include checking reserved example domains 
+
+# Feature flag to include checking reserved example domains
 # as per RFC 2606, section 3.
 # This flag is off by default and only exists to allow example domains in
 # integration tests, which don't respect `#[cfg(test)]`.
 # See https://users.rust-lang.org/t/36630
 check_example_domains = []
-default = []
+
+default = ["native-tls", "email-check"]
diff --git a/lychee-lib/src/basic_auth/mod.rs b/lychee-lib/src/basic_auth/mod.rs
new file mode 100644
index 0000000..0cd4de9
--- /dev/null
+++ b/lychee-lib/src/basic_auth/mod.rs
@@ -0,0 +1,162 @@
+use regex::RegexSet;
+use thiserror::Error;
+
+use crate::{BasicAuthCredentials, BasicAuthSelector, Uri};
+
+#[derive(Debug, Error)]
+pub enum BasicAuthExtractorError {
+    #[error("RegexSet error")]
+    RegexSetError(#[from] regex::Error),
+}
+
+/// Extracts basic auth credentials from a given URI.
+/// Credentials are extracted if the URI matches one of the provided
+/// [`BasicAuthSelector`] instances.
+#[derive(Debug, Clone)]
+pub struct BasicAuthExtractor {
+    credentials: Vec<BasicAuthCredentials>,
+    regex_set: RegexSet,
+}
+
+impl BasicAuthExtractor {
+    /// Creates a new [`BasicAuthExtractor`] from a list of [`BasicAuthSelector`]
+    /// instances.
+    ///
+    /// # Errors
+    ///
+    /// Returns an error if the provided [`BasicAuthSelector`] instances contain
+    /// invalid regular expressions.
+    ///
+    /// # Examples
+    ///
+    /// ```
+    /// use lychee_lib::{BasicAuthExtractor, BasicAuthSelector};
+    /// use std::str::FromStr;
+    ///
+    /// let selectors = vec![
+    ///    BasicAuthSelector::from_str("http://example.com foo:bar").unwrap(),
+    /// ];
+    ///
+    /// let extractor = BasicAuthExtractor::new(selectors).unwrap();
+    /// ```
+    pub fn new<T: AsRef<[BasicAuthSelector]>>(
+        selectors: T,
+    ) -> Result<Self, BasicAuthExtractorError> {
+        let mut raw_uri_regexes = Vec::new();
+        let mut credentials = Vec::new();
+
+        for selector in selectors.as_ref() {
+            raw_uri_regexes.push(selector.raw_uri_regex.clone());
+            credentials.push(selector.credentials.clone());
+        }
+
+        let regex_set = RegexSet::new(raw_uri_regexes)?;
+
+        Ok(Self {
+            credentials,
+            regex_set,
+        })
+    }
+
+    /// Matches the provided URI against the [`RegexSet`] and returns
+    /// [`BasicAuthCredentials`] if the a match was found. It should be noted
+    /// that only the first match will be used to return the appropriate
+    /// credentials.
+    pub(crate) fn matches(&self, uri: &Uri) -> Option<BasicAuthCredentials> {
+        let matches: Vec<_> = self.regex_set.matches(uri.as_str()).into_iter().collect();
+
+        if matches.is_empty() {
+            return None;
+        }
+
+        Some(self.credentials[matches[0]].clone())
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use std::str::FromStr;
+
+    use super::*;
+
+    #[test]
+    fn test_basic_auth_extractor_new() {
+        let selector_str = "http://example.com foo:bar";
+        let selector = BasicAuthSelector::from_str(selector_str).unwrap();
+        let extractor = BasicAuthExtractor::new([selector]).unwrap();
+
+        assert_eq!(extractor.credentials.len(), 1);
+        assert_eq!(extractor.credentials[0].username, "foo");
+        assert_eq!(extractor.credentials[0].password, "bar");
+    }
+
+    #[test]
+    fn test_basic_auth_extractor_matches() {
+        let selector_str = "http://example.com foo:bar";
+        let selector = BasicAuthSelector::from_str(selector_str).unwrap();
+        let extractor = BasicAuthExtractor::new([selector]).unwrap();
+
+        let uri = Uri::try_from("http://example.com").unwrap();
+        let credentials = extractor.matches(&uri).unwrap();
+
+        assert_eq!(credentials.username, "foo");
+        assert_eq!(credentials.password, "bar");
+    }
+
+    #[test]
+    fn test_basic_auth_extractor_matches_multiple() {
+        let example_com = BasicAuthSelector::from_str("http://example.com foo1:bar1").unwrap();
+        let example_org = BasicAuthSelector::from_str("http://example.org foo2:bar2").unwrap();
+        let extractor = BasicAuthExtractor::new([example_com, example_org]).unwrap();
+
+        let uri = Uri::try_from("http://example.org").unwrap();
+        let credentials = extractor.matches(&uri).unwrap();
+
+        assert_eq!(credentials.username, "foo2");
+        assert_eq!(credentials.password, "bar2");
+    }
+
+    #[test]
+    fn test_basic_auth_regex_match() {
+        let selector_str = "https?://example.com/(.*)/bar foo:bar";
+        let selector = BasicAuthSelector::from_str(selector_str).unwrap();
+        let extractor = BasicAuthExtractor::new([selector]).unwrap();
+
+        let uri = Uri::try_from("http://example.com/foo/bar").unwrap();
+        let credentials = extractor.matches(&uri).unwrap();
+
+        assert_eq!(credentials.username, "foo");
+        assert_eq!(credentials.password, "bar");
+
+        let uri = Uri::try_from("https://example.com/baz/bar").unwrap();
+        let credentials = extractor.matches(&uri).unwrap();
+
+        assert_eq!(credentials.username, "foo");
+        assert_eq!(credentials.password, "bar");
+    }
+
+    #[test]
+    fn test_basic_auth_first_match_wins() {
+        let example_com = BasicAuthSelector::from_str("http://example.com foo1:bar1").unwrap();
+        let example_org = BasicAuthSelector::from_str("http://example.com foo2:bar2").unwrap();
+        let extractor = BasicAuthExtractor::new([example_com, example_org]).unwrap();
+
+        let uri = Uri::try_from("http://example.com").unwrap();
+        let credentials = extractor.matches(&uri).unwrap();
+
+        assert_eq!(credentials.username, "foo1");
+        assert_eq!(credentials.password, "bar1");
+    }
+
+    #[test]
+    fn test_basic_auth_extractor_no_match() {
+        let selector_str = "http://example.com foo:bar";
+        let selector = BasicAuthSelector::from_str(selector_str).unwrap();
+        let extractor = BasicAuthExtractor::new([selector]).unwrap();
+
+        let uri = Uri::try_from("http://test.com").unwrap();
+        let credentials = extractor.matches(&uri);
+
+        assert!(credentials.is_none());
+    }
+}
diff --git a/lychee-lib/src/client.rs b/lychee-lib/src/client.rs
index a8201a7..6793f46 100644
--- a/lychee-lib/src/client.rs
+++ b/lychee-lib/src/client.rs
@@ -13,17 +13,20 @@
     clippy::default_trait_access,
     clippy::used_underscore_binding
 )]
-use std::{collections::HashSet, time::Duration};
+use std::{collections::HashSet, path::Path, sync::Arc, time::Duration};
 
+#[cfg(all(feature = "email-check", feature = "native-tls"))]
 use check_if_email_exists::{check_email, CheckEmailInput, Reachable};
+use headers::authorization::Credentials;
 use http::{
-    header::{HeaderMap, HeaderValue},
+    header::{HeaderMap, HeaderValue, AUTHORIZATION},
     StatusCode,
 };
-use log::debug;
+use log::{debug, warn};
 use octocrab::Octocrab;
 use regex::RegexSet;
-use reqwest::{header, Url};
+use reqwest::{header, redirect, Url};
+use reqwest_cookie_store::CookieStoreMutex;
 use secrecy::{ExposeSecret, SecretString};
 use typed_builder::TypedBuilder;
 
@@ -32,10 +35,14 @@ use crate::{
     quirks::Quirks,
     remap::Remaps,
     retry::RetryExt,
-    types::{mail, uri::github::GithubUri},
-    ErrorKind, Request, Response, Result, Status, Uri,
+    types::uri::github::GithubUri,
+    utils::fragment_checker::FragmentChecker,
+    BasicAuthCredentials, ErrorKind, Request, Response, Result, Status, Uri,
 };
 
+#[cfg(all(feature = "email-check", feature = "native-tls"))]
+use crate::types::mail;
+
 /// Default number of redirects before a request is deemed as failed, 5.
 pub const DEFAULT_MAX_REDIRECTS: usize = 5;
 /// Default number of retries before a request is deemed as failed, 3.
@@ -173,8 +180,8 @@ pub struct ClientBuilder {
     /// [IETF RFC 4291 section 2.5.3]: https://tools.ietf.org/html/rfc4291#section-2.5.3
     exclude_loopback_ips: bool,
 
-    /// When `true`, don't check mail addresses.
-    exclude_mail: bool,
+    /// When `true`, check mail addresses.
+    include_mail: bool,
 
     /// Maximum number of redirects per request before returning an error.
     ///
@@ -259,6 +266,14 @@ pub struct ClientBuilder {
     /// It has no effect on non-HTTP schemes or if the URL doesn't support
     /// HTTPS.
     require_https: bool,
+
+    /// Cookie store used for requests.
+    ///
+    /// See https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.cookie_store
+    cookie_jar: Option<Arc<CookieStoreMutex>>,
+
+    /// Enable the checking of fragments in links.
+    include_fragments: bool,
 }
 
 impl Default for ClientBuilder {
@@ -305,18 +320,33 @@ impl ClientBuilder {
             HeaderValue::from_static("chunked"),
         );
 
-        let builder = reqwest::ClientBuilder::new()
+        // Custom redirect policy to enable logging of redirects.
+        let max_redirects = self.max_redirects;
+        let redirect_policy = redirect::Policy::custom(move |attempt| {
+            if attempt.previous().len() > max_redirects {
+                attempt.error("too many redirects")
+            } else {
+                debug!("Redirecting to {}", attempt.url());
+                attempt.follow()
+            }
+        });
+
+        let mut builder = reqwest::ClientBuilder::new()
             .gzip(true)
             .default_headers(headers)
             .danger_accept_invalid_certs(self.allow_insecure)
             .connect_timeout(Duration::from_secs(CONNECT_TIMEOUT))
             .tcp_keepalive(Duration::from_secs(TCP_KEEPALIVE))
-            .redirect(reqwest::redirect::Policy::limited(self.max_redirects));
+            .redirect(redirect_policy);
+
+        if let Some(cookie_jar) = self.cookie_jar {
+            builder = builder.cookie_provider(cookie_jar);
+        }
 
-        let reqwest_client = (match self.timeout {
+        let reqwest_client = match self.timeout {
             Some(t) => builder.timeout(t),
             None => builder,
-        })
+        }
         .build()
         .map_err(ErrorKind::NetworkRequest)?;
 
@@ -341,7 +371,7 @@ impl ClientBuilder {
             exclude_private_ips: self.exclude_all_private || self.exclude_private_ips,
             exclude_link_local_ips: self.exclude_all_private || self.exclude_link_local_ips,
             exclude_loopback_ips: self.exclude_all_private || self.exclude_loopback_ips,
-            exclude_mail: self.exclude_mail,
+            include_mail: self.include_mail,
         };
 
         let quirks = Quirks::default();
@@ -357,6 +387,8 @@ impl ClientBuilder {
             accepted: self.accepted,
             require_https: self.require_https,
             quirks,
+            include_fragments: self.include_fragments,
+            fragment_checker: FragmentChecker::new(),
         })
     }
 }
@@ -376,7 +408,7 @@ pub struct Client {
     /// Optional remapping rules for URIs matching pattern.
     remaps: Option<Remaps>,
 
-    /// Rules to decided whether each link would be checked or ignored.
+    /// Rules to decided whether each link should be checked or ignored.
     filter: Filter,
 
     /// Maximum number of retries per request before returning an error.
@@ -403,6 +435,12 @@ pub struct Client {
 
     /// Override behaviors for certain known issues with special URIs.
     quirks: Quirks,
+
+    /// Enable the checking of fragments in links.
+    include_fragments: bool,
+
+    /// Caches Fragments
+    fragment_checker: FragmentChecker,
 }
 
 impl Client {
@@ -425,41 +463,45 @@ impl Client {
     {
         let Request {
             ref mut uri,
+            ref credentials,
             source,
             ..
         } = request.try_into()?;
 
-        self.remap(uri);
+        // Allow filtering based on element and attribute
+        // if !self.filter.is_allowed(uri) {
+        //     return Ok(Response::new(
+        //         uri.clone(),
+        //         Status::Excluded,
+        //         source,
+        //     ));
+        // }
 
-        // TODO: Allow filtering based on element and attribute
-        let status = if self.is_excluded(uri) {
-            Status::Excluded
-        } else if uri.is_file() {
-            self.check_file(uri)
-        } else if uri.is_mail() {
-            self.check_mail(uri).await
-        } else {
-            match self.check_website(uri).await {
-                Status::Ok(code) if self.require_https && uri.scheme() == "http" => {
-                    if self.check_website(&uri.to_https()?).await.is_success() {
-                        Status::Error(ErrorKind::InsecureURL(uri.clone()))
-                    } else {
-                        Status::Ok(code)
-                    }
-                }
-                s => s,
-            }
+        self.remap(uri)?;
+
+        if self.is_excluded(uri) {
+            return Ok(Response::new(uri.clone(), Status::Excluded, source));
+        }
+
+        let status = match uri.scheme() {
+            _ if uri.is_file() => self.check_file(uri).await,
+            _ if uri.is_mail() => self.check_mail(uri).await,
+            _ => self.check_website(uri, credentials).await?,
         };
 
         Ok(Response::new(uri.clone(), status, source))
     }
 
     /// Remap `uri` using the client-defined remapping rules.
-    pub fn remap(&self, uri: &mut Uri) {
-        // TODO: this should be logged (Lucius, Jan 2023)
+    ///
+    /// # Errors
+    ///
+    /// Returns an `Err` if the final, remapped `uri` is not a valid URI.
+    pub fn remap(&self, uri: &mut Uri) -> Result<()> {
         if let Some(ref remaps) = self.remaps {
-            remaps.remap(&mut uri.url);
+            uri.url = remaps.remap(&uri.url)?;
         }
+        Ok(())
     }
 
     /// Returns whether the given `uri` should be ignored from checking.
@@ -468,6 +510,38 @@ impl Client {
         self.filter.is_excluded(uri)
     }
 
+    /// Checks the given URI of a website.
+    ///
+    /// # Errors
+    ///
+    /// This returns an `Err` if
+    /// - The URI is invalid.
+    /// - The request failed.
+    /// - The response status code is not accepted.
+    /// - The URI cannot be converted to HTTPS.
+    pub async fn check_website(
+        &self,
+        uri: &Uri,
+        credentials: &Option<BasicAuthCredentials>,
+    ) -> Result<Status> {
+        match self.check_website_inner(uri, credentials).await {
+            Status::Ok(code) if self.require_https && uri.scheme() == "http" => {
+                if self
+                    .check_website_inner(&uri.to_https()?, credentials)
+                    .await
+                    .is_success()
+                {
+                    Ok(Status::Error(ErrorKind::InsecureURL(uri.clone())))
+                } else {
+                    // HTTPS is not available for this URI,
+                    // so the original HTTP URL is fine.
+                    Ok(Status::Ok(code))
+                }
+            }
+            s => Ok(s),
+        }
+    }
+
     /// Checks the given URI of a website.
     ///
     /// Unsupported schemes will be ignored
@@ -478,7 +552,11 @@ impl Client {
     /// - The URI is invalid.
     /// - The request failed.
     /// - The response status code is not accepted.
-    pub async fn check_website(&self, uri: &Uri) -> Status {
+    pub async fn check_website_inner(
+        &self,
+        uri: &Uri,
+        credentials: &Option<BasicAuthCredentials>,
+    ) -> Status {
         // Workaround for upstream reqwest panic
         if validate_url(&uri.url) {
             if matches!(uri.scheme(), "http" | "https") {
@@ -493,7 +571,7 @@ impl Client {
             return Status::Unsupported(ErrorKind::InvalidURI(uri.clone()));
         }
 
-        let status = self.retry_request(uri).await;
+        let status = self.retry_request(uri, credentials).await;
         if status.is_success() {
             return status;
         }
@@ -515,11 +593,11 @@ impl Client {
 
     /// Retry requests up to `max_retries` times
     /// with an exponential backoff.
-    async fn retry_request(&self, uri: &Uri) -> Status {
+    async fn retry_request(&self, uri: &Uri, credentials: &Option<BasicAuthCredentials>) -> Status {
         let mut retries: u64 = 0;
         let mut wait_time = self.retry_wait_time;
 
-        let mut status = self.check_default(uri).await;
+        let mut status = self.check_default(uri, credentials).await;
         while retries < self.max_retries {
             if status.is_success() || !status.should_retry() {
                 return status;
@@ -527,7 +605,7 @@ impl Client {
             retries += 1;
             tokio::time::sleep(wait_time).await;
             wait_time = wait_time.saturating_mul(2);
-            status = self.check_default(uri).await;
+            status = self.check_default(uri, credentials).await;
         }
         status
     }
@@ -566,12 +644,20 @@ impl Client {
     }
 
     /// Check a URI using [reqwest](https://github.com/seanmonstar/reqwest).
-    async fn check_default(&self, uri: &Uri) -> Status {
-        let request = match self
-            .reqwest_client
-            .request(self.method.clone(), uri.as_str())
-            .build()
-        {
+    async fn check_default(&self, uri: &Uri, credentials: &Option<BasicAuthCredentials>) -> Status {
+        let request = match credentials {
+            Some(credentials) => self
+                .reqwest_client
+                .request(self.method.clone(), uri.as_str())
+                .header(AUTHORIZATION, credentials.to_authorization().0.encode())
+                .build(),
+            None => self
+                .reqwest_client
+                .request(self.method.clone(), uri.as_str())
+                .build(),
+        };
+
+        let request = match request {
             Ok(r) => r,
             Err(e) => return e.into(),
         };
@@ -585,13 +671,30 @@ impl Client {
     }
 
     /// Check a `file` URI.
-    pub fn check_file(&self, uri: &Uri) -> Status {
-        if let Ok(path) = uri.url.to_file_path() {
-            if path.exists() {
-                return Status::Ok(StatusCode::OK);
+    pub async fn check_file(&self, uri: &Uri) -> Status {
+        let Ok(path) = uri.url.to_file_path() else {
+            return ErrorKind::InvalidFilePath(uri.clone()).into();
+        };
+        if !path.exists() {
+            return ErrorKind::InvalidFilePath(uri.clone()).into();
+        }
+        if self.include_fragments {
+            self.check_fragment(&path, uri).await
+        } else {
+            Status::Ok(StatusCode::OK)
+        }
+    }
+
+    /// Checks a `file` URI's fragment.
+    pub async fn check_fragment(&self, path: &Path, uri: &Uri) -> Status {
+        match self.fragment_checker.check(path, &uri.url).await {
+            Ok(true) => Status::Ok(StatusCode::OK),
+            Ok(false) => ErrorKind::InvalidFragment(uri.clone()).into(),
+            Err(err) => {
+                warn!("Skipping fragment check due to the following error: {err}");
+                Status::Ok(StatusCode::OK)
             }
         }
-        ErrorKind::InvalidFilePath(uri.clone()).into()
     }
 
     /// Check a mail address, or equivalently a `mailto` URI.
@@ -599,6 +702,7 @@ impl Client {
     /// URIs may contain query parameters (e.g. `contact@example.com?subject="Hello"`),
     /// which are ignored by this check. The are not part of the mail address
     /// and instead passed to a mail client.
+    #[cfg(all(feature = "email-check", feature = "native-tls"))]
     pub async fn check_mail(&self, uri: &Uri) -> Status {
         let address = uri.url.path().to_string();
         let input = CheckEmailInput::new(address);
@@ -610,6 +714,15 @@ impl Client {
             Status::Ok(StatusCode::OK)
         }
     }
+
+    /// Check a mail address, or equivalently a `mailto` URI.
+    ///
+    /// This implementation simply excludes all email addresses.
+    #[cfg(not(all(feature = "email-check", feature = "native-tls")))]
+    #[allow(clippy::unused_async)]
+    pub async fn check_mail(&self, _uri: &Uri) -> Status {
+        Status::Excluded
+    }
 }
 
 // Check if the given `Url` would cause `reqwest` to panic.
@@ -757,19 +870,21 @@ mod tests {
     }
 
     #[tokio::test]
-    async fn test_exclude_mail() {
+    async fn test_exclude_mail_by_default() {
         let client = ClientBuilder::builder()
-            .exclude_mail(false)
             .exclude_all_private(true)
             .build()
             .client()
             .unwrap();
-        assert!(!client.is_excluded(&Uri {
+        assert!(client.is_excluded(&Uri {
             url: "mailto://mail@example.com".try_into().unwrap()
         }));
+    }
 
+    #[tokio::test]
+    async fn test_include_mail() {
         let client = ClientBuilder::builder()
-            .exclude_mail(true)
+            .include_mail(false)
             .exclude_all_private(true)
             .build()
             .client()
@@ -777,6 +892,16 @@ mod tests {
         assert!(client.is_excluded(&Uri {
             url: "mailto://mail@example.com".try_into().unwrap()
         }));
+
+        let client = ClientBuilder::builder()
+            .include_mail(true)
+            .exclude_all_private(true)
+            .build()
+            .client()
+            .unwrap();
+        assert!(!client.is_excluded(&Uri {
+            url: "mailto://mail@example.com".try_into().unwrap()
+        }));
     }
 
     #[tokio::test]
@@ -835,7 +960,6 @@ mod tests {
             .unwrap();
         let _res = warm_up_client.check(mock_server.uri()).await.unwrap();
 
-        let start = Instant::now();
         let client = ClientBuilder::builder()
             .timeout(checker_timeout)
             .max_retries(3_u64)
@@ -853,6 +977,7 @@ mod tests {
         // 6. Retry after 200ms (total 360ms)
         // Total: 360ms
 
+        let start = Instant::now();
         let res = client.check(mock_server.uri()).await.unwrap();
         let end = start.elapsed();
 
@@ -860,7 +985,7 @@ mod tests {
 
         // on slow connections, this might take a bit longer than nominal
         // backed-off timeout (7 secs)
-        assert!((350..=450).contains(&end.as_millis()));
+        assert!((350..=550).contains(&end.as_millis()));
     }
 
     #[tokio::test]
@@ -895,7 +1020,7 @@ mod tests {
             .await;
 
         let client = ClientBuilder::builder()
-            .max_redirects(1_usize)
+            .max_redirects(0_usize)
             .build()
             .client()
             .unwrap();
@@ -904,7 +1029,7 @@ mod tests {
         assert!(res.status().is_failure());
 
         let client = ClientBuilder::builder()
-            .max_redirects(2_usize)
+            .max_redirects(1_usize)
             .build()
             .client()
             .unwrap();
diff --git a/lychee-lib/src/collector.rs b/lychee-lib/src/collector.rs
index dd4b500..9d94eb1 100644
--- a/lychee-lib/src/collector.rs
+++ b/lychee-lib/src/collector.rs
@@ -1,5 +1,6 @@
 use crate::{
-    extract::Extractor, types::uri::raw::RawUri, utils::request, Base, Input, Request, Result,
+    basic_auth::BasicAuthExtractor, extract::Extractor, types::uri::raw::RawUri, utils::request,
+    Base, Input, Request, Result,
 };
 use futures::{
     stream::{self, Stream},
@@ -11,10 +12,11 @@ use par_stream::ParStreamExt;
 /// It drives the link extraction from inputs
 #[derive(Debug, Clone)]
 pub struct Collector {
-    base: Option<Base>,
+    basic_auth_extractor: Option<BasicAuthExtractor>,
     skip_missing_inputs: bool,
     include_verbatim: bool,
     use_html5ever: bool,
+    base: Option<Base>,
 }
 
 impl Collector {
@@ -22,10 +24,11 @@ impl Collector {
     #[must_use]
     pub const fn new(base: Option<Base>) -> Self {
         Collector {
-            base,
+            basic_auth_extractor: None,
             skip_missing_inputs: false,
-            use_html5ever: false,
             include_verbatim: false,
+            use_html5ever: false,
+            base,
         }
     }
 
@@ -50,6 +53,24 @@ impl Collector {
         self
     }
 
+    /// Pass a [`BasicAuthExtractor`] which is capable to match found
+    /// URIs to basic auth credentials. These credentials get passed to the
+    /// request in question.
+    #[must_use]
+    #[allow(clippy::missing_const_for_fn)]
+    pub fn basic_auth_extractor(mut self, extractor: BasicAuthExtractor) -> Self {
+        self.basic_auth_extractor = Some(extractor);
+        self
+    }
+
+    /// Collect all sources from a list of [`Input`]s. For further details,
+    /// see also [`Input::get_sources`](crate::Input#method.get_sources).
+    pub async fn collect_sources(self, inputs: Vec<Input>) -> impl Stream<Item = Result<String>> {
+        stream::iter(inputs)
+            .par_then_unordered(None, move |input| async move { input.get_sources().await })
+            .flatten()
+    }
+
     /// Fetch all unique links from inputs
     /// All relative URLs get prefixed with `base` (if given).
     /// (This can be a directory or a base URL)
@@ -70,11 +91,14 @@ impl Collector {
             .par_then_unordered(None, move |content| {
                 // send to parallel worker
                 let base = base.clone();
+                let basic_auth_extractor = self.basic_auth_extractor.clone();
                 async move {
                     let content = content?;
+
                     let extractor = Extractor::new(self.use_html5ever, self.include_verbatim);
                     let uris: Vec<RawUri> = extractor.extract(&content);
-                    let requests = request::create(uris, &content, &base)?;
+
+                    let requests = request::create(uris, &content, &base, &basic_auth_extractor)?;
                     Result::Ok(stream::iter(requests.into_iter().map(Ok)))
                 }
             })
diff --git a/lychee-lib/src/extract/html5ever.rs b/lychee-lib/src/extract/html/html5ever.rs
similarity index 79%
rename from lychee-lib/src/extract/html5ever.rs
rename to lychee-lib/src/extract/html/html5ever.rs
index e226310..25ed226 100644
--- a/lychee-lib/src/extract/html5ever.rs
+++ b/lychee-lib/src/extract/html/html5ever.rs
@@ -4,7 +4,7 @@ use html5ever::{
     tokenizer::{Tag, TagKind, Token, TokenSink, TokenSinkResult, Tokenizer, TokenizerOpts},
 };
 
-use super::{is_verbatim_elem, plaintext::extract_plaintext};
+use super::{super::plaintext::extract_plaintext, is_email_link, is_verbatim_elem, srcset};
 use crate::types::uri::raw::RawUri;
 
 #[derive(Clone, Default)]
@@ -80,6 +80,19 @@ impl TokenSink for LinkExtractor {
                         None => extract_plaintext(&attr.value),
                         Some(urls) => urls
                             .into_iter()
+                            .filter(|url| {
+                                // Only accept email addresses, which occur in `href` attributes
+                                // and start with `mailto:`. Technically, email addresses could
+                                // also occur in plain text, but we don't want to extract those
+                                // because of the high false positive rate.
+                                //
+                                // This ignores links like `<img srcset="v2@1.5x.png">`
+                                let is_email = is_email_link(url);
+                                let is_mailto = url.starts_with("mailto:");
+                                let is_href = attr.name.local.as_ref() == "href";
+
+                                !is_email || (is_mailto && is_href)
+                            })
                             .map(|url| RawUri {
                                 text: url.to_string(),
                                 element: Some(name.to_string()),
@@ -144,17 +157,7 @@ impl LinkExtractor {
                 Some(vec![attr_value].into_iter())
             }
             (_, "srcset") => {
-                let mut urls = Vec::new();
-                for image_candidate_string in attr_value.trim().split(',') {
-                    for part in image_candidate_string.split_ascii_whitespace() {
-                        if part.is_empty() {
-                            continue;
-                        }
-                        urls.push(part);
-                        break;
-                    }
-                }
-                Some(urls.into_iter())
+                Some(srcset::parse(attr_value).into_iter())
             }
             _ => None,
         }
@@ -293,4 +296,61 @@ mod tests {
         let uris = extract_html(input, false);
         assert_eq!(uris, expected);
     }
+
+    #[test]
+    fn test_valid_email() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <a href="mailto:foo@bar.com">
+          </body>
+        </html>"#;
+
+        let expected = vec![RawUri {
+            text: "mailto:foo@bar.com".to_string(),
+            element: Some("a".to_string()),
+            attribute: Some("href".to_string()),
+        }];
+        let uris = extract_html(input, false);
+        assert_eq!(uris, expected);
+    }
+    #[test]
+    fn test_exclude_email_without_mailto() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <a href="foo@bar.com">
+          </body>
+        </html>"#;
+
+        let expected = vec![];
+        let uris = extract_html(input, false);
+        assert_eq!(uris, expected);
+    }
+
+    #[test]
+    fn test_email_false_positive() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <img srcset="v2@1.5x.png" alt="Wikipedia" width="200" height="183">
+          </body>
+        </html>"#;
+
+        let expected = vec![];
+        let uris = extract_html(input, false);
+        assert_eq!(uris, expected);
+    }
 }
diff --git a/lychee-lib/src/extract/html5gum.rs b/lychee-lib/src/extract/html/html5gum.rs
similarity index 72%
rename from lychee-lib/src/extract/html5gum.rs
rename to lychee-lib/src/extract/html/html5gum.rs
index 40c4bbf..9555bee 100644
--- a/lychee-lib/src/extract/html5gum.rs
+++ b/lychee-lib/src/extract/html/html5gum.rs
@@ -1,13 +1,15 @@
+use std::collections::HashSet;
+
 use html5gum::{Emitter, Error, State, Tokenizer};
 
-use super::is_verbatim_elem;
-use super::plaintext::extract_plaintext;
-use crate::types::uri::raw::RawUri;
+use super::{is_email_link, is_verbatim_elem, srcset};
+use crate::{extract::plaintext::extract_plaintext, types::uri::raw::RawUri};
 
 #[derive(Clone)]
 struct LinkExtractor {
     // note: what html5gum calls a tag, lychee calls an element
     links: Vec<RawUri>,
+    fragments: HashSet<String>,
     current_string: Vec<u8>,
     current_element_name: Vec<u8>,
     current_element_is_closing: bool,
@@ -27,9 +29,10 @@ unsafe fn from_utf8_unchecked(s: &[u8]) -> &str {
 }
 
 impl LinkExtractor {
-    pub(crate) const fn new(include_verbatim: bool) -> Self {
+    pub(crate) fn new(include_verbatim: bool) -> Self {
         LinkExtractor {
             links: Vec::new(),
+            fragments: HashSet::new(),
             current_string: Vec::new(),
             current_element_name: Vec::new(),
             current_element_is_closing: false,
@@ -75,17 +78,7 @@ impl LinkExtractor {
                 Some(vec![attr_value].into_iter())
             }
             (_, "srcset") => {
-                let mut urls = Vec::new();
-                for image_candidate_string in attr_value.trim().split(',') {
-                    for part in image_candidate_string.split_ascii_whitespace() {
-                        if part.is_empty() {
-                            continue;
-                        }
-                        urls.push(part);
-                        break;
-                    }
-                }
-                Some(urls.into_iter())
+                Some(srcset::parse(attr_value).into_iter())
             }
             _ => None,
         }
@@ -170,6 +163,19 @@ impl LinkExtractor {
                 None => extract_plaintext(value),
                 Some(urls) => urls
                     .into_iter()
+                    .filter(|url| {
+                        // Only accept email addresses, which occur in `href` attributes
+                        // and start with `mailto:`. Technically, email addresses could
+                        // also occur in plain text, but we don't want to extract those
+                        // because of the high false positive rate.
+                        //
+                        // This ignores links like `<img srcset="v2@1.5x.png">`
+                        let is_email = is_email_link(url);
+                        let is_mailto = url.starts_with("mailto:");
+                        let is_href = attr == "href";
+
+                        !is_email || (is_mailto && is_href)
+                    })
                     .map(|url| RawUri {
                         text: url.to_string(),
                         element: Some(name.to_string()),
@@ -179,6 +185,10 @@ impl LinkExtractor {
             };
 
             self.links.extend(new_urls);
+
+            if attr == "id" {
+                self.fragments.insert(value.to_string());
+            }
         }
 
         self.current_attribute_name.clear();
@@ -199,6 +209,11 @@ impl Emitter for &mut LinkExtractor {
         self.flush_current_characters();
     }
     fn emit_error(&mut self, _: Error) {}
+
+    #[inline]
+    fn should_emit_errors(&mut self) -> bool {
+        false
+    }
     fn pop_token(&mut self) -> Option<()> {
         None
     }
@@ -281,24 +296,44 @@ pub(crate) fn extract_html(buf: &str, include_verbatim: bool) -> Vec<RawUri> {
     assert!(tokenizer.next().is_none());
     extractor.links
 }
+
+/// Extract fragments from id attributes within a HTML string.
+pub(crate) fn extract_html_fragments(buf: &str) -> HashSet<String> {
+    let mut extractor = LinkExtractor::new(true);
+    let mut tokenizer = Tokenizer::new_with_emitter(buf, &mut extractor).infallible();
+    assert!(tokenizer.next().is_none());
+    extractor.fragments
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
 
     const HTML_INPUT: &str = r#"
 <html>
-    <body>
-        <p>This is a paragraph with some inline <code>https://example.com</code> and a normal <a href="https://example.org">example</a></p>
+    <body id="content">
+        <p>This is a paragraph with some inline <code id="inline-code">https://example.com</code> and a normal <a href="https://example.org">example</a></p>
         <pre>
         Some random text
         https://foo.com and http://bar.com/some/path
         Something else
         <a href="https://baz.org">example link inside pre</a>
         </pre>
-        <p><b>bold</b></p>
+        <p id="emphasis"><b>bold</b></p>
     </body>
 </html>"#;
 
+    #[test]
+    fn test_extract_fragments() {
+        let expected = HashSet::from([
+            "content".to_string(),
+            "inline-code".to_string(),
+            "emphasis".to_string(),
+        ]);
+        let actual = extract_html_fragments(HTML_INPUT);
+        assert_eq!(actual, expected);
+    }
+
     #[test]
     fn test_skip_verbatim() {
         let expected = vec![RawUri {
@@ -388,9 +423,9 @@ mod tests {
     #[test]
     fn test_include_nofollow() {
         let input = r#"
-        <a rel="nofollow" href="https://foo.com">do not follow me</a> 
-        <a rel="canonical,nofollow,dns-prefetch" href="https://example.com">do not follow me</a> 
-        <a href="https://example.org">i'm fine</a> 
+        <a rel="nofollow" href="https://foo.com">do not follow me</a>
+        <a rel="canonical,nofollow,dns-prefetch" href="https://example.com">do not follow me</a>
+        <a href="https://example.org">i'm fine</a>
         "#;
         let expected = vec![RawUri {
             text: "https://example.org".to_string(),
@@ -407,7 +442,7 @@ mod tests {
         <script>
         var foo = "https://example.com";
         </script>
-        <a href="https://example.org">i'm fine</a> 
+        <a href="https://example.org">i'm fine</a>
         "#;
         let expected = vec![RawUri {
             text: "https://example.org".to_string(),
@@ -417,4 +452,87 @@ mod tests {
         let uris = extract_html(input, false);
         assert_eq!(uris, expected);
     }
+
+    #[test]
+    fn test_valid_email() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <a href="mailto:foo@bar.com">
+          </body>
+        </html>"#;
+
+        let expected = vec![RawUri {
+            text: "mailto:foo@bar.com".to_string(),
+            element: Some("a".to_string()),
+            attribute: Some("href".to_string()),
+        }];
+        let uris = extract_html(input, false);
+        assert_eq!(uris, expected);
+    }
+
+    #[test]
+    fn test_exclude_email_without_mailto() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <a href="foo@bar.com">
+          </body>
+        </html>"#;
+
+        let uris = extract_html(input, false);
+        assert!(uris.is_empty());
+    }
+
+    #[test]
+    fn test_email_false_positive() {
+        let input = r#"<!DOCTYPE html>
+        <html lang="en-US">
+          <head>
+            <meta charset="utf-8">
+            <title>Test</title>
+          </head>
+          <body>
+            <img srcset="v2@1.5x.png" alt="Wikipedia" width="200" height="183">
+          </body>
+        </html>"#;
+
+        let uris = extract_html(input, false);
+        assert!(uris.is_empty());
+    }
+
+    #[test]
+    fn test_extract_srcset() {
+        let input = r#"
+            <img srcset="/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 640w, /cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 750w" src="/cdn-cgi/image/format=webp,width=3840/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg">
+        "#;
+
+        let expected = vec![RawUri {
+            text: "/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg".to_string(),
+            element: Some("img".to_string()),
+            attribute: Some("srcset".to_string()),
+        },
+        RawUri {
+            text: "/cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg".to_string(),
+            element: Some("img".to_string()),
+            attribute: Some("srcset".to_string()),
+        },
+        RawUri {
+            text: "/cdn-cgi/image/format=webp,width=3840/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg".to_string(),
+            element: Some("img".to_string()),
+            attribute: Some("src".to_string()),
+        }
+
+        ];
+        let uris = extract_html(input, false);
+        assert_eq!(uris, expected);
+    }
 }
diff --git a/lychee-lib/src/extract/html/mod.rs b/lychee-lib/src/extract/html/mod.rs
new file mode 100644
index 0000000..ef02c06
--- /dev/null
+++ b/lychee-lib/src/extract/html/mod.rs
@@ -0,0 +1,72 @@
+//! Extract links and fragments from html documents
+pub(crate) mod html5ever;
+pub(crate) mod html5gum;
+mod srcset;
+
+use linkify::{LinkFinder, LinkKind};
+
+/// Check if the given URL is an email link.
+///
+/// This operates on the raw URL strings, not the linkified version because it
+/// gets used in the HTML extractors, which parse the HTML attributes directly
+/// and return the raw strings.
+///
+/// Note that `LinkFinder::links()` is lazy and traverses the input in `O(n)`,
+/// so there should be no big performance penalty for calling this function.
+pub(crate) fn is_email_link(input: &str) -> bool {
+    let mut findings = LinkFinder::new().kinds(&[LinkKind::Email]).links(input);
+    let email = match findings.next() {
+        None => return false,
+        Some(email) => email.as_str(),
+    };
+
+    // Email needs to match the full string.
+    // Strip the "mailto:" prefix if it exists.
+    input.strip_prefix("mailto:").unwrap_or(input) == email
+}
+
+/// Check if the given element is in the list of preformatted ("verbatim") tags.
+///
+/// These will be excluded from link checking by default.
+// Including the <script> tag is debatable, but the alternative is to
+// have a separate list of tags which need a separate config setting and that
+// seems worse.
+pub(crate) fn is_verbatim_elem(name: &str) -> bool {
+    matches!(
+        name,
+        "code"
+            | "kbd"
+            | "listing"
+            | "noscript"
+            | "plaintext"
+            | "pre"
+            | "samp"
+            | "script"
+            | "textarea"
+            | "var"
+            | "xmp"
+    )
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn test_is_email_link() {
+        assert!(is_email_link("mailto:steve@apple.com"));
+        assert!(!is_email_link("mailto:steve@apple.com in a sentence"));
+
+        assert!(is_email_link("foo@example.org"));
+        assert!(!is_email_link("foo@example.org in sentence"));
+        assert!(!is_email_link("https://example.org"));
+    }
+
+    #[test]
+    fn test_verbatim_matching() {
+        assert!(is_verbatim_elem("pre"));
+        assert!(is_verbatim_elem("code"));
+        assert!(is_verbatim_elem("listing"));
+        assert!(is_verbatim_elem("script"));
+    }
+}
diff --git a/lychee-lib/src/extract/html/srcset.rs b/lychee-lib/src/extract/html/srcset.rs
new file mode 100644
index 0000000..08a25cd
--- /dev/null
+++ b/lychee-lib/src/extract/html/srcset.rs
@@ -0,0 +1,218 @@
+//! Extract all image URLs from a srcset.
+//!
+//! A `srcset` is a string containing a comma-separated list of one or more
+//! image candidate strings to be used when determining which image resource to
+//! present inside an `<img>` element.
+//!
+//! Each image candidate string must begin with a valid URL referencing a
+//! non-interactive graphic resource. This is followed by whitespace and then a
+//! condition descriptor that indicates the circumstances in which the indicated
+//! image should be used. Space characters, other than the whitespace separating
+//! the URL and the corresponding condition descriptor, are ignored; this
+//! includes both leading and trailing space, as well as space before or after
+//! each comma.
+//!
+//! Note: this handles cases where a URL contains a comma, which should be
+//! escaped, but is a valid character in a URL and occurs in the wild.
+//! Note: we cannot assume that commas within URLs are encoded as `%2C`, as they
+//! should be according to RFC 3986.
+//! Thus, the parsing process becomes significantly more complex and we need to
+//! use a state machine to keep track of the current state.
+
+use log::info;
+
+enum State {
+    InsideDescriptor,
+    AfterDescriptor,
+    InsideParens,
+}
+
+/// Split an input string at the first character for which
+/// the predicate returns false.
+fn split_at<F>(input: &str, predicate: F) -> (&str, &str)
+where
+    F: Fn(&char) -> bool,
+{
+    for (i, ch) in input.char_indices() {
+        if !predicate(&ch) {
+            return input.split_at(i);
+        }
+    }
+    (input, "")
+}
+
+/// Parse a srcset string into a list of URLs.
+//
+// This state-machine is a bit convoluted, but we keep everything in one place
+// for simplicity so we have to please clippy.
+pub(crate) fn parse(input: &str) -> Vec<&str> {
+    let mut candidates: Vec<&str> = Vec::new();
+    let mut index = 0;
+
+    while index < input.len() {
+        let position = &input[index..];
+        let (start, remaining) = split_at(position, |c| *c == ',' || c.is_whitespace());
+
+        if start.find(',').is_some() {
+            info!("srcset parse Error");
+            return vec![];
+        }
+        index += start.chars().count();
+
+        if remaining.is_empty() {
+            return candidates;
+        }
+
+        let (url, remaining) = split_at(remaining, |c| !c.is_whitespace());
+        index += url.chars().count();
+
+        let comma_count = url.chars().rev().take_while(|c| *c == ',').count();
+
+        if let Some(url) = url.get(..url.len() - comma_count) {
+            candidates.push(url);
+        }
+
+        if comma_count > 1 {
+            info!("srcset parse error (trailing commas)");
+            return vec![];
+        }
+
+        index += 1;
+
+        let (space, remaining) = split_at(remaining, |c| c.is_whitespace());
+        index += space.len();
+
+        index = skip_descriptor(index, remaining);
+    }
+
+    candidates
+}
+
+/// Helper function to skip over a descriptor.
+/// Returns the index of the next character after the descriptor
+/// (i.e. pointing at the comma or the end of the string)
+fn skip_descriptor(mut index: usize, remaining: &str) -> usize {
+    let mut state = State::InsideDescriptor;
+
+    for c in remaining.chars() {
+        index += 1;
+
+        match state {
+            State::InsideDescriptor => match c {
+                ' ' => state = State::AfterDescriptor,
+                '(' => state = State::InsideParens,
+                ',' => return index,
+                _ => {}
+            },
+            State::InsideParens => {
+                if c == ')' {
+                    state = State::InsideDescriptor;
+                }
+            }
+            State::AfterDescriptor => {
+                if c != ' ' {
+                    state = State::InsideDescriptor;
+                }
+            }
+        }
+    }
+
+    index
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+
+    #[test]
+    fn test_collect_sequence_characters_with_empty_string() {
+        let (sequence, remainder) = split_at("", |c| c.is_alphabetic());
+        assert_eq!(sequence, "");
+        assert_eq!(remainder, "");
+    }
+
+    #[test]
+    fn test_collect_sequence_characters_with_alphabetic_predicate() {
+        let (sequence, remainder) = split_at("abc123", |c| c.is_alphabetic());
+        assert_eq!(sequence, "abc");
+        assert_eq!(remainder, "123");
+    }
+
+    #[test]
+    fn test_collect_sequence_characters_with_digit_predicate() {
+        let (sequence, remainder) = split_at("123abc", char::is_ascii_digit);
+        assert_eq!(sequence, "123");
+        assert_eq!(remainder, "abc");
+    }
+
+    #[test]
+    fn test_collect_sequence_characters_with_no_match() {
+        let (sequence, remainder) = split_at("123abc", |c| c.is_whitespace());
+        assert_eq!(sequence, "");
+        assert_eq!(remainder, "123abc");
+    }
+
+    #[test]
+    fn test_collect_sequence_characters_with_all_match() {
+        let (sequence, remainder) = split_at("123abc", |c| !c.is_whitespace());
+        assert_eq!(sequence, "123abc");
+        assert_eq!(remainder, "");
+    }
+
+    #[test]
+    fn test_parse_no_value() {
+        assert!(parse("").is_empty());
+    }
+
+    #[test]
+    fn test_parse_url_one_value() {
+        let candidates = vec!["test-img-320w.jpg".to_string()];
+        assert_eq!(parse("test-img-320w.jpg 320w"), candidates);
+    }
+
+    #[test]
+    fn test_parse_srcset_two_values() {
+        assert_eq!(
+            parse("test-img-320w.jpg 320w, test-img-480w.jpg 480w"),
+            vec![
+                "test-img-320w.jpg".to_string(),
+                "test-img-480w.jpg".to_string(),
+            ]
+        );
+    }
+
+    #[test]
+    fn test_parse_srcset_with_unencoded_comma() {
+        assert_eq!(
+            parse(
+                "/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 640w, /cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 750w"
+            ),
+            vec![
+                "/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg".to_string(),
+                "/cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg".to_string(),
+            ]
+        );
+    }
+
+    #[test]
+    fn test_parse_srcset_url() {
+        assert_eq!(
+            parse("https://example.com/image1.jpg 1x, https://example.com/image2.jpg 2x"),
+            vec![
+                "https://example.com/image1.jpg",
+                "https://example.com/image2.jpg"
+            ]
+        );
+    }
+
+    #[test]
+    fn test_parse_srcset_with_commas() {
+        assert_eq!(
+            parse("/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 640w, /cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg 750w"),
+            vec![
+                "/cdn-cgi/image/format=webp,width=640/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg",
+                "/cdn-cgi/image/format=webp,width=750/https://img.youtube.com/vi/hVBl8_pgQf0/maxresdefault.jpg"
+            ]
+        );
+    }
+}
diff --git a/lychee-lib/src/extract/markdown.rs b/lychee-lib/src/extract/markdown.rs
index 1867ec1..4cb1fc3 100644
--- a/lychee-lib/src/extract/markdown.rs
+++ b/lychee-lib/src/extract/markdown.rs
@@ -1,8 +1,11 @@
-use pulldown_cmark::{Event, Parser, Tag};
+//! Extract links and fragments from markdown documents
+use std::collections::{HashMap, HashSet};
+
+use pulldown_cmark::{Event, Options, Parser, Tag};
 
 use crate::{extract::plaintext::extract_plaintext, types::uri::raw::RawUri};
 
-use super::html5gum::extract_html;
+use super::html::html5gum::{extract_html, extract_html_fragments};
 
 /// Extract unparsed URL strings from a Markdown string.
 pub(crate) fn extract_markdown(input: &str, include_verbatim: bool) -> Vec<RawUri> {
@@ -77,15 +80,101 @@ pub(crate) fn extract_markdown(input: &str, include_verbatim: bool) -> Vec<RawUr
         .collect()
 }
 
+/// Extract fragments/anchors/fragments from a Markdown string.
+///
+/// Fragments are generated from headings using the same unique kebab case method as GitHub.
+/// If a [heading attribute](https://github.com/raphlinus/pulldown-cmark/blob/master/specs/heading_attrs.txt)
+/// is present,
+/// this will be added to the fragment set **alongside** the other generated fragment.
+/// It means a single heading such as `## Frag 1 {#frag-2}` would generate two fragments.
+pub(crate) fn extract_markdown_fragments(input: &str) -> HashSet<String> {
+    let mut in_heading = false;
+    let mut heading = String::new();
+    let mut id_generator = HeadingIdGenerator::default();
+
+    let mut out = HashSet::new();
+
+    for event in Parser::new_ext(input, Options::ENABLE_HEADING_ATTRIBUTES) {
+        match event {
+            Event::Start(Tag::Heading(..)) => {
+                in_heading = true;
+            }
+            Event::End(Tag::Heading(_level, id, _classes)) => {
+                if let Some(frag) = id {
+                    out.insert(frag.to_string());
+                }
+
+                if !heading.is_empty() {
+                    let id = id_generator.generate(&heading);
+                    out.insert(id);
+                    heading.clear();
+                }
+
+                in_heading = false;
+            }
+            Event::Text(text) => {
+                if in_heading {
+                    heading.push_str(&text);
+                };
+            }
+
+            // An HTML node
+            Event::Html(html) => {
+                out.extend(extract_html_fragments(&html));
+            }
+
+            // Silently skip over other events
+            _ => (),
+        }
+    }
+    out
+}
+
+#[derive(Default)]
+struct HeadingIdGenerator {
+    counter: HashMap<String, usize>,
+}
+
+impl HeadingIdGenerator {
+    fn generate(&mut self, heading: &str) -> String {
+        let mut id = Self::into_kebab_case(heading);
+        let count = self.counter.entry(id.clone()).or_insert(0);
+        if *count != 0 {
+            id = format!("{}-{}", id, *count);
+        }
+        *count += 1;
+
+        id
+    }
+
+    /// Converts text into kebab case
+    #[must_use]
+    fn into_kebab_case(text: &str) -> String {
+        text.chars()
+            .filter_map(|ch| {
+                if ch.is_alphanumeric() || ch == '_' || ch == '-' {
+                    Some(ch.to_ascii_lowercase())
+                } else if ch.is_whitespace() {
+                    Some('-')
+                } else {
+                    None
+                }
+            })
+            .collect::<String>()
+    }
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
 
     const MD_INPUT: &str = r#"
-# Test
+# A Test
 
 Some link in text [here](https://foo.com)
 
+## A test {#well-still-the-same-test}
+
 Code:
 
 ```bash
@@ -95,8 +184,22 @@ https://bar.com/123
 or inline like `https://bar.org` for instance.
 
 [example](http://example.com)
+
+<span id="the-end">The End</span>
         "#;
 
+    #[test]
+    fn test_extract_fragments() {
+        let expected = HashSet::from([
+            "a-test".to_string(),
+            "a-test-1".to_string(),
+            "well-still-the-same-test".to_string(),
+            "the-end".to_string(),
+        ]);
+        let actual = extract_markdown_fragments(MD_INPUT);
+        assert_eq!(actual, expected);
+    }
+
     #[test]
     fn test_skip_verbatim() {
         let expected = vec![
@@ -148,12 +251,12 @@ or inline like `https://bar.org` for instance.
     #[test]
     #[ignore]
     fn test_skip_verbatim_html() {
-        let input = " 
+        let input = "
 <code>
 http://link.com
 </code>
 <pre>
-Some pre-formatted http://pre.com 
+Some pre-formatted http://pre.com
 </pre>";
 
         let expected = vec![];
@@ -161,4 +264,26 @@ Some pre-formatted http://pre.com
         let uris = extract_markdown(input, false);
         assert_eq!(uris, expected);
     }
+
+    #[test]
+    fn test_kebab_case() {
+        let check = |input, expected| {
+            let actual = HeadingIdGenerator::into_kebab_case(input);
+            assert_eq!(actual, expected);
+        };
+        check("A Heading", "a-heading");
+        check(
+            "This header has a :thumbsup: in it",
+            "this-header-has-a-thumbsup-in-it",
+        );
+        check(
+            "Header with 한글 characters (using unicode)",
+            "header-with-한글-characters-using-unicode",
+        );
+        check(
+            "Underscores foo_bar_, dots . and numbers 1.7e-3",
+            "underscores-foo_bar_-dots--and-numbers-17e-3",
+        );
+        check("Many          spaces", "many----------spaces");
+    }
 }
diff --git a/lychee-lib/src/extract/mod.rs b/lychee-lib/src/extract/mod.rs
index a7ee752..d9675ec 100644
--- a/lychee-lib/src/extract/mod.rs
+++ b/lychee-lib/src/extract/mod.rs
@@ -1,36 +1,12 @@
 use crate::types::{uri::raw::RawUri, FileType, InputContent};
 
-mod html5ever;
-mod html5gum;
-mod markdown;
+pub mod html;
+pub mod markdown;
 mod plaintext;
 
 use markdown::extract_markdown;
 use plaintext::extract_plaintext;
 
-/// Check if the given element is in the list of preformatted ("verbatim") tags.
-///
-/// These will be excluded from link checking by default.
-// Including the <script> tag is debatable, but the alternative is to
-// have a separate list of tags which need a separate config setting and that
-// seems worse.
-pub(crate) fn is_verbatim_elem(name: &str) -> bool {
-    matches!(
-        name,
-        "code"
-            | "kbd"
-            | "listing"
-            | "noscript"
-            | "plaintext"
-            | "pre"
-            | "samp"
-            | "script"
-            | "textarea"
-            | "var"
-            | "xmp"
-    )
-}
-
 /// A handler for extracting links from various input formats like Markdown and
 /// HTML. Allocations should be avoided if possible as this is a
 /// performance-critical section of the library.
@@ -69,9 +45,9 @@ impl Extractor {
             FileType::Markdown => extract_markdown(&input_content.content, self.include_verbatim),
             FileType::Html => {
                 if self.use_html5ever {
-                    html5ever::extract_html(&input_content.content, self.include_verbatim)
+                    html::html5ever::extract_html(&input_content.content, self.include_verbatim)
                 } else {
-                    html5gum::extract_html(&input_content.content, self.include_verbatim)
+                    html::html5gum::extract_html(&input_content.content, self.include_verbatim)
                 }
             }
             FileType::Plaintext => extract_plaintext(&input_content.content),
@@ -113,14 +89,6 @@ mod tests {
         uris_html5gum
     }
 
-    #[test]
-    fn test_verbatim_matching() {
-        assert!(is_verbatim_elem("pre"));
-        assert!(is_verbatim_elem("code"));
-        assert!(is_verbatim_elem("listing"));
-        assert!(is_verbatim_elem("script"));
-    }
-
     #[test]
     fn verbatim_elem() {
         let input = r#"
diff --git a/lychee-lib/src/filter/mod.rs b/lychee-lib/src/filter/mod.rs
index 3dde23c..96c1adf 100644
--- a/lychee-lib/src/filter/mod.rs
+++ b/lychee-lib/src/filter/mod.rs
@@ -1,7 +1,8 @@
 mod excludes;
 mod includes;
 
-use lazy_static::lazy_static;
+use once_cell::sync::Lazy;
+use regex::RegexSet;
 use std::collections::HashSet;
 
 pub use excludes::Excludes;
@@ -10,37 +11,45 @@ pub use includes::Includes;
 use crate::Uri;
 
 #[cfg(all(not(test), not(feature = "check_example_domains")))]
-lazy_static! {
-    /// These domains are explicitly defined by RFC 2606, section 3 Reserved Example
-    /// Second Level Domain Names for describing example cases and should not be
-    /// dereferenced as they should not have content.
-    static ref EXAMPLE_DOMAINS: HashSet<&'static str> =
-        HashSet::from_iter(["example.com", "example.org", "example.net", "example.edu"]);
-}
+/// These domains are explicitly defined by RFC 2606, section 3 Reserved Example
+/// Second Level Domain Names for describing example cases and should not be
+/// dereferenced as they should not have content.
+static EXAMPLE_DOMAINS: Lazy<HashSet<&'static str>> =
+    Lazy::new(|| HashSet::from_iter(["example.com", "example.org", "example.net", "example.edu"]));
 
 // Allow usage of example domains in tests
 #[cfg(any(test, feature = "check_example_domains"))]
-lazy_static! {
-    static ref EXAMPLE_DOMAINS: HashSet<&'static str> = HashSet::new();
-}
+static EXAMPLE_DOMAINS: Lazy<HashSet<&'static str>> = Lazy::new(HashSet::new);
+
+static UNSUPPORTED_DOMAINS: Lazy<HashSet<&'static str>> = Lazy::new(|| {
+    HashSet::from_iter([
+        // Twitter requires an account to view tweets
+        // https://news.ycombinator.com/item?id=36540957
+        "twitter.com",
+    ])
+});
 
 /// Pre-defined exclusions for known false-positives
 const FALSE_POSITIVE_PAT: &[&str] = &[
-    r"http://www.w3.org/1999/xhtml",
-    r"http://www.w3.org/1999/xlink",
-    r"http://www.w3.org/2000/svg",
-    r"https://schemas.microsoft.com",
-    r"http://schemas.zune.net",
-    r"http://schemas.openxmlformats.org",
+    r"^https?://schemas.openxmlformats.org",
+    r"^https?://schemas.zune.net",
+    r"^https?://www.w3.org/1999/xhtml",
+    r"^https?://www.w3.org/1999/xlink",
+    r"^https?://www.w3.org/2000/svg",
+    r"^https?://ogp.me/ns#",
+    r"^https?://schemas.microsoft.com",
 ];
 
+static FALSE_POSITIVE_SET: Lazy<RegexSet> =
+    Lazy::new(|| regex::RegexSet::new(FALSE_POSITIVE_PAT).expect("Failed to create RegexSet"));
+
 #[inline]
 #[must_use]
 /// The given input is a well-known false-positive, which won't be checked by
 /// default. This behavior can be explicitly overwritten by defining an
 /// `Include` pattern, which will match on a false positive
 pub fn is_false_positive(input: &str) -> bool {
-    FALSE_POSITIVE_PAT.iter().any(|pat| input.starts_with(pat))
+    FALSE_POSITIVE_SET.is_match(input)
 }
 
 #[inline]
@@ -69,6 +78,20 @@ pub fn is_example_domain(uri: &Uri) -> bool {
     res
 }
 
+#[inline]
+#[must_use]
+/// Check if the host belongs to a known unsupported domain
+pub fn is_unsupported_domain(uri: &Uri) -> bool {
+    if let Some(domain) = uri.domain() {
+        // It is not enough to use `UNSUPPORTED_DOMAINS.contains(domain)` here
+        // as this would not include checks for subdomains, such as
+        // `foo.example.com`
+        UNSUPPORTED_DOMAINS.iter().any(|tld| domain.ends_with(tld))
+    } else {
+        false
+    }
+}
+
 /// A generic URI filter
 /// Used to decide if a given URI should be checked or skipped
 #[allow(clippy::struct_excessive_bools)]
@@ -90,15 +113,15 @@ pub struct Filter {
     /// For IPv6: ::1/128
     pub exclude_loopback_ips: bool,
     /// Example: octocat@github.com
-    pub exclude_mail: bool,
+    pub include_mail: bool,
 }
 
 impl Filter {
     #[inline]
     #[must_use]
-    /// Whether e-mails aren't checked
+    /// Whether e-mails aren't checked (which is the default)
     pub fn is_mail_excluded(&self, uri: &Uri) -> bool {
-        self.exclude_mail && uri.is_mail()
+        uri.is_mail() && !self.include_mail
     }
 
     #[must_use]
@@ -156,7 +179,7 @@ impl Filter {
     /// # Details
     ///
     /// 1. If any of the following conditions are met, the URI is excluded:
-    ///   - If it's a mail address and it's configured to ignore mail addresses.
+    ///   - If it's a mail address and it's not configured to include mail addresses.
     ///   - If the IP address belongs to a type that is configured to exclude.
     ///   - If the host belongs to a type that is configured to exclude.
     ///   - If the scheme of URI is not the allowed scheme.
@@ -173,11 +196,12 @@ impl Filter {
     #[must_use]
     pub fn is_excluded(&self, uri: &Uri) -> bool {
         // Skip mail address, specific IP, specific host and scheme
-        if self.is_mail_excluded(uri)
-            || self.is_ip_excluded(uri)
+        if self.is_scheme_excluded(uri)
             || self.is_host_excluded(uri)
-            || self.is_scheme_excluded(uri)
+            || self.is_ip_excluded(uri)
+            || self.is_mail_excluded(uri)
             || is_example_domain(uri)
+            || is_unsupported_domain(uri)
         {
             return true;
         }
@@ -187,7 +211,7 @@ impl Filter {
         if self.is_includes_empty() {
             if self.is_excludes_empty() {
                 // Both excludes and includes rules are empty:
-                // *Presumably included* unless it's false positive
+                // *Presumably included* unless it's a false positive
                 return is_false_positive(input);
             }
         } else if self.is_includes_match(input) {
@@ -339,9 +363,8 @@ mod tests {
     }
 
     #[test]
-    fn test_exclude_mail() {
+    fn test_exclude_mail_by_default() {
         let filter = Filter {
-            exclude_mail: true,
             ..Filter::default()
         };
 
@@ -350,6 +373,18 @@ mod tests {
         assert!(!filter.is_excluded(&website("http://bar.dev")));
     }
 
+    #[test]
+    fn test_include_mail() {
+        let filter = Filter {
+            include_mail: true,
+            ..Filter::default()
+        };
+
+        assert!(!filter.is_excluded(&mail("mail@example.com")));
+        assert!(!filter.is_excluded(&mail("foo@bar.dev")));
+        assert!(!filter.is_excluded(&website("http://bar.dev")));
+    }
+
     #[test]
     fn test_exclude_regex() {
         let excludes = Excludes {
@@ -365,7 +400,7 @@ mod tests {
         assert!(filter.is_excluded(&mail("mail@example.com")));
 
         assert!(!filter.is_excluded(&website("http://bar.dev")));
-        assert!(!filter.is_excluded(&mail("foo@bar.dev")));
+        assert!(filter.is_excluded(&mail("foo@bar.dev")));
     }
     #[test]
     fn test_exclude_include_regex() {
diff --git a/lychee-lib/src/lib.rs b/lychee-lib/src/lib.rs
index cfaeafc..878d3e8 100644
--- a/lychee-lib/src/lib.rs
+++ b/lychee-lib/src/lib.rs
@@ -50,6 +50,7 @@
 #[cfg(doctest)]
 doc_comment::doctest!("../../README.md");
 
+mod basic_auth;
 mod client;
 /// A pool of clients, to handle concurrent checks
 pub mod collector;
@@ -74,11 +75,14 @@ pub mod test_utils;
 
 #[cfg(test)]
 use doc_comment as _; // required for doctest
-use openssl_sys as _; // required for vendored-openssl feature
 use ring as _; // required for apple silicon
 
+#[cfg(feature = "native-tls")]
+use openssl_sys as _; // required for vendored-openssl feature
+
 #[doc(inline)]
 pub use crate::{
+    basic_auth::BasicAuthExtractor,
     // Constants get exposed so that the CLI can use the same defaults as the library
     client::{
         check, Client, ClientBuilder, DEFAULT_MAX_REDIRECTS, DEFAULT_MAX_RETRIES,
@@ -87,7 +91,8 @@ pub use crate::{
     collector::Collector,
     filter::{Excludes, Filter, Includes},
     types::{
-        uri::valid::Uri, Base, CacheStatus, ErrorKind, FileType, Input, InputContent, InputSource,
-        Request, Response, ResponseBody, Result, Status,
+        uri::valid::Uri, Base, BasicAuthCredentials, BasicAuthSelector, CacheStatus, CookieJar,
+        ErrorKind, FileType, Input, InputContent, InputSource, Request, Response, ResponseBody,
+        Result, Status,
     },
 };
diff --git a/lychee-lib/src/quirks/mod.rs b/lychee-lib/src/quirks/mod.rs
index 7e4d16a..7f30cba 100644
--- a/lychee-lib/src/quirks/mod.rs
+++ b/lychee-lib/src/quirks/mod.rs
@@ -5,8 +5,6 @@ use regex::Regex;
 use reqwest::{Request, Url};
 use std::collections::HashMap;
 
-static TWITTER_PATTERN: Lazy<Regex> =
-    Lazy::new(|| Regex::new(r"^(https?://)?(www\.)?twitter.com").unwrap());
 static CRATES_PATTERN: Lazy<Regex> =
     Lazy::new(|| Regex::new(r"^(https?://)?(www\.)?crates.io").unwrap());
 static YOUTUBE_PATTERN: Lazy<Regex> =
@@ -33,13 +31,6 @@ pub(crate) struct Quirks {
 impl Default for Quirks {
     fn default() -> Self {
         let quirks = vec![
-            Quirk {
-                pattern: &TWITTER_PATTERN,
-                rewrite: |mut request| {
-                    request.url_mut().set_host(Some("nitter.net")).unwrap();
-                    request
-                },
-            },
             Quirk {
                 pattern: &CRATES_PATTERN,
                 rewrite: |mut request| {
@@ -118,34 +109,6 @@ mod tests {
         }
     }
 
-    #[test]
-    fn test_twitter_request() {
-        let cases = vec![
-            (
-                "https://twitter.com/search?q=rustlang",
-                "https://nitter.net/search?q=rustlang",
-            ),
-            ("http://twitter.com/jack", "http://nitter.net/jack"),
-            (
-                "https://twitter.com/notifications",
-                "https://nitter.net/notifications",
-            ),
-        ];
-
-        for (input, output) in cases {
-            let url = Url::parse(input).unwrap();
-            let expected = Url::parse(output).unwrap();
-
-            let request = Request::new(Method::GET, url.clone());
-            let modified = Quirks::default().apply(request);
-
-            assert_eq!(
-                MockRequest(modified),
-                MockRequest::new(Method::GET, expected)
-            );
-        }
-    }
-
     #[test]
     fn test_cratesio_request() {
         let url = Url::parse("https://crates.io/crates/lychee").unwrap();
diff --git a/lychee-lib/src/remap.rs b/lychee-lib/src/remap.rs
index 03d0d36..56cbd37 100644
--- a/lychee-lib/src/remap.rs
+++ b/lychee-lib/src/remap.rs
@@ -22,9 +22,9 @@
 use std::ops::Index;
 
 use regex::Regex;
-use reqwest::Url;
+use url::Url;
 
-use crate::ErrorKind;
+use crate::{ErrorKind, Result};
 
 /// Rules that remap matching URL patterns.
 ///
@@ -35,28 +35,42 @@ use crate::ErrorKind;
 /// # Notes
 /// See module level documentation of usage notes.
 #[derive(Debug, Clone)]
-pub struct Remaps(Vec<(Regex, Url)>);
+pub struct Remaps(Vec<(Regex, String)>);
 
 impl Remaps {
     /// Create a new remapper
     #[must_use]
-    pub fn new(patterns: Vec<(Regex, Url)>) -> Self {
+    pub fn new(patterns: Vec<(Regex, String)>) -> Self {
         Self(patterns)
     }
 
     /// Returns an iterator over the rules.
     // `iter_mut` is deliberately avoided.
-    pub fn iter(&self) -> std::slice::Iter<(Regex, Url)> {
+    pub fn iter(&self) -> std::slice::Iter<(Regex, String)> {
         self.0.iter()
     }
 
     /// Remap URL against remapping rules.
-    pub fn remap(&self, url: &mut Url) {
-        for (pattern, new_url) in self {
-            if pattern.is_match(url.as_str()) {
-                *url = new_url.clone();
+    ///
+    /// If there is no matching rule, the original URL is returned.
+    ///
+    /// # Errors
+    ///
+    /// Returns an `Err` if the remapping rule produces an invalid URL.
+    #[must_use = "Remapped URLs must be used"]
+    pub fn remap(&self, original: &Url) -> Result<Url> {
+        for (pattern, replacement) in self {
+            if pattern.is_match(original.as_str()) {
+                let after = pattern.replace_all(original.as_str(), replacement);
+                let after_url = Url::parse(after.as_ref()).map_err(|_| {
+                    ErrorKind::InvalidUrlRemap(format!(
+                        "The remapping pattern must produce a valid URL, but it is not: {after}"
+                    ))
+                })?;
+                return Ok(after_url);
             }
         }
+        Ok(original.clone())
     }
 
     /// Returns `true` if there is no remapping rule defined.
@@ -73,9 +87,9 @@ impl Remaps {
 }
 
 impl Index<usize> for Remaps {
-    type Output = (Regex, Url);
+    type Output = (Regex, String);
 
-    fn index(&self, index: usize) -> &(regex::Regex, url::Url) {
+    fn index(&self, index: usize) -> &(regex::Regex, String) {
         &self.0[index]
     }
 }
@@ -100,13 +114,14 @@ impl TryFrom<&[String]> for Remaps {
         for remap in remaps {
             let params: Vec<_> = remap.split_whitespace().collect();
             if params.len() != 2 {
-                return Err(ErrorKind::InvalidUrlRemap(remap.to_string()));
+                return Err(ErrorKind::InvalidUrlRemap(
+                    format!("Cannot parse into URI remapping, must be a Regex pattern and a URL separated by whitespaces: {remap}"
+                    )));
             }
 
             let pattern = Regex::new(params[0])?;
-            let url = Url::try_from(params[1])
-                .map_err(|e| ErrorKind::ParseUrl(e, params[1].to_string()))?;
-            parsed.push((pattern, url));
+            let replacement = params[1].to_string();
+            parsed.push((pattern, replacement));
         }
 
         Ok(Remaps::new(parsed))
@@ -116,9 +131,9 @@ impl TryFrom<&[String]> for Remaps {
 // Implementation for mutable iterator and moving iterator are deliberately
 // avoided
 impl<'a> IntoIterator for &'a Remaps {
-    type Item = &'a (Regex, Url);
+    type Item = &'a (Regex, String);
 
-    type IntoIter = std::slice::Iter<'a, (Regex, Url)>;
+    type IntoIter = std::slice::Iter<'a, (Regex, String)>;
 
     fn into_iter(self) -> Self::IntoIter {
         self.0.iter()
@@ -127,42 +142,127 @@ impl<'a> IntoIterator for &'a Remaps {
 
 #[cfg(test)]
 mod tests {
+    use url::Url;
+
     use super::*;
 
     #[test]
     fn test_remap() {
-        let pattern = Regex::new("https://example.com").unwrap();
-        let new_url = Url::try_from("http://127.0.0.1:8080").unwrap();
-        let remaps = Remaps::new(vec![(pattern, new_url.clone())]);
+        let input = "https://example.com";
+        let input_url = Url::try_from(input).unwrap();
+        let input_pattern = Regex::new(input).unwrap();
+        let replacement = "http://127.0.0.1:8080";
+        let remaps = Remaps::new(vec![(input_pattern, replacement.to_string())]);
 
-        let mut input = Url::try_from("https://example.com").unwrap();
-        remaps.remap(&mut input);
+        let output = remaps.remap(&input_url).unwrap();
 
-        assert_eq!(input, new_url);
+        assert_eq!(output, Url::try_from(replacement).unwrap());
     }
 
     #[test]
     fn test_remap_path() {
-        let pattern = Regex::new("../../issues").unwrap();
-        let new_url = Url::try_from("https://example.com").unwrap();
-        let remaps = Remaps::new(vec![(pattern, new_url.clone())]);
+        let input = Url::try_from("file://../../issues").unwrap();
+        let input_pattern = Regex::new(".*?../../issues").unwrap();
+        let replacement = Url::try_from("https://example.com").unwrap();
+        let remaps = Remaps::new(vec![(input_pattern, replacement.to_string())]);
 
-        let mut input = Url::try_from("file://../../issues").unwrap();
-        remaps.remap(&mut input);
+        let output = remaps.remap(&input).unwrap();
 
-        assert_eq!(input, new_url);
+        assert_eq!(output, replacement);
     }
 
     #[test]
     fn test_remap_skip() {
+        let input = Url::try_from("https://unrelated.example.com").unwrap();
         let pattern = Regex::new("https://example.com").unwrap();
-        let new_url = Url::try_from("http://127.0.0.1:8080").unwrap();
-        let remaps = Remaps::new(vec![(pattern, new_url)]);
+        let replacement = Url::try_from("http://127.0.0.1:8080").unwrap();
+        let remaps = Remaps::new(vec![(pattern, replacement.to_string())]);
 
-        let mut input = Url::try_from("https://unrelated.example.com").unwrap();
-        remaps.remap(&mut input);
+        let output = remaps.remap(&input).unwrap();
 
         // URL was not modified
-        assert_eq!(input, input);
+        assert_eq!(input, output);
+    }
+
+    #[test]
+    fn test_remap_url_to_file() {
+        let pattern = Regex::new("https://docs.example.org").unwrap();
+        let replacement = "file:///Users/user/code/repo/docs/_site";
+        let remaps = Remaps::new(vec![(pattern, replacement.to_string())]);
+
+        let tests = [
+            (
+                "https://docs.example.org/integrations/distcp.html",
+                "file:///Users/user/code/repo/docs/_site/integrations/distcp.html",
+            ),
+            (
+                "https://docs.example.org/howto/import.html#working-with-imported-data",
+                "file:///Users/user/code/repo/docs/_site/howto/import.html#working-with-imported-data",
+            ),
+            (
+                "https://docs.example.org/howto/garbage-collection-committed.html",
+                "file:///Users/user/code/repo/docs/_site/howto/garbage-collection-committed.html",
+            ),
+        ];
+
+        for (input, expected) in tests {
+            let input = Url::parse(input).unwrap();
+            let output = remaps.remap(&input).unwrap();
+            assert_eq!(output, Url::parse(expected).unwrap());
+        }
+    }
+
+    /// This is a partial remap, i.e. the URL is not fully replaced but only
+    /// part of it. The parts to be replaced are defined by the regex pattern
+    /// using capture groups.
+    #[test]
+    fn test_remap_capture_group() {
+        let input = Url::try_from("https://example.com/1/2/3").unwrap();
+        let input_pattern = Regex::new("https://example.com/.*?/(.*?)/.*").unwrap();
+        let replacement = Url::try_from("https://example.com/foo/$1/bar").unwrap();
+
+        let remaps = Remaps::new(vec![(input_pattern, replacement.to_string())]);
+
+        let output = remaps.remap(&input).unwrap();
+
+        assert_eq!(
+            output,
+            Url::try_from("https://example.com/foo/2/bar").unwrap()
+        );
+    }
+
+    #[test]
+    fn test_remap_named_capture() {
+        let input = Url::try_from("https://example.com/1/2/3").unwrap();
+        let input_pattern = Regex::new("https://example.com/.*?/(?P<foo>.*?)/.*").unwrap();
+        let replacement = Url::try_from("https://example.com/foo/$foo/bar").unwrap();
+
+        let remaps = Remaps::new(vec![(input_pattern, replacement.to_string())]);
+
+        let output = remaps.remap(&input).unwrap();
+
+        assert_eq!(
+            output,
+            Url::try_from("https://example.com/foo/2/bar").unwrap()
+        );
+    }
+
+    #[test]
+    fn test_remap_named_capture_shorthand() {
+        let input = Url::try_from("https://example.com/1/2/3").unwrap();
+        #[allow(clippy::invalid_regex)]
+        // Clippy acts up here, but this syntax is actually valid
+        // See https://docs.rs/regex/latest/regex/index.html#grouping-and-flags
+        let input_pattern = Regex::new(r"https://example.com/.*?/(?<foo>.*?)/.*").unwrap();
+        let replacement = Url::try_from("https://example.com/foo/$foo/bar").unwrap();
+
+        let remaps = Remaps::new(vec![(input_pattern, replacement.to_string())]);
+
+        let output = remaps.remap(&input).unwrap();
+
+        assert_eq!(
+            output,
+            Url::try_from("https://example.com/foo/2/bar").unwrap()
+        );
     }
 }
diff --git a/lychee-lib/src/types/basic_auth/credentials.rs b/lychee-lib/src/types/basic_auth/credentials.rs
new file mode 100644
index 0000000..2452fb9
--- /dev/null
+++ b/lychee-lib/src/types/basic_auth/credentials.rs
@@ -0,0 +1,68 @@
+use std::str::FromStr;
+
+use headers::{authorization::Basic, Authorization};
+use serde::Deserialize;
+use thiserror::Error;
+
+#[derive(Copy, Clone, Debug, Error, PartialEq)]
+pub enum BasicAuthCredentialsParseError {
+    #[error("Invalid basic auth credentials syntax")]
+    InvalidSyntax,
+
+    #[error("Missing basic auth password")]
+    MissingPassword,
+
+    #[error("Missing basic auth username")]
+    MissingUsername,
+
+    #[error("Too many values separated by colon. Expected 2, got {0}. Valid form is '<username>:<password>'")]
+    TooManyParts(usize),
+}
+
+/// [`BasicAuthCredentials`] contains a pair of basic auth values consisting of
+/// a username and password.
+#[derive(Debug, Clone, Deserialize, PartialEq, Eq, Hash)]
+pub struct BasicAuthCredentials {
+    /// Basic auth username
+    pub username: String,
+
+    /// Basic auth password
+    pub password: String,
+}
+
+impl FromStr for BasicAuthCredentials {
+    type Err = BasicAuthCredentialsParseError;
+
+    fn from_str(credentials: &str) -> Result<Self, Self::Err> {
+        let parts: Vec<_> = credentials.trim().split(':').collect();
+
+        if parts.len() <= 1 {
+            return Err(BasicAuthCredentialsParseError::InvalidSyntax);
+        }
+
+        if parts.len() > 2 {
+            return Err(BasicAuthCredentialsParseError::TooManyParts(parts.len()));
+        }
+
+        if parts[0].is_empty() {
+            return Err(BasicAuthCredentialsParseError::MissingUsername);
+        }
+
+        if parts[1].is_empty() {
+            return Err(BasicAuthCredentialsParseError::MissingPassword);
+        }
+
+        Ok(Self {
+            username: parts[0].to_string(),
+            password: parts[1].to_string(),
+        })
+    }
+}
+
+impl BasicAuthCredentials {
+    /// Returns the credentials as [`Authorization<Basic>`].
+    #[must_use]
+    pub fn to_authorization(&self) -> Authorization<Basic> {
+        Authorization::basic(&self.username, &self.password)
+    }
+}
diff --git a/lychee-lib/src/types/basic_auth/mod.rs b/lychee-lib/src/types/basic_auth/mod.rs
new file mode 100644
index 0000000..873c3b0
--- /dev/null
+++ b/lychee-lib/src/types/basic_auth/mod.rs
@@ -0,0 +1,5 @@
+mod credentials;
+mod selector;
+
+pub use credentials::*;
+pub use selector::*;
diff --git a/lychee-lib/src/types/basic_auth/selector.rs b/lychee-lib/src/types/basic_auth/selector.rs
new file mode 100644
index 0000000..25de9de
--- /dev/null
+++ b/lychee-lib/src/types/basic_auth/selector.rs
@@ -0,0 +1,137 @@
+use std::str::FromStr;
+
+use serde_with::DeserializeFromStr;
+use thiserror::Error;
+
+use crate::{types::basic_auth::BasicAuthCredentialsParseError, BasicAuthCredentials};
+
+#[derive(Clone, Debug, Error, PartialEq)]
+pub enum BasicAuthSelectorParseError {
+    #[error("Empty selector input")]
+    EmptyInput,
+
+    #[error("Missing basic auth credentials or URI. Valid form is '<uri> <username>:<password>'")]
+    InvalidSyntax,
+
+    #[error("Too many space separated values. Expected 2, got {0}. Valid form is '<uri> <username>:<password>'")]
+    TooManyParts(usize),
+
+    #[error("Basic auth credentials error")]
+    BasicAuthCredentialsParseError(#[from] BasicAuthCredentialsParseError),
+
+    #[error("Regex compile error")]
+    RegexError(#[from] regex::Error),
+}
+
+/// [`BasicAuthSelector`] provides basic auth credentials for URLs which match
+/// the specified regex. This allows users to set different credentials based
+/// on the URLs they want to target.
+#[derive(Debug, Clone, DeserializeFromStr, PartialEq)]
+pub struct BasicAuthSelector {
+    /// The basic auth credentials made up of username and password
+    pub credentials: BasicAuthCredentials,
+
+    /// This regex matches URLs which will use the basic auth credentials
+    pub raw_uri_regex: String,
+}
+
+impl FromStr for BasicAuthSelector {
+    type Err = BasicAuthSelectorParseError;
+
+    fn from_str(selector: &str) -> Result<Self, Self::Err> {
+        let selector = selector.trim();
+
+        if selector.is_empty() {
+            return Err(BasicAuthSelectorParseError::EmptyInput);
+        }
+
+        let parts: Vec<_> = selector.split(' ').collect();
+
+        if parts.len() <= 1 {
+            return Err(BasicAuthSelectorParseError::InvalidSyntax);
+        }
+
+        if parts.len() > 2 {
+            return Err(BasicAuthSelectorParseError::TooManyParts(parts.len()));
+        }
+
+        Ok(Self {
+            credentials: parts[1].parse()?,
+            raw_uri_regex: parts[0].to_string(),
+        })
+    }
+}
+
+#[cfg(test)]
+mod test {
+    use super::*;
+
+    #[test]
+    fn test_valid_basic_auth_selector() {
+        let input = "http://example.com foo:bar";
+        let selector: BasicAuthSelector = input.parse().unwrap();
+
+        assert_eq!(selector.raw_uri_regex, "http://example.com".to_string());
+        assert_eq!(
+            selector.credentials,
+            BasicAuthCredentials {
+                username: "foo".to_string(),
+                password: "bar".to_string()
+            }
+        );
+    }
+
+    #[test]
+    fn test_missing_uri_basic_auth_selector() {
+        let input = "foo:bar";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(
+            result.unwrap_err(),
+            BasicAuthSelectorParseError::InvalidSyntax
+        );
+    }
+
+    #[test]
+    fn test_missing_credentials_basic_auth_selector() {
+        let input = "https://example.com";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(
+            result.unwrap_err(),
+            BasicAuthSelectorParseError::InvalidSyntax
+        );
+    }
+
+    #[test]
+    fn test_empty_basic_auth_selector() {
+        let input = "";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(result.unwrap_err(), BasicAuthSelectorParseError::EmptyInput);
+
+        let input = "   ";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(result.unwrap_err(), BasicAuthSelectorParseError::EmptyInput);
+    }
+
+    #[test]
+    fn test_too_many_parts_basic_auth_selector() {
+        let input = "";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(result.unwrap_err(), BasicAuthSelectorParseError::EmptyInput);
+
+        let input = "   ";
+        let result = BasicAuthSelector::from_str(input);
+
+        assert!(result.is_err());
+        assert_eq!(result.unwrap_err(), BasicAuthSelectorParseError::EmptyInput);
+    }
+}
diff --git a/lychee-lib/src/types/cookies.rs b/lychee-lib/src/types/cookies.rs
new file mode 100644
index 0000000..acc29dc
--- /dev/null
+++ b/lychee-lib/src/types/cookies.rs
@@ -0,0 +1,84 @@
+use std::io::ErrorKind as IoErrorKind;
+use std::{path::PathBuf, sync::Arc};
+
+use crate::{ErrorKind, Result};
+use log::info;
+use reqwest_cookie_store::{CookieStore as ReqwestCookieStore, CookieStoreMutex};
+
+/// A wrapper around `reqwest_cookie_store::CookieStore`
+///
+/// We keep track of the file path of the cookie store and
+/// implement `PartialEq` to compare cookie jars by their path
+#[derive(Debug, Clone)]
+pub struct CookieJar {
+    pub(crate) path: PathBuf,
+    pub(crate) inner: Arc<CookieStoreMutex>,
+}
+
+impl CookieJar {
+    /// Load a cookie store from a file
+    ///
+    /// Currently only JSON files are supported
+    ///
+    /// # Errors
+    ///
+    /// This function will return an error if
+    /// - the file cannot be opened or
+    /// - if the file is not valid JSON
+    pub fn load(path: PathBuf) -> Result<Self> {
+        match std::fs::File::open(&path).map(std::io::BufReader::new) {
+            Ok(reader) => {
+                info!("Loading cookies from {}", path.display());
+                let inner = Arc::new(CookieStoreMutex::new(
+                    ReqwestCookieStore::load_json(reader)
+                        .map_err(|e| ErrorKind::Cookies(format!("Failed to load cookies: {e}")))?,
+                ));
+                Ok(Self { path, inner })
+            }
+            // Create a new cookie store if the file does not exist
+            Err(e) if e.kind() == IoErrorKind::NotFound => Ok(Self {
+                path,
+                inner: Arc::new(CookieStoreMutex::new(ReqwestCookieStore::default())),
+            }),
+            // Propagate other IO errors (like permission denied) to the caller
+            Err(e) => Err(e.into()),
+        }
+    }
+
+    /// Save the cookie store to file as JSON
+    /// This will overwrite the file, which was loaded if any
+    ///
+    /// # Errors
+    ///
+    /// This function will return an error if
+    /// - the cookie store is locked or
+    /// - the file cannot be opened or
+    /// - if the file cannot be written to or
+    /// - if the file cannot be serialized to JSON
+    pub fn save(&self) -> Result<()> {
+        let mut file = std::fs::File::create(&self.path)?;
+        self.inner
+            .lock()
+            .map_err(|e| ErrorKind::Cookies(format!("Failed to lock cookie store: {e}")))?
+            .save_json(&mut file)
+            .map_err(|e| ErrorKind::Cookies(format!("Failed to save cookies: {e}")))
+    }
+}
+
+// Deref to inner cookie store
+impl std::ops::Deref for CookieJar {
+    type Target = Arc<CookieStoreMutex>;
+
+    fn deref(&self) -> &Self::Target {
+        &self.inner
+    }
+}
+
+impl PartialEq for CookieJar {
+    fn eq(&self, other: &Self) -> bool {
+        // Assume that the cookie jar is the same if the path is the same
+        // Comparing the cookie stores directly is not possible because the
+        // `CookieStore` struct does not implement `Eq`
+        self.path == other.path
+    }
+}
diff --git a/lychee-lib/src/types/error.rs b/lychee-lib/src/types/error.rs
index 0f964ec..4857557 100644
--- a/lychee-lib/src/types/error.rs
+++ b/lychee-lib/src/types/error.rs
@@ -6,7 +6,7 @@ use thiserror::Error;
 use tokio::task::JoinError;
 
 use super::InputContent;
-use crate::{utils, Uri};
+use crate::{basic_auth::BasicAuthExtractorError, utils, Uri};
 
 /// Kinds of status errors
 /// Note: The error messages can change over time, so don't match on the output
@@ -63,6 +63,10 @@ pub enum ErrorKind {
     #[error("Cannot find file")]
     InvalidFilePath(Uri),
 
+    /// The given URI cannot be converted to a file path
+    #[error("Cannot find fragment")]
+    InvalidFragment(Uri),
+
     /// The given path cannot be converted to a URI
     #[error("Invalid path to URL conversion: {0}")]
     InvalidUrlFromPath(PathBuf),
@@ -82,12 +86,12 @@ pub enum ErrorKind {
     InvalidBase(String, String),
 
     /// The given input can not be parsed into a valid URI remapping
-    #[error("Cannot parse into URI remapping, must be a Regex pattern and a URL separated by whitespaces: `{0}`")]
+    #[error("Error remapping URL: `{0}`")]
     InvalidUrlRemap(String),
 
     /// The given path does not resolve to a valid file
     #[error("Cannot find local file {0}")]
-    FileNotFound(PathBuf),
+    InvalidFile(PathBuf),
 
     /// Error while traversing an input directory
     #[error("Cannot traverse input directory: {0}")]
@@ -128,6 +132,14 @@ pub enum ErrorKind {
     /// Too many redirects (HTTP 3xx) were encountered (configurable)
     #[error("Too many redirects")]
     TooManyRedirects(#[source] reqwest::Error),
+
+    /// Basic auth extractor error
+    #[error("Basic auth extractor error")]
+    BasicAuthExtractorError(#[from] BasicAuthExtractorError),
+
+    /// Cannot load cookies
+    #[error("Cannot load cookies")]
+    Cookies(String),
 }
 
 impl ErrorKind {
@@ -218,6 +230,14 @@ impl PartialEq for ErrorKind {
             (Self::Regex(e1), Self::Regex(e2)) => e1.to_string() == e2.to_string(),
             (Self::DirTraversal(e1), Self::DirTraversal(e2)) => e1.to_string() == e2.to_string(),
             (Self::Channel(_), Self::Channel(_)) => true,
+            (Self::TooManyRedirects(e1), Self::TooManyRedirects(e2)) => {
+                e1.to_string() == e2.to_string()
+            }
+            (Self::BasicAuthExtractorError(e1), Self::BasicAuthExtractorError(e2)) => {
+                e1.to_string() == e2.to_string()
+            }
+            (Self::Cookies(e1), Self::Cookies(e2)) => e1 == e2,
+            (Self::InvalidFile(p1), Self::InvalidFile(p2)) => p1 == p2,
             _ => false,
         }
     }
@@ -242,13 +262,14 @@ impl Hash for ErrorKind {
             Self::GithubRequest(e) => e.to_string().hash(state),
             Self::InvalidGithubUrl(s) => s.hash(state),
             Self::DirTraversal(e) => e.to_string().hash(state),
-            Self::FileNotFound(e) => e.to_string_lossy().hash(state),
+            Self::InvalidFile(e) => e.to_string_lossy().hash(state),
             Self::EmptyUrl => "Empty URL".hash(state),
             Self::ParseUrl(e, s) => (e.to_string(), s).hash(state),
             Self::InvalidURI(u) => u.hash(state),
             Self::InvalidUrlFromPath(p) => p.hash(state),
             Self::Utf8(e) => e.to_string().hash(state),
             Self::InvalidFilePath(u) => u.hash(state),
+            Self::InvalidFragment(u) => u.hash(state),
             Self::UnreachableEmailAddress(u, ..) => u.hash(state),
             Self::InsecureURL(u, ..) => u.hash(state),
             Self::InvalidBase(base, e) => (base, e).hash(state),
@@ -262,6 +283,8 @@ impl Hash for ErrorKind {
             }
             Self::Regex(e) => e.to_string().hash(state),
             Self::TooManyRedirects(e) => e.to_string().hash(state),
+            Self::BasicAuthExtractorError(e) => e.to_string().hash(state),
+            Self::Cookies(e) => e.to_string().hash(state),
         }
     }
 }
diff --git a/lychee-lib/src/types/input.rs b/lychee-lib/src/types/input.rs
index 25052ee..2db32e4 100644
--- a/lychee-lib/src/types/input.rs
+++ b/lychee-lib/src/types/input.rs
@@ -153,7 +153,7 @@ impl Input {
                     // and exit early if it does
                     // This check might not be sufficient to cover all cases
                     // but it catches the most common ones
-                    return Err(ErrorKind::FileNotFound(path));
+                    return Err(ErrorKind::InvalidFile(path));
                 } else {
                     // Invalid path; check if a valid URL can be constructed from the input
                     // by prefixing it with a `http://` scheme.
@@ -260,6 +260,41 @@ impl Input {
         }
     }
 
+    /// Retrieve all sources from this input. The output depends on the type of
+    /// input:
+    ///
+    /// - Remote URLs are returned as is, in their full form
+    /// - Filepath Glob Patterns are expanded and each matched entry is returned
+    /// - Absolute or relative filepaths are returned as is
+    /// - All other input types are not returned
+    ///
+    /// # Errors
+    ///
+    /// Returns an error if the globbing fails with the expanded pattern.
+    pub async fn get_sources(self) -> impl Stream<Item = Result<String>> {
+        try_stream! {
+            match self.source {
+                InputSource::RemoteUrl(url) => yield url.to_string(),
+                InputSource::FsGlob { pattern, ignore_case } => {
+                    let glob_expanded = tilde(&pattern).to_string();
+                    let mut match_opts = glob::MatchOptions::new();
+
+                    match_opts.case_sensitive = !ignore_case;
+
+                    for entry in glob_with(&glob_expanded, match_opts)? {
+                        match entry {
+                            Ok(path) => yield path.to_string_lossy().to_string(),
+                            Err(e) => eprintln!("{e:?}")
+                        }
+                    }
+                },
+                InputSource::FsPath(path) => yield path.to_string_lossy().to_string(),
+                InputSource::Stdin => yield "Stdin".into(),
+                InputSource::String(_) => yield "Raw String".into(),
+            }
+        }
+    }
+
     async fn url_contents(url: &Url) -> Result<InputContent> {
         // Assume HTML for default paths
         let file_type = if url.path().is_empty() || url.path() == "/" {
@@ -282,10 +317,10 @@ impl Input {
 
     async fn glob_contents(
         &self,
-        path_glob: &str,
+        pattern: &str,
         ignore_case: bool,
     ) -> impl Stream<Item = Result<InputContent>> + '_ {
-        let glob_expanded = tilde(&path_glob).to_string();
+        let glob_expanded = tilde(&pattern).to_string();
         let mut match_opts = glob::MatchOptions::new();
 
         match_opts.case_sensitive = !ignore_case;
@@ -407,10 +442,7 @@ mod tests {
 
         let input = Input::new(test_file, None, false, None);
         assert!(input.is_err());
-        assert!(matches!(
-            input,
-            Err(ErrorKind::FileNotFound(PathBuf { .. }))
-        ));
+        assert!(matches!(input, Err(ErrorKind::InvalidFile(PathBuf { .. }))));
     }
 
     #[test]
diff --git a/lychee-lib/src/types/mail.rs b/lychee-lib/src/types/mail.rs
index 584c700..7ef30bf 100644
--- a/lychee-lib/src/types/mail.rs
+++ b/lychee-lib/src/types/mail.rs
@@ -1,3 +1,5 @@
+#![cfg(all(feature = "email-check", feature = "native-tls"))]
+
 use check_if_email_exists::{CheckEmailOutput, Reachable};
 
 /// A crude way to extract error details from the mail output.
diff --git a/lychee-lib/src/types/mod.rs b/lychee-lib/src/types/mod.rs
index 0dcbf88..04df8a7 100644
--- a/lychee-lib/src/types/mod.rs
+++ b/lychee-lib/src/types/mod.rs
@@ -1,7 +1,9 @@
 #![allow(unreachable_pub)]
 
 mod base;
+mod basic_auth;
 mod cache;
+mod cookies;
 mod error;
 mod file;
 mod input;
@@ -12,7 +14,9 @@ mod status;
 pub(crate) mod uri;
 
 pub use base::Base;
+pub use basic_auth::{BasicAuthCredentials, BasicAuthSelector};
 pub use cache::CacheStatus;
+pub use cookies::CookieJar;
 pub use error::ErrorKind;
 pub use file::FileType;
 pub use input::{Input, InputContent, InputSource};
diff --git a/lychee-lib/src/types/request.rs b/lychee-lib/src/types/request.rs
index babb523..cde0441 100644
--- a/lychee-lib/src/types/request.rs
+++ b/lychee-lib/src/types/request.rs
@@ -1,6 +1,6 @@
 use std::{convert::TryFrom, fmt::Display};
 
-use crate::{ErrorKind, Uri};
+use crate::{BasicAuthCredentials, ErrorKind, Uri};
 
 use super::InputSource;
 
@@ -10,14 +10,20 @@ pub struct Request {
     /// A valid Uniform Resource Identifier of a given endpoint, which can be
     /// checked with lychee
     pub uri: Uri,
+
     /// The resource which contained the given URI
     pub source: InputSource,
+
     /// Specifies how the URI was rendered inside a document
     /// (for example `img`, `a`, `pre`, or `code`).
     /// In case of plaintext input the field is `None`.
     pub element: Option<String>,
+
     /// Specifies the attribute (e.g. `href`) that contained the URI
     pub attribute: Option<String>,
+
+    /// Basic auth credentials
+    pub credentials: Option<BasicAuthCredentials>,
 }
 
 impl Request {
@@ -29,12 +35,14 @@ impl Request {
         source: InputSource,
         element: Option<String>,
         attribute: Option<String>,
+        credentials: Option<BasicAuthCredentials>,
     ) -> Self {
         Request {
             uri,
             source,
             element,
             attribute,
+            credentials,
         }
     }
 }
@@ -54,6 +62,7 @@ impl TryFrom<Uri> for Request {
             InputSource::RemoteUrl(Box::new(uri.url)),
             None,
             None,
+            None,
         ))
     }
 }
@@ -63,7 +72,7 @@ impl TryFrom<String> for Request {
 
     fn try_from(s: String) -> Result<Self, Self::Error> {
         let uri = Uri::try_from(s.as_str())?;
-        Ok(Request::new(uri, InputSource::String(s), None, None))
+        Ok(Request::new(uri, InputSource::String(s), None, None, None))
     }
 }
 
@@ -77,6 +86,7 @@ impl TryFrom<&str> for Request {
             InputSource::String(s.to_owned()),
             None,
             None,
+            None,
         ))
     }
 }
diff --git a/lychee-lib/src/types/status.rs b/lychee-lib/src/types/status.rs
index 615ed77..b9e7256 100644
--- a/lychee-lib/src/types/status.rs
+++ b/lychee-lib/src/types/status.rs
@@ -268,6 +268,16 @@ impl Status {
             },
         }
     }
+
+    /// Returns true if the status code is unknown
+    /// (i.e. not a valid HTTP status code)
+    ///
+    /// For example, `200` is a valid HTTP status code,
+    /// while `999` is not.
+    #[must_use]
+    pub const fn is_unknown(&self) -> bool {
+        matches!(self, Status::UnknownStatusCode(_))
+    }
 }
 
 impl From<ErrorKind> for Status {
@@ -352,4 +362,10 @@ mod tests {
             None
         );
     }
+
+    #[test]
+    fn test_status_unknown() {
+        assert!(Status::UnknownStatusCode(StatusCode::from_u16(999).unwrap()).is_unknown());
+        assert!(!Status::Ok(StatusCode::from_u16(200).unwrap()).is_unknown());
+    }
 }
diff --git a/lychee-lib/src/types/uri/github.rs b/lychee-lib/src/types/uri/github.rs
index 9f7ff13..750e417 100644
--- a/lychee-lib/src/types/uri/github.rs
+++ b/lychee-lib/src/types/uri/github.rs
@@ -1,10 +1,11 @@
-use lazy_static::lazy_static;
 use std::collections::HashSet;
 
+use once_cell::sync::Lazy;
+
 use crate::{ErrorKind, Result, Uri};
 
-lazy_static! {
-    static ref GITHUB_API_EXCLUDED_ENDPOINTS: HashSet<&'static str> = HashSet::from_iter([
+static GITHUB_API_EXCLUDED_ENDPOINTS: Lazy<HashSet<&'static str>> = Lazy::new(|| {
+    HashSet::from_iter([
         "about",
         "collections",
         "events",
@@ -19,8 +20,8 @@ lazy_static! {
         "sponsors",
         "topics",
         "watching",
-    ]);
-}
+    ])
+});
 
 /// Uri path segments extracted from a Github URL
 #[derive(PartialEq, Eq, PartialOrd, Ord, Debug)]
diff --git a/lychee-lib/src/utils/fragment_checker.rs b/lychee-lib/src/utils/fragment_checker.rs
new file mode 100644
index 0000000..39e034e
--- /dev/null
+++ b/lychee-lib/src/utils/fragment_checker.rs
@@ -0,0 +1,70 @@
+use std::{
+    collections::{hash_map::Entry, HashMap, HashSet},
+    path::Path,
+    sync::Arc,
+};
+
+use crate::{
+    extract::{html::html5gum::extract_html_fragments, markdown::extract_markdown_fragments},
+    types::FileType,
+    Result,
+};
+use tokio::{fs, sync::Mutex};
+use url::Url;
+
+/// Holds a cache of fragments for a given URL.
+///
+/// Fragments, also known as anchors, are used to link to a specific
+/// part of a page. For example, the URL `https://example.com#foo`
+/// will link to the element with the `id` of `foo`.
+///
+/// This cache is used to avoid having to re-parse the same file
+/// multiple times when checking if a given URL contains a fragment.
+///
+/// The cache is stored in a `HashMap` with the URL as the key and
+/// a `HashSet` of fragments as the value.
+#[derive(Default, Clone, Debug)]
+pub(crate) struct FragmentChecker {
+    cache: Arc<Mutex<HashMap<String, HashSet<String>>>>,
+}
+
+impl FragmentChecker {
+    /// Creates a new `FragmentChecker`.
+    pub(crate) fn new() -> Self {
+        Self {
+            cache: Arc::default(),
+        }
+    }
+
+    /// Checks the given path contains the given fragment.
+    ///
+    /// Returns false, if there is a fragment in the link and the path is to a markdown file which
+    /// doesn't contain the given fragment.
+    ///
+    /// In all other cases, returns true.
+    pub(crate) async fn check(&self, path: &Path, url: &Url) -> Result<bool> {
+        let Some(fragment) = url.fragment() else {
+            return Ok(true)
+        };
+        let url_without_frag = Self::remove_fragment(url.clone());
+
+        let extractor = match FileType::from(path) {
+            FileType::Markdown => extract_markdown_fragments,
+            FileType::Html => extract_html_fragments,
+            FileType::Plaintext => return Ok(true),
+        };
+        match self.cache.lock().await.entry(url_without_frag) {
+            Entry::Vacant(entry) => {
+                let content = fs::read_to_string(path).await?;
+                let file_frags = extractor(&content);
+                Ok(entry.insert(file_frags).contains(fragment))
+            }
+            Entry::Occupied(entry) => Ok(entry.get().contains(fragment)),
+        }
+    }
+
+    fn remove_fragment(mut url: Url) -> String {
+        url.set_fragment(None);
+        url.into()
+    }
+}
diff --git a/lychee-lib/src/utils/mod.rs b/lychee-lib/src/utils/mod.rs
index fe6aec3..d75d20c 100644
--- a/lychee-lib/src/utils/mod.rs
+++ b/lychee-lib/src/utils/mod.rs
@@ -1,3 +1,4 @@
+pub(crate) mod fragment_checker;
 pub(crate) mod path;
 pub(crate) mod request;
 pub(crate) mod reqwest;
diff --git a/lychee-lib/src/utils/path.rs b/lychee-lib/src/utils/path.rs
index 7966ee8..b03b016 100644
--- a/lychee-lib/src/utils/path.rs
+++ b/lychee-lib/src/utils/path.rs
@@ -45,7 +45,7 @@ pub(crate) fn resolve(src: &Path, dst: &Path, base: &Option<Base>) -> Result<Opt
         relative if dst.is_relative() => {
             // Find `dst` in the parent directory of `src`
             let Some(parent) = src.parent() else {
-                return Err(ErrorKind::FileNotFound(relative.to_path_buf()))
+                return Err(ErrorKind::InvalidFile(relative.to_path_buf()))
             };
             parent.join(relative)
         }
@@ -62,7 +62,7 @@ pub(crate) fn resolve(src: &Path, dst: &Path, base: &Option<Base>) -> Result<Opt
             };
             join(dir.to_path_buf(), absolute)
         }
-        _ => return Err(ErrorKind::FileNotFound(dst.to_path_buf())),
+        _ => return Err(ErrorKind::InvalidFile(dst.to_path_buf())),
     };
     Ok(Some(absolute_path(resolved)))
 }
diff --git a/lychee-lib/src/utils/request.rs b/lychee-lib/src/utils/request.rs
index b48e130..70f82ce 100644
--- a/lychee-lib/src/utils/request.rs
+++ b/lychee-lib/src/utils/request.rs
@@ -7,19 +7,26 @@ use std::{
 };
 
 use crate::{
+    basic_auth::BasicAuthExtractor,
     types::{uri::raw::RawUri, InputContent, InputSource},
     utils::{path, url},
-    Base, ErrorKind, Request, Result, Uri,
+    Base, BasicAuthCredentials, ErrorKind, Request, Result, Uri,
 };
 
 const MAX_TRUNCATED_STR_LEN: usize = 100;
 
+/// Extract basic auth credentials for a given URL.
+fn credentials(extractor: &Option<BasicAuthExtractor>, uri: &Uri) -> Option<BasicAuthCredentials> {
+    extractor.as_ref().and_then(|ext| ext.matches(uri))
+}
+
 /// Create requests out of the collected URLs.
 /// Only keeps "valid" URLs. This filters out anchors for example.
 pub(crate) fn create(
     uris: Vec<RawUri>,
     input_content: &InputContent,
     base: &Option<Base>,
+    extractor: &Option<BasicAuthExtractor>,
 ) -> Result<HashSet<Request>> {
     let base_url = Base::from_source(&input_content.source);
 
@@ -42,15 +49,50 @@ pub(crate) fn create(
             };
 
             if let Ok(uri) = Uri::try_from(raw_uri) {
-                Ok(Some(Request::new(uri, source, element, attribute)))
+                let credentials = credentials(extractor, &uri);
+
+                Ok(Some(Request::new(
+                    uri,
+                    source,
+                    element,
+                    attribute,
+                    credentials,
+                )))
             } else if let Some(url) = base.as_ref().and_then(|u| u.join(&text)) {
-                Ok(Some(Request::new(Uri { url }, source, element, attribute)))
+                let uri = Uri { url };
+                let credentials = credentials(extractor, &uri);
+
+                Ok(Some(Request::new(
+                    uri,
+                    source,
+                    element,
+                    attribute,
+                    credentials,
+                )))
             } else if let InputSource::FsPath(root) = &input_content.source {
-                if is_anchor {
-                    // Silently ignore anchor links for now
-                    Ok(None)
-                } else if let Some(url) = create_uri_from_path(root, &text, base)? {
-                    Ok(Some(Request::new(Uri { url }, source, element, attribute)))
+                let path = if is_anchor {
+                    match root.file_name() {
+                        Some(file_name) => match file_name.to_str() {
+                            Some(valid_str) => valid_str.to_string() + &text,
+                            None => return Err(ErrorKind::InvalidFile(root.clone())),
+                        },
+                        None => return Err(ErrorKind::InvalidFile(root.clone())),
+                    }
+                } else {
+                    text
+                };
+
+                if let Some(url) = create_uri_from_path(root, &path, base)? {
+                    let uri = Uri { url };
+                    let credentials = credentials(extractor, &uri);
+
+                    Ok(Some(Request::new(
+                        uri,
+                        source,
+                        element,
+                        attribute,
+                        credentials,
+                    )))
                 } else {
                     // In case we cannot create a URI from a path but we didn't receive an error,
                     // it means that some preconditions were not met, e.g. the `base_url` wasn't set.
@@ -60,11 +102,15 @@ pub(crate) fn create(
                 if base.is_some() {
                     Ok(None)
                 } else {
+                    let uri = Uri { url: url? };
+                    let credentials = credentials(extractor, &uri);
+
                     Ok(Some(Request::new(
-                        Uri { url: url? },
+                        uri,
                         source,
                         element,
                         attribute,
+                        credentials,
                     )))
                 }
             } else {
@@ -85,7 +131,7 @@ fn construct_url(base: &Option<Url>, text: &str) -> Option<Result<Url>> {
 }
 
 fn create_uri_from_path(src: &Path, dst: &str, base: &Option<Base>) -> Result<Option<Url>> {
-    let dst = url::remove_get_params_and_fragment(dst);
+    let (dst, frag) = url::remove_get_params_and_separate_fragment(dst);
     // Avoid double-encoding already encoded destination paths by removing any
     // potential encoding (e.g. `web%20site` becomes `web site`).
     // That's because Url::from_file_path will encode the full URL in the end.
@@ -99,6 +145,10 @@ fn create_uri_from_path(src: &Path, dst: &str, base: &Option<Base>) -> Result<Op
     let resolved = path::resolve(src, &PathBuf::from(&*decoded), base)?;
     match resolved {
         Some(path) => Url::from_file_path(&path)
+            .map(|mut url| {
+                url.set_fragment(frag);
+                url
+            })
             .map(Some)
             .map_err(|_e| ErrorKind::InvalidUrlFromPath(path)),
         None => Ok(None),
diff --git a/lychee-lib/src/utils/url.rs b/lychee-lib/src/utils/url.rs
index 4e76cc3..c27f0a0 100644
--- a/lychee-lib/src/utils/url.rs
+++ b/lychee-lib/src/utils/url.rs
@@ -4,18 +4,18 @@ use once_cell::sync::Lazy;
 
 static LINK_FINDER: Lazy<LinkFinder> = Lazy::new(LinkFinder::new);
 
-/// Remove all GET parameters from a URL.
+/// Remove all GET parameters from a URL and separates out the fragment.
 /// The link is not a URL but a String as it may not have a base domain.
-pub(crate) fn remove_get_params_and_fragment(url: &str) -> &str {
-    let path = match url.split_once('#') {
-        Some((path_without_fragment, _fragment)) => path_without_fragment,
-        None => url,
+pub(crate) fn remove_get_params_and_separate_fragment(url: &str) -> (&str, Option<&str>) {
+    let (path, frag) = match url.split_once('#') {
+        Some((path, fragment)) => (path, Some(fragment)),
+        None => (url, None),
     };
     let path = match path.split_once('?') {
         Some((path_without_params, _params)) => path_without_params,
         None => path,
     };
-    path
+    (path, frag)
 }
 
 // Use `LinkFinder` to offload the raw link searching in plaintext
@@ -29,47 +29,49 @@ mod test_fs_tree {
 
     #[test]
     fn test_remove_get_params_and_fragment() {
-        assert_eq!(remove_get_params_and_fragment("/"), "/");
+        assert_eq!(remove_get_params_and_separate_fragment("/"), ("/", None));
         assert_eq!(
-            remove_get_params_and_fragment("index.html?foo=bar"),
-            "index.html"
+            remove_get_params_and_separate_fragment("index.html?foo=bar"),
+            ("index.html", None)
         );
         assert_eq!(
-            remove_get_params_and_fragment("/index.html?foo=bar"),
-            "/index.html"
+            remove_get_params_and_separate_fragment("/index.html?foo=bar"),
+            ("/index.html", None)
         );
         assert_eq!(
-            remove_get_params_and_fragment("/index.html?foo=bar&baz=zorx?bla=blub"),
-            "/index.html"
+            remove_get_params_and_separate_fragment("/index.html?foo=bar&baz=zorx?bla=blub"),
+            ("/index.html", None)
         );
         assert_eq!(
-            remove_get_params_and_fragment("https://example.com/index.html?foo=bar"),
-            "https://example.com/index.html"
+            remove_get_params_and_separate_fragment("https://example.com/index.html?foo=bar"),
+            ("https://example.com/index.html", None)
         );
         assert_eq!(
-            remove_get_params_and_fragment("test.png?foo=bar"),
-            "test.png"
+            remove_get_params_and_separate_fragment("test.png?foo=bar"),
+            ("test.png", None)
         );
 
         assert_eq!(
-            remove_get_params_and_fragment("https://example.com/index.html#anchor"),
-            "https://example.com/index.html"
+            remove_get_params_and_separate_fragment("https://example.com/index.html#anchor"),
+            ("https://example.com/index.html", Some("anchor"))
         );
         assert_eq!(
-            remove_get_params_and_fragment("https://example.com/index.html?foo=bar#anchor"),
-            "https://example.com/index.html"
+            remove_get_params_and_separate_fragment(
+                "https://example.com/index.html?foo=bar#anchor"
+            ),
+            ("https://example.com/index.html", Some("anchor"))
         );
         assert_eq!(
-            remove_get_params_and_fragment("test.png?foo=bar#anchor"),
-            "test.png"
+            remove_get_params_and_separate_fragment("test.png?foo=bar#anchor"),
+            ("test.png", Some("anchor"))
         );
         assert_eq!(
-            remove_get_params_and_fragment("test.png#anchor?anchor!?"),
-            "test.png"
+            remove_get_params_and_separate_fragment("test.png#anchor?anchor!?"),
+            ("test.png", Some("anchor?anchor!?"))
         );
         assert_eq!(
-            remove_get_params_and_fragment("test.png?foo=bar#anchor?anchor!"),
-            "test.png"
+            remove_get_params_and_separate_fragment("test.png?foo=bar#anchor?anchor!"),
+            ("test.png", Some("anchor?anchor!"))
         );
     }
 }
diff --git a/lychee.example.toml b/lychee.example.toml
index 3a221b2..9c23c8a 100644
--- a/lychee.example.toml
+++ b/lychee.example.toml
@@ -73,7 +73,7 @@ base = "https://example.com"
 # HTTP basic auth support. This will be the username and password passed to the
 # authorization HTTP header. See
 # <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization>
-basic_auth = "user:pwd"
+basic_auth = ["example.com user:pwd"]
 
 #############################  Exclusions  ##########################
 
@@ -88,7 +88,10 @@ include_verbatim = false
 glob_ignore_case = false
 
 # Exclude URLs and mail addresses from checking (supports regex).
-exclude = [ '.*\.github.com\.*' ]
+exclude = [
+    '^https://www\.linkedin\.com',
+    '^https://web\.archive\.org/web/',
+]
 
 # Exclude these filesystem paths from getting checked.
 exclude_path = ["file/path/to/Ignore", "./other/file/path/to/Ignore"]
@@ -110,5 +113,5 @@ exclude_link_local = false
 # Exclude loopback IP address range and localhost from checking.
 exclude_loopback = false
 
-# Exclude all mail addresses from checking.
-exclude_mail = false
+# Check mail addresses
+include_mail = true
